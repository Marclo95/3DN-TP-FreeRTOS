
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f8  080065f8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006600  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b0  2000006c  0800666c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000421c  0800666c  0000821c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a94  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00018b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa0  00000000  00000000  0001c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285e9  00000000  00000000  0001d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012205  00000000  00000000  00045741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2643  00000000  00000000  00057946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149f89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d8c  00000000  00000000  00149fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063a4 	.word	0x080063a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080063a4 	.word	0x080063a4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <__NVIC_SystemReset+0x24>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000512:	4904      	ldr	r1, [pc, #16]	@ (8000524 <__NVIC_SystemReset+0x24>)
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <__NVIC_SystemReset+0x28>)
 8000516:	4313      	orrs	r3, r2
 8000518:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800051a:	f3bf 8f4f 	dsb	sy
}
 800051e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <__NVIC_SystemReset+0x20>
 8000524:	e000ed00 	.word	0xe000ed00
 8000528:	05fa0004 	.word	0x05fa0004

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	@ (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200000a0 	.word	0x200000a0
 800055c:	200000f4 	.word	0x200000f4

08000560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b0b2      	sub	sp, #200	@ 0xc8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	  // Créer le sémaphore binaire
	  xSemaphore = xSemaphoreCreateBinary();
 8000566:	2203      	movs	r2, #3
 8000568:	2100      	movs	r1, #0
 800056a:	2001      	movs	r0, #1
 800056c:	f003 fac2 	bl	8003af4 <xQueueGenericCreate>
 8000570:	4603      	mov	r3, r0
 8000572:	4a46      	ldr	r2, [pc, #280]	@ (800068c <MX_FREERTOS_Init+0x12c>)
 8000574:	6013      	str	r3, [r2, #0]

	  if (xSemaphore != NULL)
 8000576:	4b45      	ldr	r3, [pc, #276]	@ (800068c <MX_FREERTOS_Init+0x12c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d023      	beq.n	80005c6 <MX_FREERTOS_Init+0x66>
	  {
	    // Création des deux nouvelles tâches
		  osThreadDef(TaskTAKE, SartTaskTakes, osPriorityHigh, 0, 128);
 800057e:	4b44      	ldr	r3, [pc, #272]	@ (8000690 <MX_FREERTOS_Init+0x130>)
 8000580:	f107 0420 	add.w	r4, r7, #32
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  TaskTAKEHandle = osThreadCreate(osThread(TaskTAKE), NULL);
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f003 f92a 	bl	80037f2 <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000694 <MX_FREERTOS_Init+0x134>)
 80005a2:	6013      	str	r3, [r2, #0]

		  osThreadDef(TaskGIVE, StartTaskGive, osPriorityBelowNormal, 0, 128);
 80005a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000698 <MX_FREERTOS_Init+0x138>)
 80005a6:	1d3c      	adds	r4, r7, #4
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  TaskGIVEHandle = osThreadCreate(osThread(TaskGIVE), NULL);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f919 	bl	80037f2 <osThreadCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <MX_FREERTOS_Init+0x13c>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c6:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <MX_FREERTOS_Init+0x140>)
 80005c8:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f906 	bl	80037f2 <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a2e      	ldr	r2, [pc, #184]	@ (80006a4 <MX_FREERTOS_Init+0x144>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTASK */
  osThreadDef(LEDTASK, LEDtask, osPriorityNormal, 0, 128);
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <MX_FREERTOS_Init+0x148>)
 80005ee:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTASKHandle = osThreadCreate(osThread(LEDTASK), NULL);
 8000600:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f8f3 	bl	80037f2 <osThreadCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a27      	ldr	r2, [pc, #156]	@ (80006ac <MX_FREERTOS_Init+0x14c>)
 8000610:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskGIVE */
  osThreadDef(TaskGIVE, StartTaskGive, osPriorityIdle, 0, 128);
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_FREERTOS_Init+0x150>)
 8000614:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskGIVEHandle = osThreadCreate(osThread(TaskGIVE), NULL);
 8000626:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f8e0 	bl	80037f2 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a19      	ldr	r2, [pc, #100]	@ (800069c <MX_FREERTOS_Init+0x13c>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTAKE */
  osThreadDef(TaskTAKE, SartTaskTakes, osPriorityIdle, 0, 128);
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_FREERTOS_Init+0x154>)
 800063a:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800063e:	461d      	mov	r5, r3
 8000640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTAKEHandle = osThreadCreate(osThread(TaskTAKE), NULL);
 800064c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 f8cd 	bl	80037f2 <osThreadCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <MX_FREERTOS_Init+0x134>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask */
  osThreadDef(myTask, StartTask, osPriorityIdle, 0, 128);
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_FREERTOS_Init+0x158>)
 8000660:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskHandle = osThreadCreate(osThread(myTask), NULL);
 8000672:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f003 f8ba 	bl	80037f2 <osThreadCreate>
 800067e:	4603      	mov	r3, r0
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <MX_FREERTOS_Init+0x15c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000684:	bf00      	nop
 8000686:	37c8      	adds	r7, #200	@ 0xc8
 8000688:	46bd      	mov	sp, r7
 800068a:	bdb0      	pop	{r4, r5, r7, pc}
 800068c:	20000088 	.word	0x20000088
 8000690:	080063c8 	.word	0x080063c8
 8000694:	20000098 	.word	0x20000098
 8000698:	080063f0 	.word	0x080063f0
 800069c:	20000094 	.word	0x20000094
 80006a0:	08006418 	.word	0x08006418
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	0800643c 	.word	0x0800643c
 80006ac:	20000090 	.word	0x20000090
 80006b0:	08006458 	.word	0x08006458
 80006b4:	08006474 	.word	0x08006474
 80006b8:	08006498 	.word	0x08006498
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f003 f8de 	bl	800388a <osDelay>
 80006ce:	e7fb      	b.n	80006c8 <StartDefaultTask+0x8>

080006d0 <LEDtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDtask */
void LEDtask(void const * argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDtask */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 80006d8:	2102      	movs	r1, #2
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <LEDtask+0x20>)
 80006dc:	f001 fa7f 	bl	8001bde <HAL_GPIO_TogglePin>
	    printf("LED toggled!\r\n");             // Message série (si printf bien redirigé)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <LEDtask+0x24>)
 80006e2:	f005 fabd 	bl	8005c60 <puts>
	    vTaskDelay(100 / portTICK_PERIOD_MS);   // Attente de 100 ms
 80006e6:	2064      	movs	r0, #100	@ 0x64
 80006e8:	f003 ff2a 	bl	8004540 <vTaskDelay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 80006ec:	bf00      	nop
 80006ee:	e7f3      	b.n	80006d8 <LEDtask+0x8>
 80006f0:	40022000 	.word	0x40022000
 80006f4:	080064b4 	.word	0x080064b4

080006f8 <StartTaskGive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGive */
void StartTaskGive(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGive */
  /* Infinite loop */
  for(;;)
  {
	    printf("taskGive : je vais donner le sémaphore\r\n");
 8000700:	4808      	ldr	r0, [pc, #32]	@ (8000724 <StartTaskGive+0x2c>)
 8000702:	f005 faad 	bl	8005c60 <puts>
	    xSemaphoreGive(xSemaphore);
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <StartTaskGive+0x30>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	f003 fa52 	bl	8003bb8 <xQueueGenericSend>
	    printf("taskGive : sémaphore donné\r\n");
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <StartTaskGive+0x34>)
 8000716:	f005 faa3 	bl	8005c60 <puts>
	    vTaskDelay(100 / portTICK_PERIOD_MS);
 800071a:	2064      	movs	r0, #100	@ 0x64
 800071c:	f003 ff10 	bl	8004540 <vTaskDelay>
	    printf("taskGive : je vais donner le sémaphore\r\n");
 8000720:	bf00      	nop
 8000722:	e7ed      	b.n	8000700 <StartTaskGive+0x8>
 8000724:	080064c4 	.word	0x080064c4
 8000728:	20000088 	.word	0x20000088
 800072c:	080064f0 	.word	0x080064f0

08000730 <SartTaskTakes>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SartTaskTakes */
void SartTaskTakes(void const * argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SartTaskTakes */
  /* Infinite loop */
  for(;;)
  {
	    printf("taskTake : en attente du sémaphore\r\n");
 8000738:	4808      	ldr	r0, [pc, #32]	@ (800075c <SartTaskTakes+0x2c>)
 800073a:	f005 fa91 	bl	8005c60 <puts>
	    if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <SartTaskTakes+0x30>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f04f 31ff 	mov.w	r1, #4294967295
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fb40 	bl	8003dcc <xQueueSemaphoreTake>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f2      	bne.n	8000738 <SartTaskTakes+0x8>
	    {
	      printf("taskTake : sémaphore pris avec succès\r\n");
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <SartTaskTakes+0x34>)
 8000754:	f005 fa84 	bl	8005c60 <puts>
	    printf("taskTake : en attente du sémaphore\r\n");
 8000758:	e7ee      	b.n	8000738 <SartTaskTakes+0x8>
 800075a:	bf00      	nop
 800075c:	08006510 	.word	0x08006510
 8000760:	20000088 	.word	0x20000088
 8000764:	08006538 	.word	0x08006538

08000768 <StartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask */
void StartTask(void const * argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  /* Infinite loop */
  for(;;)
  {
	    printf("taskTake : en attente du sémaphore (timeout 1s)...\r\n");
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <StartTask+0x3c>)
 8000772:	f005 fa75 	bl	8005c60 <puts>

	    // Timeout : 1000 ms
	    if (xSemaphoreTake(xSemaphore, 1000 / portTICK_PERIOD_MS) == pdTRUE)
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <StartTask+0x40>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fb24 	bl	8003dcc <xQueueSemaphoreTake>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d103      	bne.n	8000792 <StartTask+0x2a>
	    {
	      printf("taskTake : sémaphore pris avec succès\r\n");
 800078a:	4808      	ldr	r0, [pc, #32]	@ (80007ac <StartTask+0x44>)
 800078c:	f005 fa68 	bl	8005c60 <puts>
 8000790:	e7ee      	b.n	8000770 <StartTask+0x8>
	    }
	    else
	    {
	      printf("ERREUR : sémaphore non reçu, reset du système !\r\n");
 8000792:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <StartTask+0x48>)
 8000794:	f005 fa64 	bl	8005c60 <puts>
	      HAL_Delay(100); // petit délai pour envoyer le message
 8000798:	2064      	movs	r0, #100	@ 0x64
 800079a:	f000 ff51 	bl	8001640 <HAL_Delay>
	      NVIC_SystemReset(); // 🔁 reset logiciel STM32
 800079e:	f7ff feaf 	bl	8000500 <__NVIC_SystemReset>
 80007a2:	bf00      	nop
 80007a4:	08006564 	.word	0x08006564
 80007a8:	20000088 	.word	0x20000088
 80007ac:	08006538 	.word	0x08006538
 80007b0:	0800659c 	.word	0x0800659c

080007b4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b090      	sub	sp, #64	@ 0x40
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	4bad      	ldr	r3, [pc, #692]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4aac      	ldr	r2, [pc, #688]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4baa      	ldr	r3, [pc, #680]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	4ba7      	ldr	r3, [pc, #668]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4aa6      	ldr	r2, [pc, #664]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4ba4      	ldr	r3, [pc, #656]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4ba1      	ldr	r3, [pc, #644]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4aa0      	ldr	r2, [pc, #640]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b9e      	ldr	r3, [pc, #632]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	4b9b      	ldr	r3, [pc, #620]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a9a      	ldr	r2, [pc, #616]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b98      	ldr	r3, [pc, #608]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b95      	ldr	r3, [pc, #596]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a94      	ldr	r2, [pc, #592]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b92      	ldr	r3, [pc, #584]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b8f      	ldr	r3, [pc, #572]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a8e      	ldr	r2, [pc, #568]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b8c      	ldr	r3, [pc, #560]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800085a:	4b89      	ldr	r3, [pc, #548]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a88      	ldr	r2, [pc, #544]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000860:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b86      	ldr	r3, [pc, #536]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000872:	4b83      	ldr	r3, [pc, #524]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a82      	ldr	r2, [pc, #520]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b80      	ldr	r3, [pc, #512]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800088a:	4b7d      	ldr	r3, [pc, #500]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a7c      	ldr	r2, [pc, #496]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b7a      	ldr	r3, [pc, #488]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b77      	ldr	r3, [pc, #476]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a76      	ldr	r2, [pc, #472]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b74      	ldr	r3, [pc, #464]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0320 	and.w	r3, r3, #32
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b71      	ldr	r3, [pc, #452]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a70      	ldr	r2, [pc, #448]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b6e      	ldr	r3, [pc, #440]	@ (8000a80 <MX_GPIO_Init+0x2cc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	486b      	ldr	r0, [pc, #428]	@ (8000a84 <MX_GPIO_Init+0x2d0>)
 80008d8:	f001 f968 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f241 010e 	movw	r1, #4110	@ 0x100e
 80008e2:	4869      	ldr	r0, [pc, #420]	@ (8000a88 <MX_GPIO_Init+0x2d4>)
 80008e4:	f001 f962 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2108      	movs	r1, #8
 80008ec:	4867      	ldr	r0, [pc, #412]	@ (8000a8c <MX_GPIO_Init+0x2d8>)
 80008ee:	f001 f95d 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f8:	4865      	ldr	r0, [pc, #404]	@ (8000a90 <MX_GPIO_Init+0x2dc>)
 80008fa:	f001 f957 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	21c8      	movs	r1, #200	@ 0xc8
 8000902:	4864      	ldr	r0, [pc, #400]	@ (8000a94 <MX_GPIO_Init+0x2e0>)
 8000904:	f001 f952 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000908:	2310      	movs	r3, #16
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000918:	230e      	movs	r3, #14
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	485d      	ldr	r0, [pc, #372]	@ (8000a98 <MX_GPIO_Init+0x2e4>)
 8000924:	f000 ff96 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000928:	2308      	movs	r3, #8
 800092a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000938:	4619      	mov	r1, r3
 800093a:	4857      	ldr	r0, [pc, #348]	@ (8000a98 <MX_GPIO_Init+0x2e4>)
 800093c:	f000 ff8a 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000940:	2304      	movs	r3, #4
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000950:	2309      	movs	r3, #9
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000958:	4619      	mov	r1, r3
 800095a:	484f      	ldr	r0, [pc, #316]	@ (8000a98 <MX_GPIO_Init+0x2e4>)
 800095c:	f000 ff7a 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000960:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000972:	230b      	movs	r3, #11
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097a:	4619      	mov	r1, r3
 800097c:	4845      	ldr	r0, [pc, #276]	@ (8000a94 <MX_GPIO_Init+0x2e0>)
 800097e:	f000 ff69 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000982:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000994:	230c      	movs	r3, #12
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099c:	4619      	mov	r1, r3
 800099e:	483e      	ldr	r0, [pc, #248]	@ (8000a98 <MX_GPIO_Init+0x2e4>)
 80009a0:	f000 ff58 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	2312      	movs	r3, #18
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b6:	2304      	movs	r3, #4
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4836      	ldr	r0, [pc, #216]	@ (8000a9c <MX_GPIO_Init+0x2e8>)
 80009c2:	f000 ff47 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80009c6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009d8:	230a      	movs	r3, #10
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_GPIO_Init+0x2e8>)
 80009e4:	f000 ff36 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009f8:	2302      	movs	r3, #2
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x2e8>)
 8000a04:	f000 ff26 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <MX_GPIO_Init+0x2d0>)
 8000a24:	f000 ff16 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000a28:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <MX_GPIO_Init+0x2ec>)
 8000a46:	f000 ff05 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <MX_GPIO_Init+0x2f0>)
 8000a68:	f000 fef4 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000a6c:	2360      	movs	r3, #96	@ 0x60
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a7c:	230d      	movs	r3, #13
 8000a7e:	e013      	b.n	8000aa8 <MX_GPIO_Init+0x2f4>
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40022000 	.word	0x40022000
 8000a8c:	40022800 	.word	0x40022800
 8000a90:	40021c00 	.word	0x40021c00
 8000a94:	40021800 	.word	0x40021800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	48bc      	ldr	r0, [pc, #752]	@ (8000da4 <MX_GPIO_Init+0x5f0>)
 8000ab2:	f000 fecf 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ab6:	2340      	movs	r3, #64	@ 0x40
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ace:	4619      	mov	r1, r3
 8000ad0:	48b5      	ldr	r0, [pc, #724]	@ (8000da8 <MX_GPIO_Init+0x5f4>)
 8000ad2:	f000 febf 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ad6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	48ae      	ldr	r0, [pc, #696]	@ (8000dac <MX_GPIO_Init+0x5f8>)
 8000af4:	f000 feae 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000af8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0a:	230e      	movs	r3, #14
 8000b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	48a6      	ldr	r0, [pc, #664]	@ (8000db0 <MX_GPIO_Init+0x5fc>)
 8000b16:	f000 fe9d 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	48a0      	ldr	r0, [pc, #640]	@ (8000db0 <MX_GPIO_Init+0x5fc>)
 8000b30:	f000 fe90 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000b34:	2340      	movs	r3, #64	@ 0x40
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b38:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	489a      	ldr	r0, [pc, #616]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000b4a:	f000 fe83 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b4e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b60:	230c      	movs	r3, #12
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4892      	ldr	r0, [pc, #584]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000b6c:	f000 fe72 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000b70:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b82:	230a      	movs	r3, #10
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <MX_GPIO_Init+0x604>)
 8000b8e:	f000 fe61 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b92:	23f0      	movs	r3, #240	@ 0xf0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	4883      	ldr	r0, [pc, #524]	@ (8000dbc <MX_GPIO_Init+0x608>)
 8000bae:	f000 fe51 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000bb2:	23f7      	movs	r3, #247	@ 0xf7
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bc2:	230e      	movs	r3, #14
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	487c      	ldr	r0, [pc, #496]	@ (8000dc0 <MX_GPIO_Init+0x60c>)
 8000bce:	f000 fe41 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000be4:	2309      	movs	r3, #9
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	486f      	ldr	r0, [pc, #444]	@ (8000dac <MX_GPIO_Init+0x5f8>)
 8000bf0:	f000 fe30 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c06:	230a      	movs	r3, #10
 8000c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4866      	ldr	r0, [pc, #408]	@ (8000dac <MX_GPIO_Init+0x5f8>)
 8000c12:	f000 fe1f 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4861      	ldr	r0, [pc, #388]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000c2e:	f000 fe11 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c32:	2308      	movs	r3, #8
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c42:	230d      	movs	r3, #13
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4859      	ldr	r0, [pc, #356]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000c4e:	f000 fe01 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000c52:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4854      	ldr	r0, [pc, #336]	@ (8000dbc <MX_GPIO_Init+0x608>)
 8000c6c:	f000 fdf2 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	484f      	ldr	r0, [pc, #316]	@ (8000dc4 <MX_GPIO_Init+0x610>)
 8000c86:	f000 fde5 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c8a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4848      	ldr	r0, [pc, #288]	@ (8000dc8 <MX_GPIO_Init+0x614>)
 8000ca8:	f000 fdd4 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000cac:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	483c      	ldr	r0, [pc, #240]	@ (8000dbc <MX_GPIO_Init+0x608>)
 8000cca:	f000 fdc3 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4836      	ldr	r0, [pc, #216]	@ (8000dc0 <MX_GPIO_Init+0x60c>)
 8000ce6:	f000 fdb5 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfc:	230d      	movs	r3, #13
 8000cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4829      	ldr	r0, [pc, #164]	@ (8000dac <MX_GPIO_Init+0x5f8>)
 8000d08:	f000 fda4 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4825      	ldr	r0, [pc, #148]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000d20:	f000 fd98 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000d24:	2304      	movs	r3, #4
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d34:	230c      	movs	r3, #12
 8000d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <MX_GPIO_Init+0x600>)
 8000d40:	f000 fd88 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d44:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	481c      	ldr	r0, [pc, #112]	@ (8000dcc <MX_GPIO_Init+0x618>)
 8000d5a:	f000 fd7b 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	4815      	ldr	r0, [pc, #84]	@ (8000dcc <MX_GPIO_Init+0x618>)
 8000d78:	f000 fd6c 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d7c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d8e:	230d      	movs	r3, #13
 8000d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <MX_GPIO_Init+0x618>)
 8000d9a:	f000 fd5b 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e016      	b.n	8000dd0 <MX_GPIO_Init+0x61c>
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800
 8000db0:	40022400 	.word	0x40022400
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	40022000 	.word	0x40022000
 8000dc0:	40022800 	.word	0x40022800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40021c00 	.word	0x40021c00
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	48a4      	ldr	r0, [pc, #656]	@ (800107c <MX_GPIO_Init+0x8c8>)
 8000dea:	f000 fd33 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	489e      	ldr	r0, [pc, #632]	@ (800107c <MX_GPIO_Init+0x8c8>)
 8000e04:	f000 fd26 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e22:	4619      	mov	r1, r3
 8000e24:	4896      	ldr	r0, [pc, #600]	@ (8001080 <MX_GPIO_Init+0x8cc>)
 8000e26:	f000 fd15 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	488e      	ldr	r0, [pc, #568]	@ (800107c <MX_GPIO_Init+0x8c8>)
 8000e42:	f000 fd07 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e46:	23c0      	movs	r3, #192	@ 0xc0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e56:	2308      	movs	r3, #8
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4888      	ldr	r0, [pc, #544]	@ (8001084 <MX_GPIO_Init+0x8d0>)
 8000e62:	f000 fcf7 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e76:	230a      	movs	r3, #10
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4881      	ldr	r0, [pc, #516]	@ (8001088 <MX_GPIO_Init+0x8d4>)
 8000e82:	f000 fce7 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e86:	2328      	movs	r3, #40	@ 0x28
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e96:	230c      	movs	r3, #12
 8000e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4879      	ldr	r0, [pc, #484]	@ (8001088 <MX_GPIO_Init+0x8d4>)
 8000ea2:	f000 fcd7 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ea6:	23c8      	movs	r3, #200	@ 0xc8
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4873      	ldr	r0, [pc, #460]	@ (800108c <MX_GPIO_Init+0x8d8>)
 8000ebe:	f000 fcc9 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ec2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	486e      	ldr	r0, [pc, #440]	@ (8001090 <MX_GPIO_Init+0x8dc>)
 8000ed8:	f000 fcbc 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000edc:	2308      	movs	r3, #8
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eec:	230c      	movs	r3, #12
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4863      	ldr	r0, [pc, #396]	@ (8001084 <MX_GPIO_Init+0x8d0>)
 8000ef8:	f000 fcac 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000efc:	2305      	movs	r3, #5
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	485b      	ldr	r0, [pc, #364]	@ (8001084 <MX_GPIO_Init+0x8d0>)
 8000f18:	f000 fc9c 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f1c:	2332      	movs	r3, #50	@ 0x32
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f2c:	230b      	movs	r3, #11
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4853      	ldr	r0, [pc, #332]	@ (8001084 <MX_GPIO_Init+0x8d0>)
 8000f38:	f000 fc8c 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	484f      	ldr	r0, [pc, #316]	@ (8001094 <MX_GPIO_Init+0x8e0>)
 8000f58:	f000 fc7c 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f5c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f6e:	2309      	movs	r3, #9
 8000f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4847      	ldr	r0, [pc, #284]	@ (8001098 <MX_GPIO_Init+0x8e4>)
 8000f7a:	f000 fc6b 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	483e      	ldr	r0, [pc, #248]	@ (800108c <MX_GPIO_Init+0x8d8>)
 8000f92:	f000 fc5f 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000f96:	2382      	movs	r3, #130	@ 0x82
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4833      	ldr	r0, [pc, #204]	@ (8001080 <MX_GPIO_Init+0x8cc>)
 8000fb2:	f000 fc4f 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482d      	ldr	r0, [pc, #180]	@ (8001080 <MX_GPIO_Init+0x8cc>)
 8000fca:	f000 fc43 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000fce:	2350      	movs	r3, #80	@ 0x50
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fde:	230d      	movs	r3, #13
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4825      	ldr	r0, [pc, #148]	@ (8001080 <MX_GPIO_Init+0x8cc>)
 8000fea:	f000 fc33 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001000:	2304      	movs	r3, #4
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	481f      	ldr	r0, [pc, #124]	@ (8001088 <MX_GPIO_Init+0x8d4>)
 800100c:	f000 fc22 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8001010:	2320      	movs	r3, #32
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001020:	230a      	movs	r3, #10
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	4815      	ldr	r0, [pc, #84]	@ (8001080 <MX_GPIO_Init+0x8cc>)
 800102c:	f000 fc12 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001030:	2340      	movs	r3, #64	@ 0x40
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001040:	2309      	movs	r3, #9
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	480f      	ldr	r0, [pc, #60]	@ (8001088 <MX_GPIO_Init+0x8d4>)
 800104c:	f000 fc02 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001050:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001062:	2305      	movs	r3, #5
 8001064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <MX_GPIO_Init+0x8e0>)
 800106e:	f000 fbf1 	bl	8001854 <HAL_GPIO_Init>

}
 8001072:	bf00      	nop
 8001074:	3740      	adds	r7, #64	@ 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000
 8001080:	40020000 	.word	0x40020000
 8001084:	40020800 	.word	0x40020800
 8001088:	40021c00 	.word	0x40021c00
 800108c:	40021800 	.word	0x40021800
 8001090:	40021400 	.word	0x40021400
 8001094:	40020400 	.word	0x40020400
 8001098:	40020c00 	.word	0x40020c00

0800109c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,
 80010a4:	1d39      	adds	r1, r7, #4
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	2201      	movs	r2, #1
 80010ac:	4803      	ldr	r0, [pc, #12]	@ (80010bc <__io_putchar+0x20>)
 80010ae:	f001 fec9 	bl	8002e44 <HAL_UART_Transmit>
	HAL_MAX_DELAY); return ch; }
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002f8 	.word	0x200002f8

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fa5f 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f80a 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f7ff fb72 	bl	80007b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010d0:	f000 f97e 	bl	80013d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010d4:	f7ff fa44 	bl	8000560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010d8:	f002 fb84 	bl	80037e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <main+0x1c>

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	@ 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	@ 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fe96 	bl	8005e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <SystemClock_Config+0xd0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <SystemClock_Config+0xd0>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <SystemClock_Config+0xd0>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a24      	ldr	r2, [pc, #144]	@ (80011b4 <SystemClock_Config+0xd4>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800114c:	23d8      	movs	r3, #216	@ 0xd8
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f000 fda9 	bl	8001cb4 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001168:	f000 f826 	bl	80011b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800116c:	f000 fd52 	bl	8001c14 <HAL_PWREx_EnableOverDrive>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 f81f 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001186:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2107      	movs	r1, #7
 8001198:	4618      	mov	r0, r3
 800119a:	f001 f82f 	bl	80021fc <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011a4:	f000 f808 	bl	80011b8 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	@ 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	210f      	movs	r1, #15
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	f000 fafe 	bl	8001802 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <NMI_Handler+0x4>

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <MemManage_Handler+0x4>

0800122c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <UsageFault_Handler+0x4>

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f9d7 	bl	8001600 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001252:	f003 fdcb 	bl	8004dec <xTaskGetSchedulerState>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d001      	beq.n	8001260 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800125c:	f004 f9ac 	bl	80055b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
  }

  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e009      	b.n	80012c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff feef 	bl	800109c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf1      	blt.n	80012b0 <_write+0x12>
  }
  return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	@ (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f004 fda4 	bl	8005ebc <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20050000 	.word	0x20050000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	200002f4 	.word	0x200002f4
 80013a8:	20004220 	.word	0x20004220

080013ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013d6:	4a15      	ldr	r2, [pc, #84]	@ (800142c <MX_USART1_UART_Init+0x5c>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013da:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_USART1_UART_Init+0x58>)
 8001414:	f001 fcc8 	bl	8002da8 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800141e:	f7ff fecb 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002f8 	.word	0x200002f8
 800142c:	40011000 	.word	0x40011000

08001430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0ac      	sub	sp, #176	@ 0xb0
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	2284      	movs	r2, #132	@ 0x84
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fce5 	bl	8005e20 <memset>
  if(uartHandle->Instance==USART1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a32      	ldr	r2, [pc, #200]	@ (8001524 <HAL_UART_MspInit+0xf4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d15c      	bne.n	800151a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001464:	2300      	movs	r3, #0
 8001466:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4618      	mov	r0, r3
 800146e:	f001 f8ab 	bl	80025c8 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001478:	f7ff fe9e 	bl	80011b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001480:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6453      	str	r3, [r2, #68]	@ 0x44
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 800149a:	f043 0302 	orr.w	r3, r3, #2
 800149e:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a0:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_UART_MspInit+0xf8>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014dc:	2307      	movs	r3, #7
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4810      	ldr	r0, [pc, #64]	@ (800152c <HAL_UART_MspInit+0xfc>)
 80014ea:	f000 f9b3 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001508:	2307      	movs	r3, #7
 800150a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	@ (8001530 <HAL_UART_MspInit+0x100>)
 8001516:	f000 f99d 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800151a:	bf00      	nop
 800151c:	37b0      	adds	r7, #176	@ 0xb0
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40011000 	.word	0x40011000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40020000 	.word	0x40020000

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001538:	f7ff ff38 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001562:	f004 fcb1 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fdab 	bl	80010c0 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001578:	08006600 	.word	0x08006600
  ldr r2, =_sbss
 800157c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001580:	2000421c 	.word	0x2000421c

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>

08001586 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f92e 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001590:	200f      	movs	r0, #15
 8001592:	f000 f805 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fe15 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f93b 	bl	800183a <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f911 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	@ (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	20000380 	.word	0x20000380

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000380 	.word	0x20000380

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008

08001688 <__NVIC_SetPriorityGrouping>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x40>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x40>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	05fa0000 	.word	0x05fa0000

080016d0 <__NVIC_GetPriorityGrouping>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_SetPriority>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db0a      	blt.n	8001716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	490c      	ldr	r1, [pc, #48]	@ (8001738 <__NVIC_SetPriority+0x4c>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	0112      	lsls	r2, r2, #4
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	440b      	add	r3, r1
 8001710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001714:	e00a      	b.n	800172c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4908      	ldr	r1, [pc, #32]	@ (800173c <__NVIC_SetPriority+0x50>)
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	3b04      	subs	r3, #4
 8001724:	0112      	lsls	r2, r2, #4
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	440b      	add	r3, r1
 800172a:	761a      	strb	r2, [r3, #24]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000e100 	.word	0xe000e100
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <NVIC_EncodePriority>:
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	@ 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f1c3 0307 	rsb	r3, r3, #7
 800175a:	2b04      	cmp	r3, #4
 800175c:	bf28      	it	cs
 800175e:	2304      	movcs	r3, #4
 8001760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3304      	adds	r3, #4
 8001766:	2b06      	cmp	r3, #6
 8001768:	d902      	bls.n	8001770 <NVIC_EncodePriority+0x30>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3b03      	subs	r3, #3
 800176e:	e000      	b.n	8001772 <NVIC_EncodePriority+0x32>
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	f04f 32ff 	mov.w	r2, #4294967295
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	401a      	ands	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001788:	f04f 31ff 	mov.w	r1, #4294967295
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43d9      	mvns	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	4313      	orrs	r3, r2
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	@ 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff8e 	bl	80016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff47 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff5c 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff8e 	bl	8001740 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5d 	bl	80016ec <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffb0 	bl	80017a8 <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e175      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8164 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x56>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80be 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019f6:	4a61      	ldr	r2, [pc, #388]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	@ (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	@ (8001b88 <HAL_GPIO_Init+0x334>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_GPIO_Init+0x338>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_GPIO_Init+0x340>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_Init+0x344>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <HAL_GPIO_Init+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x350>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a34      	ldr	r2, [pc, #208]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae86 	bls.w	8001874 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022400 	.word	0x40022400
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <HAL_PWREx_EnableOverDrive+0x98>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a22      	ldr	r2, [pc, #136]	@ (8001cac <HAL_PWREx_EnableOverDrive+0x98>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_PWREx_EnableOverDrive+0x98>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c42:	f7ff fcf1 	bl	8001628 <HAL_GetTick>
 8001c46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c48:	e009      	b.n	8001c5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c4a:	f7ff fced 	bl	8001628 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c58:	d901      	bls.n	8001c5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e022      	b.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c78:	f7ff fcd6 	bl	8001628 <HAL_GetTick>
 8001c7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c7e:	e009      	b.n	8001c94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c80:	f7ff fcd2 	bl	8001628 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c8e:	d901      	bls.n	8001c94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e007      	b.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ca0:	d1ee      	bne.n	8001c80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e291      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8087 	beq.w	8001de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd8:	4b96      	ldr	r3, [pc, #600]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d00c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce4:	4b93      	ldr	r3, [pc, #588]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d112      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
 8001cf0:	4b90      	ldr	r3, [pc, #576]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d06c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x130>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d168      	bne.n	8001de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e26b      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x7a>
 8001d20:	4b84      	ldr	r3, [pc, #528]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a83      	ldr	r2, [pc, #524]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x9c>
 8001d36:	4b7f      	ldr	r3, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b7c      	ldr	r3, [pc, #496]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7b      	ldr	r2, [pc, #492]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b73      	ldr	r3, [pc, #460]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a72      	ldr	r2, [pc, #456]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d74:	4b6f      	ldr	r3, [pc, #444]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6e      	ldr	r2, [pc, #440]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b6c      	ldr	r3, [pc, #432]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6b      	ldr	r2, [pc, #428]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc48 	bl	8001628 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fc44 	bl	8001628 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e21f      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b61      	ldr	r3, [pc, #388]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc34 	bl	8001628 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fc30 	bl	8001628 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e20b      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b57      	ldr	r3, [pc, #348]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x110>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d069      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df2:	4b50      	ldr	r3, [pc, #320]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x190>
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b47      	ldr	r3, [pc, #284]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x17a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1df      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b41      	ldr	r3, [pc, #260]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	493d      	ldr	r1, [pc, #244]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e040      	b.n	8001ec6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a38      	ldr	r2, [pc, #224]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fbe6 	bl	8001628 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff fbe2 	bl	8001628 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1bd      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4929      	ldr	r1, [pc, #164]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
 8001e92:	e018      	b.n	8001ec6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e94:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a26      	ldr	r2, [pc, #152]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fbc2 	bl	8001628 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fbbe 	bl	8001628 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e199      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d038      	beq.n	8001f44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d019      	beq.n	8001f0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eda:	4b16      	ldr	r3, [pc, #88]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ede:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fb9f 	bl	8001628 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eee:	f7ff fb9b 	bl	8001628 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e176      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x23a>
 8001f0c:	e01a      	b.n	8001f44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_RCC_OscConfig+0x280>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fb85 	bl	8001628 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7ff fb81 	bl	8001628 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d903      	bls.n	8001f38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e15c      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
 8001f34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b91      	ldr	r3, [pc, #580]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ee      	bne.n	8001f22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a4 	beq.w	800209a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b8b      	ldr	r3, [pc, #556]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b88      	ldr	r3, [pc, #544]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a87      	ldr	r2, [pc, #540]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b85      	ldr	r3, [pc, #532]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7a:	4b82      	ldr	r3, [pc, #520]	@ (8002184 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f86:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x4d0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002184 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fb49 	bl	8001628 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff fb45 	bl	8001628 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	@ 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e120      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	4b75      	ldr	r3, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x4d0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x31a>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_OscConfig+0x376>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x33c>
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a69      	ldr	r2, [pc, #420]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	4b67      	ldr	r3, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	4a66      	ldr	r2, [pc, #408]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x376>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x35e>
 8001ff8:	4b61      	ldr	r3, [pc, #388]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4a60      	ldr	r2, [pc, #384]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6713      	str	r3, [r2, #112]	@ 0x70
 8002004:	4b5e      	ldr	r3, [pc, #376]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002008:	4a5d      	ldr	r2, [pc, #372]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x376>
 8002012:	4b5b      	ldr	r3, [pc, #364]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	4b58      	ldr	r3, [pc, #352]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	4a57      	ldr	r2, [pc, #348]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff faf9 	bl	8001628 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff faf5 	bl	8001628 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0ce      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCC_OscConfig+0x386>
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff fae3 	bl	8001628 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fadf 	bl	8001628 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0b8      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b3c      	ldr	r3, [pc, #240]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	4a3b      	ldr	r2, [pc, #236]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80a4 	beq.w	80021ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a4:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d06b      	beq.n	8002188 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d149      	bne.n	800214c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 80020be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff fab0 	bl	8001628 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff faac 	bl	8001628 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e087      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	3b01      	subs	r3, #1
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	4313      	orrs	r3, r2
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002116:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff fa80 	bl	8001628 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fa7c 	bl	8001628 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e057      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x478>
 800214a:	e04f      	b.n	80021ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fa66 	bl	8001628 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fa62 	bl	8001628 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e03d      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_RCC_OscConfig+0x4cc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x4ac>
 800217e:	e035      	b.n	80021ec <HAL_RCC_OscConfig+0x538>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <HAL_RCC_OscConfig+0x544>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d028      	beq.n	80021e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d121      	bne.n	80021e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d11a      	bne.n	80021e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d111      	bne.n	80021e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	3b01      	subs	r3, #1
 80021d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800

080021fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0d0      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b6a      	ldr	r3, [pc, #424]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4965      	ldr	r1, [pc, #404]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b63      	ldr	r3, [pc, #396]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b8      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b59      	ldr	r3, [pc, #356]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800227a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800227e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b50      	ldr	r3, [pc, #320]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	494d      	ldr	r1, [pc, #308]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d040      	beq.n	8002320 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e073      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06b      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4936      	ldr	r1, [pc, #216]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7ff f99a 	bl	8001628 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7ff f996 	bl	8001628 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e053      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d210      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 020f 	bic.w	r2, r3, #15
 8002336:	4922      	ldr	r1, [pc, #136]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e032      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4916      	ldr	r1, [pc, #88]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490e      	ldr	r1, [pc, #56]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238e:	f000 f821 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490a      	ldr	r1, [pc, #40]	@ (80023c8 <HAL_RCC_ClockConfig+0x1cc>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_RCC_ClockConfig+0x1d0>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_ClockConfig+0x1d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f8f6 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00
 80023c4:	40023800 	.word	0x40023800
 80023c8:	080065d8 	.word	0x080065d8
 80023cc:	20000000 	.word	0x20000000
 80023d0:	20000004 	.word	0x20000004

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b090      	sub	sp, #64	@ 0x40
 80023da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e0:	2300      	movs	r3, #0
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e4:	2300      	movs	r3, #0
 80023e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ec:	4b59      	ldr	r3, [pc, #356]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d00d      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x40>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	f200 80a1 	bhi.w	8002540 <HAL_RCC_GetSysClockFreq+0x16c>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x34>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x3a>
 8002406:	e09b      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b53      	ldr	r3, [pc, #332]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x184>)
 800240a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800240c:	e09b      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4b53      	ldr	r3, [pc, #332]	@ (800255c <HAL_RCC_GetSysClockFreq+0x188>)
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002412:	e098      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002414:	4b4f      	ldr	r3, [pc, #316]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800241e:	4b4d      	ldr	r3, [pc, #308]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d028      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b4a      	ldr	r3, [pc, #296]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	2200      	movs	r2, #0
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	627a      	str	r2, [r7, #36]	@ 0x24
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800243c:	2100      	movs	r1, #0
 800243e:	4b47      	ldr	r3, [pc, #284]	@ (800255c <HAL_RCC_GetSysClockFreq+0x188>)
 8002440:	fb03 f201 	mul.w	r2, r3, r1
 8002444:	2300      	movs	r3, #0
 8002446:	fb00 f303 	mul.w	r3, r0, r3
 800244a:	4413      	add	r3, r2
 800244c:	4a43      	ldr	r2, [pc, #268]	@ (800255c <HAL_RCC_GetSysClockFreq+0x188>)
 800244e:	fba0 1202 	umull	r1, r2, r0, r2
 8002452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002454:	460a      	mov	r2, r1
 8002456:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800245a:	4413      	add	r3, r2
 800245c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	2200      	movs	r2, #0
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	61fa      	str	r2, [r7, #28]
 8002466:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800246a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800246e:	f7fd fecf 	bl	8000210 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4613      	mov	r3, r2
 8002478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800247a:	e053      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b35      	ldr	r3, [pc, #212]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	617a      	str	r2, [r7, #20]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800248e:	f04f 0b00 	mov.w	fp, #0
 8002492:	4652      	mov	r2, sl
 8002494:	465b      	mov	r3, fp
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	0159      	lsls	r1, r3, #5
 80024a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a4:	0150      	lsls	r0, r2, #5
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	ebb2 080a 	subs.w	r8, r2, sl
 80024ae:	eb63 090b 	sbc.w	r9, r3, fp
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024c6:	ebb2 0408 	subs.w	r4, r2, r8
 80024ca:	eb63 0509 	sbc.w	r5, r3, r9
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	00eb      	lsls	r3, r5, #3
 80024d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024dc:	00e2      	lsls	r2, r4, #3
 80024de:	4614      	mov	r4, r2
 80024e0:	461d      	mov	r5, r3
 80024e2:	eb14 030a 	adds.w	r3, r4, sl
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	eb45 030b 	adc.w	r3, r5, fp
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024fa:	4629      	mov	r1, r5
 80024fc:	028b      	lsls	r3, r1, #10
 80024fe:	4621      	mov	r1, r4
 8002500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002504:	4621      	mov	r1, r4
 8002506:	028a      	lsls	r2, r1, #10
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250e:	2200      	movs	r2, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002518:	f7fd fe7a 	bl	8000210 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002534:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x184>)
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002548:	4618      	mov	r0, r3
 800254a:	3740      	adds	r7, #64	@ 0x40
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	00f42400 	.word	0x00f42400
 800255c:	017d7840 	.word	0x017d7840

08002560 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a9b      	lsrs	r3, r3, #10
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	@ (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	080065e8 	.word	0x080065e8

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a4:	f7ff ffdc 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0b5b      	lsrs	r3, r3, #13
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	080065e8 	.word	0x080065e8

080025c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025f0:	4b69      	ldr	r3, [pc, #420]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a68      	ldr	r2, [pc, #416]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	4b66      	ldr	r3, [pc, #408]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	4964      	ldr	r1, [pc, #400]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d017      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002622:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002628:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	4959      	ldr	r1, [pc, #356]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002640:	d101      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800265e:	4b4e      	ldr	r3, [pc, #312]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002664:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	494a      	ldr	r1, [pc, #296]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800267c:	d101      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800267e:	2301      	movs	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 808b 	beq.w	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	4a39      	ldr	r2, [pc, #228]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b8:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026c4:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a34      	ldr	r2, [pc, #208]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe ffaa 	bl	8001628 <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe ffa6 	bl	8001628 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e357      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ea:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f6:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d035      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d02e      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002714:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271e:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800272a:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272e:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002734:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002736:	4a18      	ldr	r2, [pc, #96]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800273c:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d114      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe ff6e 	bl	8001628 <HAL_GetTick>
 800274c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe ff6a 	bl	8001628 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e319      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800277e:	d111      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800278e:	400b      	ands	r3, r1
 8002790:	4901      	ldr	r1, [pc, #4]	@ (8002798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
 8002796:	e00b      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002798:	40023800 	.word	0x40023800
 800279c:	40007000 	.word	0x40007000
 80027a0:	0ffffcff 	.word	0x0ffffcff
 80027a4:	4baa      	ldr	r3, [pc, #680]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	4ba7      	ldr	r3, [pc, #668]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	49a4      	ldr	r1, [pc, #656]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d4:	4a9e      	ldr	r2, [pc, #632]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027de:	4b9c      	ldr	r3, [pc, #624]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	4999      	ldr	r1, [pc, #612]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fc:	4b94      	ldr	r3, [pc, #592]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800280a:	4991      	ldr	r1, [pc, #580]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800281e:	4b8c      	ldr	r3, [pc, #560]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800282c:	4988      	ldr	r1, [pc, #544]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002840:	4b83      	ldr	r3, [pc, #524]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800284e:	4980      	ldr	r1, [pc, #512]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002862:	4b7b      	ldr	r3, [pc, #492]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4977      	ldr	r1, [pc, #476]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002884:	4b72      	ldr	r3, [pc, #456]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	496f      	ldr	r1, [pc, #444]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ac:	f023 020c 	bic.w	r2, r3, #12
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b4:	4966      	ldr	r1, [pc, #408]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028c8:	4b61      	ldr	r3, [pc, #388]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	495e      	ldr	r1, [pc, #376]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028ea:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f8:	4955      	ldr	r1, [pc, #340]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800290c:	4b50      	ldr	r3, [pc, #320]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002912:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	494d      	ldr	r1, [pc, #308]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800292e:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002934:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	4944      	ldr	r1, [pc, #272]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002950:	4b3f      	ldr	r3, [pc, #252]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	493c      	ldr	r1, [pc, #240]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002972:	4b37      	ldr	r3, [pc, #220]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002980:	4933      	ldr	r1, [pc, #204]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a2:	492b      	ldr	r1, [pc, #172]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d011      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029b6:	4b26      	ldr	r3, [pc, #152]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029bc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c4:	4922      	ldr	r1, [pc, #136]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d4:	d101      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b16      	ldr	r3, [pc, #88]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a04:	4912      	ldr	r1, [pc, #72]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a28:	4909      	ldr	r1, [pc, #36]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d006      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80d9 	beq.w	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a44:	4b02      	ldr	r3, [pc, #8]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a01      	ldr	r2, [pc, #4]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a56:	f7fe fde7 	bl	8001628 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a5e:	f7fe fde3 	bl	8001628 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	@ 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e194      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a70:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11d      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a90:	4b64      	ldr	r3, [pc, #400]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a9e:	4b61      	ldr	r3, [pc, #388]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	019a      	lsls	r2, r3, #6
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	071b      	lsls	r3, r3, #28
 8002ac4:	4957      	ldr	r1, [pc, #348]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d02e      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af6:	d129      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002af8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0c:	0f1b      	lsrs	r3, r3, #28
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	019a      	lsls	r2, r3, #6
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	061b      	lsls	r3, r3, #24
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	071b      	lsls	r3, r3, #28
 8002b2c:	493d      	ldr	r1, [pc, #244]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b34:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b3a:	f023 021f 	bic.w	r2, r3, #31
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	3b01      	subs	r3, #1
 8002b44:	4937      	ldr	r1, [pc, #220]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01d      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b58:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	0e1b      	lsrs	r3, r3, #24
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b6c:	0f1b      	lsrs	r3, r3, #28
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	019a      	lsls	r2, r3, #6
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	071b      	lsls	r3, r3, #28
 8002b8c:	4925      	ldr	r1, [pc, #148]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	019a      	lsls	r2, r3, #6
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	071b      	lsls	r3, r3, #28
 8002bbc:	4919      	ldr	r1, [pc, #100]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fd2a 	bl	8001628 <HAL_GetTick>
 8002bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bd8:	f7fe fd26 	bl	8001628 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0d7      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bea:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 80cd 	bne.w	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fd0d 	bl	8001628 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c12:	f7fe fd09 	bl	8001628 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d903      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0ba      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c28:	4b5e      	ldr	r3, [pc, #376]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c34:	d0ed      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d12a      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	0c1b      	lsrs	r3, r3, #16
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4944      	ldr	r1, [pc, #272]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c9a:	4b42      	ldr	r3, [pc, #264]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	493d      	ldr	r1, [pc, #244]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cc8:	d11d      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	0e1b      	lsrs	r3, r3, #24
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	0f1b      	lsrs	r3, r3, #28
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	019a      	lsls	r2, r3, #6
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	061b      	lsls	r3, r3, #24
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	071b      	lsls	r3, r3, #28
 8002cfe:	4929      	ldr	r1, [pc, #164]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d028      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	0e1b      	lsrs	r3, r3, #24
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d20:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	019a      	lsls	r2, r3, #6
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	4917      	ldr	r1, [pc, #92]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	4911      	ldr	r1, [pc, #68]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d64:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe fc5a 	bl	8001628 <HAL_GetTick>
 8002d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d78:	f7fe fc56 	bl	8001628 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	@ 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e007      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d96:	d1ef      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800

08002da8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e040      	b.n	8002e3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fb30 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	@ 0x24
 8002dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fb16 	bl	8003420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8af 	bl	8002f58 <UART_SetConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e01b      	b.n	8002e3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fb95 	bl	8003564 <UART_CheckIdleState>
 8002e3a:	4603      	mov	r3, r0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d177      	bne.n	8002f4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_UART_Transmit+0x24>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e070      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	@ 0x21
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe fbd5 	bl	8001628 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e98:	d108      	bne.n	8002eac <HAL_UART_Transmit+0x68>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e003      	b.n	8002eb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb4:	e02f      	b.n	8002f16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fba6 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e03b      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3302      	adds	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e007      	b.n	8002f04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3301      	adds	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1c9      	bne.n	8002eb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2140      	movs	r1, #64	@ 0x40
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fb70 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e005      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4ba6      	ldr	r3, [pc, #664]	@ (800321c <UART_SetConfig+0x2c4>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a94      	ldr	r2, [pc, #592]	@ (8003220 <UART_SetConfig+0x2c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d120      	bne.n	8003016 <UART_SetConfig+0xbe>
 8002fd4:	4b93      	ldr	r3, [pc, #588]	@ (8003224 <UART_SetConfig+0x2cc>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d816      	bhi.n	8003010 <UART_SetConfig+0xb8>
 8002fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <UART_SetConfig+0x90>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003005 	.word	0x08003005
 8002ff0:	08002fff 	.word	0x08002fff
 8002ff4:	0800300b 	.word	0x0800300b
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e150      	b.n	80032a0 <UART_SetConfig+0x348>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e14d      	b.n	80032a0 <UART_SetConfig+0x348>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e14a      	b.n	80032a0 <UART_SetConfig+0x348>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e147      	b.n	80032a0 <UART_SetConfig+0x348>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e144      	b.n	80032a0 <UART_SetConfig+0x348>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a83      	ldr	r2, [pc, #524]	@ (8003228 <UART_SetConfig+0x2d0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d132      	bne.n	8003086 <UART_SetConfig+0x12e>
 8003020:	4b80      	ldr	r3, [pc, #512]	@ (8003224 <UART_SetConfig+0x2cc>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d828      	bhi.n	8003080 <UART_SetConfig+0x128>
 800302e:	a201      	add	r2, pc, #4	@ (adr r2, 8003034 <UART_SetConfig+0xdc>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003069 	.word	0x08003069
 8003038:	08003081 	.word	0x08003081
 800303c:	08003081 	.word	0x08003081
 8003040:	08003081 	.word	0x08003081
 8003044:	08003075 	.word	0x08003075
 8003048:	08003081 	.word	0x08003081
 800304c:	08003081 	.word	0x08003081
 8003050:	08003081 	.word	0x08003081
 8003054:	0800306f 	.word	0x0800306f
 8003058:	08003081 	.word	0x08003081
 800305c:	08003081 	.word	0x08003081
 8003060:	08003081 	.word	0x08003081
 8003064:	0800307b 	.word	0x0800307b
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e118      	b.n	80032a0 <UART_SetConfig+0x348>
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e115      	b.n	80032a0 <UART_SetConfig+0x348>
 8003074:	2304      	movs	r3, #4
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e112      	b.n	80032a0 <UART_SetConfig+0x348>
 800307a:	2308      	movs	r3, #8
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e10f      	b.n	80032a0 <UART_SetConfig+0x348>
 8003080:	2310      	movs	r3, #16
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e10c      	b.n	80032a0 <UART_SetConfig+0x348>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a68      	ldr	r2, [pc, #416]	@ (800322c <UART_SetConfig+0x2d4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d120      	bne.n	80030d2 <UART_SetConfig+0x17a>
 8003090:	4b64      	ldr	r3, [pc, #400]	@ (8003224 <UART_SetConfig+0x2cc>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003096:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800309a:	2b30      	cmp	r3, #48	@ 0x30
 800309c:	d013      	beq.n	80030c6 <UART_SetConfig+0x16e>
 800309e:	2b30      	cmp	r3, #48	@ 0x30
 80030a0:	d814      	bhi.n	80030cc <UART_SetConfig+0x174>
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x162>
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d810      	bhi.n	80030cc <UART_SetConfig+0x174>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <UART_SetConfig+0x15c>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d006      	beq.n	80030c0 <UART_SetConfig+0x168>
 80030b2:	e00b      	b.n	80030cc <UART_SetConfig+0x174>
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e0f2      	b.n	80032a0 <UART_SetConfig+0x348>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e0ef      	b.n	80032a0 <UART_SetConfig+0x348>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e0ec      	b.n	80032a0 <UART_SetConfig+0x348>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e0e9      	b.n	80032a0 <UART_SetConfig+0x348>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e0e6      	b.n	80032a0 <UART_SetConfig+0x348>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <UART_SetConfig+0x2d8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <UART_SetConfig+0x1c6>
 80030dc:	4b51      	ldr	r3, [pc, #324]	@ (8003224 <UART_SetConfig+0x2cc>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030e8:	d013      	beq.n	8003112 <UART_SetConfig+0x1ba>
 80030ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x1c0>
 80030ee:	2b80      	cmp	r3, #128	@ 0x80
 80030f0:	d009      	beq.n	8003106 <UART_SetConfig+0x1ae>
 80030f2:	2b80      	cmp	r3, #128	@ 0x80
 80030f4:	d810      	bhi.n	8003118 <UART_SetConfig+0x1c0>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <UART_SetConfig+0x1a8>
 80030fa:	2b40      	cmp	r3, #64	@ 0x40
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x1b4>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x1c0>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0cc      	b.n	80032a0 <UART_SetConfig+0x348>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0c9      	b.n	80032a0 <UART_SetConfig+0x348>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0c6      	b.n	80032a0 <UART_SetConfig+0x348>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0c3      	b.n	80032a0 <UART_SetConfig+0x348>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e0c0      	b.n	80032a0 <UART_SetConfig+0x348>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a44      	ldr	r2, [pc, #272]	@ (8003234 <UART_SetConfig+0x2dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d125      	bne.n	8003174 <UART_SetConfig+0x21c>
 8003128:	4b3e      	ldr	r3, [pc, #248]	@ (8003224 <UART_SetConfig+0x2cc>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003136:	d017      	beq.n	8003168 <UART_SetConfig+0x210>
 8003138:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800313c:	d817      	bhi.n	800316e <UART_SetConfig+0x216>
 800313e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003142:	d00b      	beq.n	800315c <UART_SetConfig+0x204>
 8003144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003148:	d811      	bhi.n	800316e <UART_SetConfig+0x216>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <UART_SetConfig+0x1fe>
 800314e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003152:	d006      	beq.n	8003162 <UART_SetConfig+0x20a>
 8003154:	e00b      	b.n	800316e <UART_SetConfig+0x216>
 8003156:	2300      	movs	r3, #0
 8003158:	77fb      	strb	r3, [r7, #31]
 800315a:	e0a1      	b.n	80032a0 <UART_SetConfig+0x348>
 800315c:	2302      	movs	r3, #2
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e09e      	b.n	80032a0 <UART_SetConfig+0x348>
 8003162:	2304      	movs	r3, #4
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e09b      	b.n	80032a0 <UART_SetConfig+0x348>
 8003168:	2308      	movs	r3, #8
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e098      	b.n	80032a0 <UART_SetConfig+0x348>
 800316e:	2310      	movs	r3, #16
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e095      	b.n	80032a0 <UART_SetConfig+0x348>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2f      	ldr	r2, [pc, #188]	@ (8003238 <UART_SetConfig+0x2e0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d125      	bne.n	80031ca <UART_SetConfig+0x272>
 800317e:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <UART_SetConfig+0x2cc>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800318c:	d017      	beq.n	80031be <UART_SetConfig+0x266>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003192:	d817      	bhi.n	80031c4 <UART_SetConfig+0x26c>
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003198:	d00b      	beq.n	80031b2 <UART_SetConfig+0x25a>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319e:	d811      	bhi.n	80031c4 <UART_SetConfig+0x26c>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x254>
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d006      	beq.n	80031b8 <UART_SetConfig+0x260>
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x26c>
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e076      	b.n	80032a0 <UART_SetConfig+0x348>
 80031b2:	2302      	movs	r3, #2
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e073      	b.n	80032a0 <UART_SetConfig+0x348>
 80031b8:	2304      	movs	r3, #4
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e070      	b.n	80032a0 <UART_SetConfig+0x348>
 80031be:	2308      	movs	r3, #8
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e06d      	b.n	80032a0 <UART_SetConfig+0x348>
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e06a      	b.n	80032a0 <UART_SetConfig+0x348>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	@ (800323c <UART_SetConfig+0x2e4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d138      	bne.n	8003246 <UART_SetConfig+0x2ee>
 80031d4:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <UART_SetConfig+0x2cc>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031e2:	d017      	beq.n	8003214 <UART_SetConfig+0x2bc>
 80031e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031e8:	d82a      	bhi.n	8003240 <UART_SetConfig+0x2e8>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ee:	d00b      	beq.n	8003208 <UART_SetConfig+0x2b0>
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f4:	d824      	bhi.n	8003240 <UART_SetConfig+0x2e8>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <UART_SetConfig+0x2aa>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fe:	d006      	beq.n	800320e <UART_SetConfig+0x2b6>
 8003200:	e01e      	b.n	8003240 <UART_SetConfig+0x2e8>
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e04b      	b.n	80032a0 <UART_SetConfig+0x348>
 8003208:	2302      	movs	r3, #2
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e048      	b.n	80032a0 <UART_SetConfig+0x348>
 800320e:	2304      	movs	r3, #4
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e045      	b.n	80032a0 <UART_SetConfig+0x348>
 8003214:	2308      	movs	r3, #8
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e042      	b.n	80032a0 <UART_SetConfig+0x348>
 800321a:	bf00      	nop
 800321c:	efff69f3 	.word	0xefff69f3
 8003220:	40011000 	.word	0x40011000
 8003224:	40023800 	.word	0x40023800
 8003228:	40004400 	.word	0x40004400
 800322c:	40004800 	.word	0x40004800
 8003230:	40004c00 	.word	0x40004c00
 8003234:	40005000 	.word	0x40005000
 8003238:	40011400 	.word	0x40011400
 800323c:	40007800 	.word	0x40007800
 8003240:	2310      	movs	r3, #16
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e02c      	b.n	80032a0 <UART_SetConfig+0x348>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a72      	ldr	r2, [pc, #456]	@ (8003414 <UART_SetConfig+0x4bc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d125      	bne.n	800329c <UART_SetConfig+0x344>
 8003250:	4b71      	ldr	r3, [pc, #452]	@ (8003418 <UART_SetConfig+0x4c0>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800325a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800325e:	d017      	beq.n	8003290 <UART_SetConfig+0x338>
 8003260:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003264:	d817      	bhi.n	8003296 <UART_SetConfig+0x33e>
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d00b      	beq.n	8003284 <UART_SetConfig+0x32c>
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	d811      	bhi.n	8003296 <UART_SetConfig+0x33e>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <UART_SetConfig+0x326>
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800327a:	d006      	beq.n	800328a <UART_SetConfig+0x332>
 800327c:	e00b      	b.n	8003296 <UART_SetConfig+0x33e>
 800327e:	2300      	movs	r3, #0
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e00d      	b.n	80032a0 <UART_SetConfig+0x348>
 8003284:	2302      	movs	r3, #2
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e00a      	b.n	80032a0 <UART_SetConfig+0x348>
 800328a:	2304      	movs	r3, #4
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e007      	b.n	80032a0 <UART_SetConfig+0x348>
 8003290:	2308      	movs	r3, #8
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e004      	b.n	80032a0 <UART_SetConfig+0x348>
 8003296:	2310      	movs	r3, #16
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e001      	b.n	80032a0 <UART_SetConfig+0x348>
 800329c:	2310      	movs	r3, #16
 800329e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a8:	d15b      	bne.n	8003362 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d828      	bhi.n	8003302 <UART_SetConfig+0x3aa>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <UART_SetConfig+0x360>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	08003303 	.word	0x08003303
 80032c8:	080032f3 	.word	0x080032f3
 80032cc:	08003303 	.word	0x08003303
 80032d0:	08003303 	.word	0x08003303
 80032d4:	08003303 	.word	0x08003303
 80032d8:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7ff f94c 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e013      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7ff f95c 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80032e8:	61b8      	str	r0, [r7, #24]
        break;
 80032ea:	e00f      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <UART_SetConfig+0x4c4>)
 80032ee:	61bb      	str	r3, [r7, #24]
        break;
 80032f0:	e00c      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7ff f86f 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 80032f6:	61b8      	str	r0, [r7, #24]
        break;
 80032f8:	e008      	b.n	800330c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fe:	61bb      	str	r3, [r7, #24]
        break;
 8003300:	e004      	b.n	800330c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	77bb      	strb	r3, [r7, #30]
        break;
 800330a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d074      	beq.n	80033fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	005a      	lsls	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d916      	bls.n	800335c <UART_SetConfig+0x404>
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003334:	d212      	bcs.n	800335c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	b29b      	uxth	r3, r3
 800333a:	f023 030f 	bic.w	r3, r3, #15
 800333e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	b29b      	uxth	r3, r3
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	b29a      	uxth	r2, r3
 800334c:	89fb      	ldrh	r3, [r7, #14]
 800334e:	4313      	orrs	r3, r2
 8003350:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	89fa      	ldrh	r2, [r7, #14]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e04f      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
 8003360:	e04c      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x462>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x418>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff f8f0 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e013      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff f900 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80033a0:	61b8      	str	r0, [r7, #24]
        break;
 80033a2:	e00f      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	@ (800341c <UART_SetConfig+0x4c4>)
 80033a6:	61bb      	str	r3, [r7, #24]
        break;
 80033a8:	e00c      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7ff f813 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 80033ae:	61b8      	str	r0, [r7, #24]
        break;
 80033b0:	e008      	b.n	80033c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e004      	b.n	80033c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77bb      	strb	r3, [r7, #30]
        break;
 80033c2:	bf00      	nop
    }

    if (pclk != 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085a      	lsrs	r2, r3, #1
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b0f      	cmp	r3, #15
 80033e2:	d909      	bls.n	80033f8 <UART_SetConfig+0x4a0>
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ea:	d205      	bcs.n	80033f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	e001      	b.n	80033fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003408:	7fbb      	ldrb	r3, [r7, #30]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40007c00 	.word	0x40007c00
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400

08003420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01a      	beq.n	8003536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800351e:	d10a      	bne.n	8003536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08c      	sub	sp, #48	@ 0x30
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003574:	f7fe f858 	bl	8001628 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d12e      	bne.n	80035e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f83b 	bl	8003612 <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d021      	beq.n	80035e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69b9      	ldr	r1, [r7, #24]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	617b      	str	r3, [r7, #20]
   return(result);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e6      	bne.n	80035a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e011      	b.n	800360a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	@ 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003622:	e04f      	b.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362a:	d04b      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fd fffc 	bl	8001628 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <UART_WaitOnFlagUntilTimeout+0x30>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04e      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d037      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d034      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d031      	beq.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d110      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2208      	movs	r2, #8
 8003674:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f838 	bl	80036ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2208      	movs	r2, #8
 8003680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e029      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800369a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800369e:	d111      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f81e 	bl	80036ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e00f      	b.n	80036e4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d0a0      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b095      	sub	sp, #84	@ 0x54
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003712:	643b      	str	r3, [r7, #64]	@ 0x40
 8003714:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e6      	bne.n	80036f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	61fb      	str	r3, [r7, #28]
   return(result);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	2b01      	cmp	r3, #1
 8003760:	d118      	bne.n	8003794 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	647b      	str	r3, [r7, #68]	@ 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	613b      	str	r3, [r7, #16]
   return(result);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037a8:	bf00      	nop
 80037aa:	3754      	adds	r7, #84	@ 0x54
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c6:	2b84      	cmp	r3, #132	@ 0x84
 80037c8:	d005      	beq.n	80037d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	3303      	adds	r3, #3
 80037d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037e8:	f000 fee2 	bl	80045b0 <vTaskStartScheduler>
  
  return osOK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f4:	b089      	sub	sp, #36	@ 0x24
 80037f6:	af04      	add	r7, sp, #16
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <osThreadCreate+0x54>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01c      	beq.n	8003846 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685c      	ldr	r4, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691e      	ldr	r6, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff ffc8 	bl	80037b4 <makeFreeRtosPriority>
 8003824:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382e:	9202      	str	r2, [sp, #8]
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	9100      	str	r1, [sp, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4632      	mov	r2, r6
 8003838:	4629      	mov	r1, r5
 800383a:	4620      	mov	r0, r4
 800383c:	f000 fce0 	bl	8004200 <xTaskCreateStatic>
 8003840:	4603      	mov	r3, r0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e01c      	b.n	8003880 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685c      	ldr	r4, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003852:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ffaa 	bl	80037b4 <makeFreeRtosPriority>
 8003860:	4602      	mov	r2, r0
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	9200      	str	r2, [sp, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4632      	mov	r2, r6
 800386e:	4629      	mov	r1, r5
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fd2b 	bl	80042cc <xTaskCreate>
 8003876:	4603      	mov	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003880:	68fb      	ldr	r3, [r7, #12]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800388a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <osDelay+0x16>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	e000      	b.n	80038a2 <osDelay+0x18>
 80038a0:	2301      	movs	r3, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fe4c 	bl	8004540 <vTaskDelay>
  
  return osOK;
 80038a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f103 0208 	add.w	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f04f 32ff 	mov.w	r2, #4294967295
 80038ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f103 0208 	add.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 0208 	add.w	r2, r3, #8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d103      	bne.n	8003974 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e00c      	b.n	800398e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3308      	adds	r3, #8
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e002      	b.n	8003982 <vListInsert+0x2e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d2f6      	bcs.n	800397c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6852      	ldr	r2, [r2, #4]
 80039e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d103      	bne.n	80039fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10d      	bne.n	8003a4c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003a4c:	f001 fd1e 	bl	800548c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a58:	68f9      	ldr	r1, [r7, #12]
 8003a5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	441a      	add	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	22ff      	movs	r2, #255	@ 0xff
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	22ff      	movs	r2, #255	@ 0xff
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01a      	beq.n	8003ae0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3310      	adds	r3, #16
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ffd4 	bl	8004a5c <xTaskRemoveFromEventList>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003aba:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <xQueueGenericReset+0xd4>)
 8003abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	e009      	b.n	8003ae0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3310      	adds	r3, #16
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff feee 	bl	80038b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3324      	adds	r3, #36	@ 0x24
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fee9 	bl	80038b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ae0:	f001 fd0a 	bl	80054f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <xQueueGenericCreate+0x30>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0c:	b672      	cpsid	i
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	b662      	cpsie	i
 8003b1c:	613b      	str	r3, [r7, #16]
}
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
 8003b22:	e7fd      	b.n	8003b20 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	e004      	b.n	8003b3a <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	fb02 f303 	mul.w	r3, r2, r3
 8003b38:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3348      	adds	r3, #72	@ 0x48
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fd8c 	bl	800565c <pvPortMalloc>
 8003b44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3348      	adds	r3, #72	@ 0x48
 8003b54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f805 	bl	8003b7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b70:	69bb      	ldr	r3, [r7, #24]
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e002      	b.n	8003b9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba8:	2101      	movs	r1, #1
 8003baa:	69b8      	ldr	r0, [r7, #24]
 8003bac:	f7ff ff36 	bl	8003a1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08e      	sub	sp, #56	@ 0x38
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <xQueueGenericSend+0x38>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd8:	b672      	cpsid	i
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	b662      	cpsie	i
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <xQueueGenericSend+0x46>
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <xQueueGenericSend+0x4a>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <xQueueGenericSend+0x4c>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10d      	bne.n	8003c24 <xQueueGenericSend+0x6c>
	__asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0c:	b672      	cpsid	i
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	b662      	cpsie	i
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x7a>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <xQueueGenericSend+0x7e>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueGenericSend+0x80>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <xQueueGenericSend+0xa0>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c40:	b672      	cpsid	i
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	b662      	cpsie	i
 8003c50:	623b      	str	r3, [r7, #32]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c58:	f001 f8c8 	bl	8004dec <xTaskGetSchedulerState>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <xQueueGenericSend+0xb0>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueGenericSend+0xb4>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueGenericSend+0xb6>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <xQueueGenericSend+0xd6>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	b672      	cpsid	i
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	b662      	cpsie	i
 8003c86:	61fb      	str	r3, [r7, #28]
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c8e:	f001 fbfd 	bl	800548c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <xQueueGenericSend+0xec>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d129      	bne.n	8003cf8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003caa:	f000 f9bf 	bl	800402c <prvCopyDataToQueue>
 8003cae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	3324      	adds	r3, #36	@ 0x24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fecd 	bl	8004a5c <xTaskRemoveFromEventList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <xQueueGenericSend+0x210>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	e00a      	b.n	8003cf0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b39      	ldr	r3, [pc, #228]	@ (8003dc8 <xQueueGenericSend+0x210>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cf0:	f001 fc02 	bl	80054f8 <vPortExitCritical>
				return pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e063      	b.n	8003dc0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cfe:	f001 fbfb 	bl	80054f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e05c      	b.n	8003dc0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ff09 	bl	8004b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1a:	f001 fbed 	bl	80054f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d1e:	f000 fcad 	bl	800467c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d22:	f001 fbb3 	bl	800548c <vPortEnterCritical>
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d103      	bne.n	8003d3c <xQueueGenericSend+0x184>
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d103      	bne.n	8003d52 <xQueueGenericSend+0x19a>
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d52:	f001 fbd1 	bl	80054f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d56:	1d3a      	adds	r2, r7, #4
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fef8 	bl	8004b54 <xTaskCheckForTimeOut>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d124      	bne.n	8003db4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d6c:	f000 fa30 	bl	80041d0 <prvIsQueueFull>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	3310      	adds	r3, #16
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fe44 	bl	8004a0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d86:	f000 f9bb 	bl	8004100 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d8a:	f000 fc85 	bl	8004698 <xTaskResumeAll>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f af7c 	bne.w	8003c8e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003d96:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <xQueueGenericSend+0x210>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	e772      	b.n	8003c8e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003da8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003daa:	f000 f9a9 	bl	8004100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dae:	f000 fc73 	bl	8004698 <xTaskResumeAll>
 8003db2:	e76c      	b.n	8003c8e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003db6:	f000 f9a3 	bl	8004100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dba:	f000 fc6d 	bl	8004698 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3738      	adds	r7, #56	@ 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08e      	sub	sp, #56	@ 0x38
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	b672      	cpsid	i
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	b662      	cpsie	i
 8003dfc:	623b      	str	r3, [r7, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e10:	b672      	cpsid	i
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	b662      	cpsie	i
 8003e20:	61fb      	str	r3, [r7, #28]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e28:	f000 ffe0 	bl	8004dec <xTaskGetSchedulerState>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <xQueueSemaphoreTake+0x6c>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <xQueueSemaphoreTake+0x70>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <xQueueSemaphoreTake+0x72>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	b672      	cpsid	i
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	b662      	cpsie	i
 8003e56:	61bb      	str	r3, [r7, #24]
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e5e:	f001 fb15 	bl	800548c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d024      	beq.n	8003eb8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e7e:	f001 f97f 	bl	8005180 <pvTaskIncrementMutexHeldCount>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00f      	beq.n	8003eb0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	3310      	adds	r3, #16
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fde1 	bl	8004a5c <xTaskRemoveFromEventList>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ea0:	4b55      	ldr	r3, [pc, #340]	@ (8003ff8 <xQueueSemaphoreTake+0x22c>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eb0:	f001 fb22 	bl	80054f8 <vPortExitCritical>
				return pdPASS;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e09a      	b.n	8003fee <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d114      	bne.n	8003ee8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	b672      	cpsid	i
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	b662      	cpsie	i
 8003ed8:	617b      	str	r3, [r7, #20]
}
 8003eda:	bf00      	nop
 8003edc:	bf00      	nop
 8003ede:	e7fd      	b.n	8003edc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ee0:	f001 fb0a 	bl	80054f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e082      	b.n	8003fee <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fe18 	bl	8004b28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003efc:	f001 fafc 	bl	80054f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f00:	f000 fbbc 	bl	800467c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f04:	f001 fac2 	bl	800548c <vPortEnterCritical>
 8003f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f0e:	b25b      	sxtb	r3, r3
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d103      	bne.n	8003f1e <xQueueSemaphoreTake+0x152>
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d103      	bne.n	8003f34 <xQueueSemaphoreTake+0x168>
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f34:	f001 fae0 	bl	80054f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f38:	463a      	mov	r2, r7
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fe07 	bl	8004b54 <xTaskCheckForTimeOut>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d132      	bne.n	8003fb2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f4e:	f000 f929 	bl	80041a4 <prvIsQueueEmpty>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d026      	beq.n	8003fa6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8003f60:	f001 fa94 	bl	800548c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 ff5d 	bl	8004e28 <xTaskPriorityInherit>
 8003f6e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f70:	f001 fac2 	bl	80054f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	3324      	adds	r3, #36	@ 0x24
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd45 	bl	8004a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f84:	f000 f8bc 	bl	8004100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f88:	f000 fb86 	bl	8004698 <xTaskResumeAll>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f47f af65 	bne.w	8003e5e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8003f94:	4b18      	ldr	r3, [pc, #96]	@ (8003ff8 <xQueueSemaphoreTake+0x22c>)
 8003f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	e75b      	b.n	8003e5e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa8:	f000 f8aa 	bl	8004100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fac:	f000 fb74 	bl	8004698 <xTaskResumeAll>
 8003fb0:	e755      	b.n	8003e5e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fb4:	f000 f8a4 	bl	8004100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fb8:	f000 fb6e 	bl	8004698 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fbe:	f000 f8f1 	bl	80041a4 <prvIsQueueEmpty>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f43f af4a 	beq.w	8003e5e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8003fd0:	f001 fa5c 	bl	800548c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003fd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd6:	f000 f811 	bl	8003ffc <prvGetDisinheritPriorityAfterTimeout>
 8003fda:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 f82c 	bl	8005040 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003fe8:	f001 fa86 	bl	80054f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3738      	adds	r7, #56	@ 0x38
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1c3 0307 	rsb	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e001      	b.n	800401e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800401e:	68fb      	ldr	r3, [r7, #12]
	}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d14d      	bne.n	80040ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 ff66 	bl	8004f28 <xTaskPriorityDisinherit>
 800405c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e043      	b.n	80040ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d119      	bne.n	80040a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6858      	ldr	r0, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	461a      	mov	r2, r3
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	f001 ff4d 	bl	8005f16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d32b      	bcc.n	80040ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	e026      	b.n	80040ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68d8      	ldr	r0, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	461a      	mov	r2, r3
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	f001 ff33 	bl	8005f16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	425b      	negs	r3, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d207      	bcs.n	80040dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	425b      	negs	r3, r3
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d105      	bne.n	80040ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040f6:	697b      	ldr	r3, [r7, #20]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004108:	f001 f9c0 	bl	800548c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004112:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004114:	e011      	b.n	800413a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fc9a 	bl	8004a5c <xTaskRemoveFromEventList>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800412e:	f000 fd79 	bl	8004c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	3b01      	subs	r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	dce9      	bgt.n	8004116 <prvUnlockQueue+0x16>
 8004142:	e000      	b.n	8004146 <prvUnlockQueue+0x46>
					break;
 8004144:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	22ff      	movs	r2, #255	@ 0xff
 800414a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800414e:	f001 f9d3 	bl	80054f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004152:	f001 f99b 	bl	800548c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800415c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800415e:	e011      	b.n	8004184 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d012      	beq.n	800418e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3310      	adds	r3, #16
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fc75 	bl	8004a5c <xTaskRemoveFromEventList>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004178:	f000 fd54 	bl	8004c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	3b01      	subs	r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dce9      	bgt.n	8004160 <prvUnlockQueue+0x60>
 800418c:	e000      	b.n	8004190 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800418e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	22ff      	movs	r2, #255	@ 0xff
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004198:	f001 f9ae 	bl	80054f8 <vPortExitCritical>
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041ac:	f001 f96e 	bl	800548c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e001      	b.n	80041c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041c2:	f001 f999 	bl	80054f8 <vPortExitCritical>

	return xReturn;
 80041c6:	68fb      	ldr	r3, [r7, #12]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041d8:	f001 f958 	bl	800548c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d102      	bne.n	80041ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f001 f981 	bl	80054f8 <vPortExitCritical>

	return xReturn;
 80041f6:	68fb      	ldr	r3, [r7, #12]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08e      	sub	sp, #56	@ 0x38
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800420e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <xTaskCreateStatic+0x30>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004218:	b672      	cpsid	i
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	b662      	cpsie	i
 8004228:	623b      	str	r3, [r7, #32]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <xTaskCreateStatic+0x52>
	__asm volatile
 8004236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423a:	b672      	cpsid	i
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	b662      	cpsie	i
 800424a:	61fb      	str	r3, [r7, #28]
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004252:	2354      	movs	r3, #84	@ 0x54
 8004254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b54      	cmp	r3, #84	@ 0x54
 800425a:	d00d      	beq.n	8004278 <xTaskCreateStatic+0x78>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	b672      	cpsid	i
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	b662      	cpsie	i
 8004270:	61bb      	str	r3, [r7, #24]
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	e7fd      	b.n	8004274 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01e      	beq.n	80042be <xTaskCreateStatic+0xbe>
 8004280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01b      	beq.n	80042be <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004298:	2300      	movs	r3, #0
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f850 	bl	8004356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042b8:	f000 f8d8 	bl	800446c <prvAddNewTaskToReadyList>
 80042bc:	e001      	b.n	80042c2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042c2:	697b      	ldr	r3, [r7, #20]
	}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3728      	adds	r7, #40	@ 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	@ 0x30
 80042d0:	af04      	add	r7, sp, #16
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f9bb 	bl	800565c <pvPortMalloc>
 80042e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042ee:	2054      	movs	r0, #84	@ 0x54
 80042f0:	f001 f9b4 	bl	800565c <pvPortMalloc>
 80042f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
 8004302:	e005      	b.n	8004310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004304:	6978      	ldr	r0, [r7, #20]
 8004306:	f001 fa77 	bl	80057f8 <vPortFree>
 800430a:	e001      	b.n	8004310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d017      	beq.n	8004346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	2300      	movs	r3, #0
 8004322:	9303      	str	r3, [sp, #12]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f80e 	bl	8004356 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800433a:	69f8      	ldr	r0, [r7, #28]
 800433c:	f000 f896 	bl	800446c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004340:	2301      	movs	r3, #1
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e002      	b.n	800434c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800434c:	69bb      	ldr	r3, [r7, #24]
	}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b088      	sub	sp, #32
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800436e:	440b      	add	r3, r1
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f023 0307 	bic.w	r3, r3, #7
 800437c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	b672      	cpsid	i
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	b662      	cpsie	i
 800439c:	617b      	str	r3, [r7, #20]
}
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01f      	beq.n	80043ea <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e012      	b.n	80043d6 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	7819      	ldrb	r1, [r3, #0]
 80043b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	3334      	adds	r3, #52	@ 0x34
 80043c0:	460a      	mov	r2, r1
 80043c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3301      	adds	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d9e9      	bls.n	80043b0 <prvInitialiseNewTask+0x5a>
 80043dc:	e000      	b.n	80043e0 <prvInitialiseNewTask+0x8a>
			{
				break;
 80043de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e8:	e003      	b.n	80043f2 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d901      	bls.n	80043fc <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f8:	2306      	movs	r3, #6
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004400:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004406:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	2200      	movs	r2, #0
 800440c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fa6d 	bl	80038f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	3318      	adds	r3, #24
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa68 	bl	80038f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	f1c3 0207 	rsb	r2, r3, #7
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2200      	movs	r2, #0
 800443c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	f000 ff12 	bl	8005274 <pxPortInitialiseStack>
 8004450:	4602      	mov	r2, r0
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004462:	bf00      	nop
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004474:	f001 f80a 	bl	800548c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004478:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <prvAddNewTaskToReadyList+0xb8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a29      	ldr	r2, [pc, #164]	@ (8004524 <prvAddNewTaskToReadyList+0xb8>)
 8004480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004482:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <prvAddNewTaskToReadyList+0xbc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800448a:	4a27      	ldr	r2, [pc, #156]	@ (8004528 <prvAddNewTaskToReadyList+0xbc>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004490:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <prvAddNewTaskToReadyList+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d110      	bne.n	80044ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004498:	f000 fbe8 	bl	8004c6c <prvInitialiseTaskLists>
 800449c:	e00d      	b.n	80044ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800449e:	4b23      	ldr	r3, [pc, #140]	@ (800452c <prvAddNewTaskToReadyList+0xc0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044a6:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <prvAddNewTaskToReadyList+0xbc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d802      	bhi.n	80044ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004528 <prvAddNewTaskToReadyList+0xbc>)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004530 <prvAddNewTaskToReadyList+0xc4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004530 <prvAddNewTaskToReadyList+0xc4>)
 80044c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <prvAddNewTaskToReadyList+0xc8>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <prvAddNewTaskToReadyList+0xcc>)
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7ff fa0d 	bl	800390c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044f2:	f001 f801 	bl	80054f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <prvAddNewTaskToReadyList+0xc0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <prvAddNewTaskToReadyList+0xbc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	d207      	bcs.n	800451c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <prvAddNewTaskToReadyList+0xd0>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000484 	.word	0x20000484
 8004528:	20000384 	.word	0x20000384
 800452c:	20000490 	.word	0x20000490
 8004530:	200004a0 	.word	0x200004a0
 8004534:	2000048c 	.word	0x2000048c
 8004538:	20000388 	.word	0x20000388
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01a      	beq.n	8004588 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <vTaskDelay+0x68>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <vTaskDelay+0x36>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	b672      	cpsid	i
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	b662      	cpsie	i
 800456e:	60bb      	str	r3, [r7, #8]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004576:	f000 f881 	bl	800467c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800457a:	2100      	movs	r1, #0
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fe13 	bl	80051a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004582:	f000 f889 	bl	8004698 <xTaskResumeAll>
 8004586:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d107      	bne.n	800459e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800458e:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <vTaskDelay+0x6c>)
 8004590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200004ac 	.word	0x200004ac
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	@ 0x28
 80045b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045be:	463a      	mov	r2, r7
 80045c0:	1d39      	adds	r1, r7, #4
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fb ffb0 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	9202      	str	r2, [sp, #8]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	2300      	movs	r3, #0
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	460a      	mov	r2, r1
 80045de:	4921      	ldr	r1, [pc, #132]	@ (8004664 <vTaskStartScheduler+0xb4>)
 80045e0:	4821      	ldr	r0, [pc, #132]	@ (8004668 <vTaskStartScheduler+0xb8>)
 80045e2:	f7ff fe0d 	bl	8004200 <xTaskCreateStatic>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4a20      	ldr	r2, [pc, #128]	@ (800466c <vTaskStartScheduler+0xbc>)
 80045ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <vTaskStartScheduler+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045f4:	2301      	movs	r3, #1
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e001      	b.n	80045fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d118      	bne.n	8004636 <vTaskStartScheduler+0x86>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	b672      	cpsid	i
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	b662      	cpsie	i
 8004618:	613b      	str	r3, [r7, #16]
}
 800461a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800461c:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <vTaskStartScheduler+0xc0>)
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004624:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <vTaskStartScheduler+0xc4>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800462a:	4b13      	ldr	r3, [pc, #76]	@ (8004678 <vTaskStartScheduler+0xc8>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004630:	f000 feae 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004634:	e011      	b.n	800465a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d10d      	bne.n	800465a <vTaskStartScheduler+0xaa>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	b672      	cpsid	i
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	b662      	cpsie	i
 8004652:	60fb      	str	r3, [r7, #12]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskStartScheduler+0xa6>
}
 800465a:	bf00      	nop
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	080065d0 	.word	0x080065d0
 8004668:	08004c3d 	.word	0x08004c3d
 800466c:	200004a8 	.word	0x200004a8
 8004670:	200004a4 	.word	0x200004a4
 8004674:	20000490 	.word	0x20000490
 8004678:	20000488 	.word	0x20000488

0800467c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004680:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <vTaskSuspendAll+0x18>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a03      	ldr	r2, [pc, #12]	@ (8004694 <vTaskSuspendAll+0x18>)
 8004688:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	200004ac 	.word	0x200004ac

08004698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046a6:	4b43      	ldr	r3, [pc, #268]	@ (80047b4 <xTaskResumeAll+0x11c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <xTaskResumeAll+0x32>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	b672      	cpsid	i
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	b662      	cpsie	i
 80046c2:	603b      	str	r3, [r7, #0]
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046ca:	f000 fedf 	bl	800548c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ce:	4b39      	ldr	r3, [pc, #228]	@ (80047b4 <xTaskResumeAll+0x11c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4a37      	ldr	r2, [pc, #220]	@ (80047b4 <xTaskResumeAll+0x11c>)
 80046d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d8:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <xTaskResumeAll+0x11c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d161      	bne.n	80047a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046e0:	4b35      	ldr	r3, [pc, #212]	@ (80047b8 <xTaskResumeAll+0x120>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05d      	beq.n	80047a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046e8:	e02e      	b.n	8004748 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b34      	ldr	r3, [pc, #208]	@ (80047bc <xTaskResumeAll+0x124>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3318      	adds	r3, #24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff f965 	bl	80039c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3304      	adds	r3, #4
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff f960 	bl	80039c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	4b2c      	ldr	r3, [pc, #176]	@ (80047c0 <xTaskResumeAll+0x128>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	4a2a      	ldr	r2, [pc, #168]	@ (80047c0 <xTaskResumeAll+0x128>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4a27      	ldr	r2, [pc, #156]	@ (80047c4 <xTaskResumeAll+0x12c>)
 8004726:	441a      	add	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7ff f8ec 	bl	800390c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	4b23      	ldr	r3, [pc, #140]	@ (80047c8 <xTaskResumeAll+0x130>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	429a      	cmp	r2, r3
 8004740:	d302      	bcc.n	8004748 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004742:	4b22      	ldr	r3, [pc, #136]	@ (80047cc <xTaskResumeAll+0x134>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004748:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <xTaskResumeAll+0x124>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1cc      	bne.n	80046ea <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004756:	f000 fb29 	bl	8004dac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800475a:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <xTaskResumeAll+0x138>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004766:	f000 f837 	bl	80047d8 <xTaskIncrementTick>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004770:	4b16      	ldr	r3, [pc, #88]	@ (80047cc <xTaskResumeAll+0x134>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f1      	bne.n	8004766 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004782:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <xTaskResumeAll+0x138>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004788:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <xTaskResumeAll+0x134>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004794:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <xTaskResumeAll+0x13c>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047a4:	f000 fea8 	bl	80054f8 <vPortExitCritical>

	return xAlreadyYielded;
 80047a8:	68bb      	ldr	r3, [r7, #8]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	200004ac 	.word	0x200004ac
 80047b8:	20000484 	.word	0x20000484
 80047bc:	20000444 	.word	0x20000444
 80047c0:	2000048c 	.word	0x2000048c
 80047c4:	20000388 	.word	0x20000388
 80047c8:	20000384 	.word	0x20000384
 80047cc:	20000498 	.word	0x20000498
 80047d0:	20000494 	.word	0x20000494
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e2:	4b50      	ldr	r3, [pc, #320]	@ (8004924 <xTaskIncrementTick+0x14c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 808b 	bne.w	8004902 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004928 <xTaskIncrementTick+0x150>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004928 <xTaskIncrementTick+0x150>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d123      	bne.n	8004848 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004800:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <xTaskIncrementTick+0x154>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <xTaskIncrementTick+0x4e>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	603b      	str	r3, [r7, #0]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <xTaskIncrementTick+0x4a>
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <xTaskIncrementTick+0x154>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4b40      	ldr	r3, [pc, #256]	@ (8004930 <xTaskIncrementTick+0x158>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a3e      	ldr	r2, [pc, #248]	@ (800492c <xTaskIncrementTick+0x154>)
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4a3e      	ldr	r2, [pc, #248]	@ (8004930 <xTaskIncrementTick+0x158>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b3e      	ldr	r3, [pc, #248]	@ (8004934 <xTaskIncrementTick+0x15c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a3c      	ldr	r2, [pc, #240]	@ (8004934 <xTaskIncrementTick+0x15c>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	f000 fab2 	bl	8004dac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004848:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <xTaskIncrementTick+0x160>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d348      	bcc.n	80048e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004852:	4b36      	ldr	r3, [pc, #216]	@ (800492c <xTaskIncrementTick+0x154>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485c:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <xTaskIncrementTick+0x160>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	601a      	str	r2, [r3, #0]
					break;
 8004864:	e03e      	b.n	80048e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <xTaskIncrementTick+0x154>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d203      	bcs.n	8004886 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800487e:	4a2e      	ldr	r2, [pc, #184]	@ (8004938 <xTaskIncrementTick+0x160>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004884:	e02e      	b.n	80048e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff f89b 	bl	80039c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3318      	adds	r3, #24
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f892 	bl	80039c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	2201      	movs	r2, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	4b24      	ldr	r3, [pc, #144]	@ (800493c <xTaskIncrementTick+0x164>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <xTaskIncrementTick+0x164>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <xTaskIncrementTick+0x168>)
 80048c2:	441a      	add	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7ff f81e 	bl	800390c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <xTaskIncrementTick+0x16c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3b9      	bcc.n	8004852 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e2:	e7b6      	b.n	8004852 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048e4:	4b17      	ldr	r3, [pc, #92]	@ (8004944 <xTaskIncrementTick+0x16c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ea:	4915      	ldr	r1, [pc, #84]	@ (8004940 <xTaskIncrementTick+0x168>)
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d907      	bls.n	800490c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e004      	b.n	800490c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <xTaskIncrementTick+0x170>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3301      	adds	r3, #1
 8004908:	4a0f      	ldr	r2, [pc, #60]	@ (8004948 <xTaskIncrementTick+0x170>)
 800490a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800490c:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <xTaskIncrementTick+0x174>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004918:	697b      	ldr	r3, [r7, #20]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200004ac 	.word	0x200004ac
 8004928:	20000488 	.word	0x20000488
 800492c:	2000043c 	.word	0x2000043c
 8004930:	20000440 	.word	0x20000440
 8004934:	2000049c 	.word	0x2000049c
 8004938:	200004a4 	.word	0x200004a4
 800493c:	2000048c 	.word	0x2000048c
 8004940:	20000388 	.word	0x20000388
 8004944:	20000384 	.word	0x20000384
 8004948:	20000494 	.word	0x20000494
 800494c:	20000498 	.word	0x20000498

08004950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004956:	4b28      	ldr	r3, [pc, #160]	@ (80049f8 <vTaskSwitchContext+0xa8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800495e:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <vTaskSwitchContext+0xac>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004964:	e042      	b.n	80049ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004966:	4b25      	ldr	r3, [pc, #148]	@ (80049fc <vTaskSwitchContext+0xac>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496c:	4b24      	ldr	r3, [pc, #144]	@ (8004a00 <vTaskSwitchContext+0xb0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	fab3 f383 	clz	r3, r3
 8004978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	f1c3 031f 	rsb	r3, r3, #31
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	4920      	ldr	r1, [pc, #128]	@ (8004a04 <vTaskSwitchContext+0xb4>)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <vTaskSwitchContext+0x62>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499a:	b672      	cpsid	i
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	b662      	cpsie	i
 80049aa:	607b      	str	r3, [r7, #4]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vTaskSwitchContext+0x5e>
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a11      	ldr	r2, [pc, #68]	@ (8004a04 <vTaskSwitchContext+0xb4>)
 80049be:	4413      	add	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	3308      	adds	r3, #8
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d104      	bne.n	80049e2 <vTaskSwitchContext+0x92>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a07      	ldr	r2, [pc, #28]	@ (8004a08 <vTaskSwitchContext+0xb8>)
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	200004ac 	.word	0x200004ac
 80049fc:	20000498 	.word	0x20000498
 8004a00:	2000048c 	.word	0x2000048c
 8004a04:	20000388 	.word	0x20000388
 8004a08:	20000384 	.word	0x20000384

08004a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10d      	bne.n	8004a38 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	b672      	cpsid	i
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	b662      	cpsie	i
 8004a30:	60fb      	str	r3, [r7, #12]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a38:	4b07      	ldr	r3, [pc, #28]	@ (8004a58 <vTaskPlaceOnEventList+0x4c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fe ff87 	bl	8003954 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a46:	2101      	movs	r1, #1
 8004a48:	6838      	ldr	r0, [r7, #0]
 8004a4a:	f000 fbad 	bl	80051a8 <prvAddCurrentTaskToDelayedList>
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000384 	.word	0x20000384

08004a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	b672      	cpsid	i
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	b662      	cpsie	i
 8004a86:	60fb      	str	r3, [r7, #12]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3318      	adds	r3, #24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe ff97 	bl	80039c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <xTaskRemoveFromEventList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11c      	bne.n	8004ada <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe ff8e 	bl	80039c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <xTaskRemoveFromEventList+0xb8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <xTaskRemoveFromEventList+0xb8>)
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4a13      	ldr	r2, [pc, #76]	@ (8004b18 <xTaskRemoveFromEventList+0xbc>)
 8004aca:	441a      	add	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fe ff1a 	bl	800390c <vListInsertEnd>
 8004ad8:	e005      	b.n	8004ae6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	3318      	adds	r3, #24
 8004ade:	4619      	mov	r1, r3
 8004ae0:	480e      	ldr	r0, [pc, #56]	@ (8004b1c <xTaskRemoveFromEventList+0xc0>)
 8004ae2:	f7fe ff13 	bl	800390c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <xTaskRemoveFromEventList+0xc4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d905      	bls.n	8004b00 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004af8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <xTaskRemoveFromEventList+0xc8>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e001      	b.n	8004b04 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b04:	697b      	ldr	r3, [r7, #20]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200004ac 	.word	0x200004ac
 8004b14:	2000048c 	.word	0x2000048c
 8004b18:	20000388 	.word	0x20000388
 8004b1c:	20000444 	.word	0x20000444
 8004b20:	20000384 	.word	0x20000384
 8004b24:	20000498 	.word	0x20000498

08004b28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <vTaskInternalSetTimeOutState+0x24>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <vTaskInternalSetTimeOutState+0x28>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	2000049c 	.word	0x2000049c
 8004b50:	20000488 	.word	0x20000488

08004b54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	613b      	str	r3, [r7, #16]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	b672      	cpsid	i
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	b662      	cpsie	i
 8004b9a:	60fb      	str	r3, [r7, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004ba2:	f000 fc73 	bl	800548c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <xTaskCheckForTimeOut+0xc8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d102      	bne.n	8004bc6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e023      	b.n	8004c0e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <xTaskCheckForTimeOut+0xcc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d007      	beq.n	8004be2 <xTaskCheckForTimeOut+0x8e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e015      	b.n	8004c0e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d20b      	bcs.n	8004c04 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	1ad2      	subs	r2, r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff95 	bl	8004b28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e004      	b.n	8004c0e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c0e:	f000 fc73 	bl	80054f8 <vPortExitCritical>

	return xReturn;
 8004c12:	69fb      	ldr	r3, [r7, #28]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000488 	.word	0x20000488
 8004c20:	2000049c 	.word	0x2000049c

08004c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <vTaskMissedYield+0x14>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	20000498 	.word	0x20000498

08004c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c44:	f000 f852 	bl	8004cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c48:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <prvIdleTask+0x28>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d9f9      	bls.n	8004c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <prvIdleTask+0x2c>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c60:	e7f0      	b.n	8004c44 <prvIdleTask+0x8>
 8004c62:	bf00      	nop
 8004c64:	20000388 	.word	0x20000388
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e00c      	b.n	8004c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4a12      	ldr	r2, [pc, #72]	@ (8004ccc <prvInitialiseTaskLists+0x60>)
 8004c84:	4413      	add	r3, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fe13 	bl	80038b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b06      	cmp	r3, #6
 8004c96:	d9ef      	bls.n	8004c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c98:	480d      	ldr	r0, [pc, #52]	@ (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004c9a:	f7fe fe0a 	bl	80038b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c9e:	480d      	ldr	r0, [pc, #52]	@ (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004ca0:	f7fe fe07 	bl	80038b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca4:	480c      	ldr	r0, [pc, #48]	@ (8004cd8 <prvInitialiseTaskLists+0x6c>)
 8004ca6:	f7fe fe04 	bl	80038b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004caa:	480c      	ldr	r0, [pc, #48]	@ (8004cdc <prvInitialiseTaskLists+0x70>)
 8004cac:	f7fe fe01 	bl	80038b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cb0:	480b      	ldr	r0, [pc, #44]	@ (8004ce0 <prvInitialiseTaskLists+0x74>)
 8004cb2:	f7fe fdfe 	bl	80038b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <prvInitialiseTaskLists+0x78>)
 8004cb8:	4a05      	ldr	r2, [pc, #20]	@ (8004cd0 <prvInitialiseTaskLists+0x64>)
 8004cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <prvInitialiseTaskLists+0x7c>)
 8004cbe:	4a05      	ldr	r2, [pc, #20]	@ (8004cd4 <prvInitialiseTaskLists+0x68>)
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000388 	.word	0x20000388
 8004cd0:	20000414 	.word	0x20000414
 8004cd4:	20000428 	.word	0x20000428
 8004cd8:	20000444 	.word	0x20000444
 8004cdc:	20000458 	.word	0x20000458
 8004ce0:	20000470 	.word	0x20000470
 8004ce4:	2000043c 	.word	0x2000043c
 8004ce8:	20000440 	.word	0x20000440

08004cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf2:	e019      	b.n	8004d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf4:	f000 fbca 	bl	800548c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf8:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <prvCheckTasksWaitingTermination+0x50>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fe5e 	bl	80039c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	4a0b      	ldr	r2, [pc, #44]	@ (8004d40 <prvCheckTasksWaitingTermination+0x54>)
 8004d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d1e:	f000 fbeb 	bl	80054f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f810 	bl	8004d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <prvCheckTasksWaitingTermination+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e1      	bne.n	8004cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000458 	.word	0x20000458
 8004d40:	20000484 	.word	0x20000484
 8004d44:	2000046c 	.word	0x2000046c

08004d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fd4a 	bl	80057f8 <vPortFree>
				vPortFree( pxTCB );
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fd47 	bl	80057f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d6a:	e01b      	b.n	8004da4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d103      	bne.n	8004d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fd3e 	bl	80057f8 <vPortFree>
	}
 8004d7c:	e012      	b.n	8004da4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d00d      	beq.n	8004da4 <prvDeleteTCB+0x5c>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8c:	b672      	cpsid	i
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	b662      	cpsie	i
 8004d9c:	60fb      	str	r3, [r7, #12]
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <prvDeleteTCB+0x58>
	}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <prvResetNextTaskUnblockTime+0x38>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <prvResetNextTaskUnblockTime+0x3c>)
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dc4:	e008      	b.n	8004dd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc6:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <prvResetNextTaskUnblockTime+0x38>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <prvResetNextTaskUnblockTime+0x3c>)
 8004dd6:	6013      	str	r3, [r2, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	2000043c 	.word	0x2000043c
 8004de8:	200004a4 	.word	0x200004a4

08004dec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004df2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <xTaskGetSchedulerState+0x34>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	e008      	b.n	8004e12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e00:	4b08      	ldr	r3, [pc, #32]	@ (8004e24 <xTaskGetSchedulerState+0x38>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	e001      	b.n	8004e12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e12:	687b      	ldr	r3, [r7, #4]
	}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000490 	.word	0x20000490
 8004e24:	200004ac 	.word	0x200004ac

08004e28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d069      	beq.n	8004f12 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e42:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <xTaskPriorityInherit+0xf4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d259      	bcs.n	8004f00 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db06      	blt.n	8004e62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e54:	4b31      	ldr	r3, [pc, #196]	@ (8004f1c <xTaskPriorityInherit+0xf4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f1c3 0207 	rsb	r2, r3, #7
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6959      	ldr	r1, [r3, #20]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a2b      	ldr	r2, [pc, #172]	@ (8004f20 <xTaskPriorityInherit+0xf8>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4299      	cmp	r1, r3
 8004e78:	d13a      	bne.n	8004ef0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fda1 	bl	80039c6 <uxListRemove>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d115      	bne.n	8004eb6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8e:	4924      	ldr	r1, [pc, #144]	@ (8004f20 <xTaskPriorityInherit+0xf8>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTaskPriorityInherit+0x8e>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <xTaskPriorityInherit+0xfc>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f24 <xTaskPriorityInherit+0xfc>)
 8004eb4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004eb6:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <xTaskPriorityInherit+0xf4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4b16      	ldr	r3, [pc, #88]	@ (8004f24 <xTaskPriorityInherit+0xfc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <xTaskPriorityInherit+0xfc>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a10      	ldr	r2, [pc, #64]	@ (8004f20 <xTaskPriorityInherit+0xf8>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe fd0f 	bl	800390c <vListInsertEnd>
 8004eee:	e004      	b.n	8004efa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <xTaskPriorityInherit+0xf4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e008      	b.n	8004f12 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <xTaskPriorityInherit+0xf4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d201      	bcs.n	8004f12 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f12:	68fb      	ldr	r3, [r7, #12]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000384 	.word	0x20000384
 8004f20:	20000388 	.word	0x20000388
 8004f24:	2000048c 	.word	0x2000048c

08004f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d074      	beq.n	8005028 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005034 <xTaskPriorityDisinherit+0x10c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d00d      	beq.n	8004f64 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	b672      	cpsid	i
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	b662      	cpsie	i
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	b672      	cpsid	i
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	b662      	cpsie	i
 8004f80:	60bb      	str	r3, [r7, #8]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d044      	beq.n	8005028 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d140      	bne.n	8005028 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fd0b 	bl	80039c6 <uxListRemove>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d115      	bne.n	8004fe2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	491f      	ldr	r1, [pc, #124]	@ (8005038 <xTaskPriorityDisinherit+0x110>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xTaskPriorityDisinherit+0xba>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	4b18      	ldr	r3, [pc, #96]	@ (800503c <xTaskPriorityDisinherit+0x114>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	4a17      	ldr	r2, [pc, #92]	@ (800503c <xTaskPriorityDisinherit+0x114>)
 8004fe0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	f1c3 0207 	rsb	r2, r3, #7
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800503c <xTaskPriorityDisinherit+0x114>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	4a0d      	ldr	r2, [pc, #52]	@ (800503c <xTaskPriorityDisinherit+0x114>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a08      	ldr	r2, [pc, #32]	@ (8005038 <xTaskPriorityDisinherit+0x110>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe fc74 	bl	800390c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005028:	697b      	ldr	r3, [r7, #20]
	}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000384 	.word	0x20000384
 8005038:	20000388 	.word	0x20000388
 800503c:	2000048c 	.word	0x2000048c

08005040 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8089 	beq.w	800516c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	b672      	cpsid	i
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	b662      	cpsie	i
 8005076:	60fb      	str	r3, [r7, #12]
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	e7fd      	b.n	800507a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d902      	bls.n	800508e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e002      	b.n	8005094 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005092:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	429a      	cmp	r2, r3
 800509c:	d066      	beq.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d161      	bne.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80050a8:	4b32      	ldr	r3, [pc, #200]	@ (8005174 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d10d      	bne.n	80050ce <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	b672      	cpsid	i
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	b662      	cpsie	i
 80050c6:	60bb      	str	r3, [r7, #8]
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	e7fd      	b.n	80050ca <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db04      	blt.n	80050ec <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f1c3 0207 	rsb	r2, r3, #7
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	6959      	ldr	r1, [r3, #20]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80050fc:	4413      	add	r3, r2
 80050fe:	4299      	cmp	r1, r3
 8005100:	d134      	bne.n	800516c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3304      	adds	r3, #4
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fc5d 	bl	80039c6 <uxListRemove>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d115      	bne.n	800513e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005116:	4918      	ldr	r1, [pc, #96]	@ (8005178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	2201      	movs	r2, #1
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43da      	mvns	r2, r3
 8005134:	4b11      	ldr	r3, [pc, #68]	@ (800517c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4013      	ands	r3, r2
 800513a:	4a10      	ldr	r2, [pc, #64]	@ (800517c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800513c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	2201      	movs	r2, #1
 8005144:	409a      	lsls	r2, r3
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4313      	orrs	r3, r2
 800514c:	4a0b      	ldr	r2, [pc, #44]	@ (800517c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800515e:	441a      	add	r2, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f7fe fbd0 	bl	800390c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800516c:	bf00      	nop
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000384 	.word	0x20000384
 8005178:	20000388 	.word	0x20000388
 800517c:	2000048c 	.word	0x2000048c

08005180 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005184:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005192:	3201      	adds	r2, #1
 8005194:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005196:	4b03      	ldr	r3, [pc, #12]	@ (80051a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005198:	681b      	ldr	r3, [r3, #0]
	}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20000384 	.word	0x20000384

080051a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051b2:	4b29      	ldr	r3, [pc, #164]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b8:	4b28      	ldr	r3, [pc, #160]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3304      	adds	r3, #4
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fe fc01 	bl	80039c6 <uxListRemove>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	2201      	movs	r2, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	4b21      	ldr	r3, [pc, #132]	@ (8005260 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4013      	ands	r3, r2
 80051de:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <prvAddCurrentTaskToDelayedList+0xb8>)
 80051e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d10a      	bne.n	8005200 <prvAddCurrentTaskToDelayedList+0x58>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f0:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	481a      	ldr	r0, [pc, #104]	@ (8005264 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051fa:	f7fe fb87 	bl	800390c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051fe:	e026      	b.n	800524e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005208:	4b14      	ldr	r3, [pc, #80]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	429a      	cmp	r2, r3
 8005216:	d209      	bcs.n	800522c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005218:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <prvAddCurrentTaskToDelayedList+0xc0>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4b0f      	ldr	r3, [pc, #60]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f7fe fb95 	bl	8003954 <vListInsert>
}
 800522a:	e010      	b.n	800524e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800522c:	4b0f      	ldr	r3, [pc, #60]	@ (800526c <prvAddCurrentTaskToDelayedList+0xc4>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe fb8b 	bl	8003954 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800523e:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d202      	bcs.n	800524e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005248:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <prvAddCurrentTaskToDelayedList+0xc8>)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6013      	str	r3, [r2, #0]
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000488 	.word	0x20000488
 800525c:	20000384 	.word	0x20000384
 8005260:	2000048c 	.word	0x2000048c
 8005264:	20000470 	.word	0x20000470
 8005268:	20000440 	.word	0x20000440
 800526c:	2000043c 	.word	0x2000043c
 8005270:	200004a4 	.word	0x200004a4

08005274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b04      	subs	r3, #4
 8005284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a4:	4a0c      	ldr	r2, [pc, #48]	@ (80052d8 <pxPortInitialiseStack+0x64>)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b14      	subs	r3, #20
 80052ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f06f 0202 	mvn.w	r2, #2
 80052c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b20      	subs	r3, #32
 80052c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	080052dd 	.word	0x080052dd

080052dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052e6:	4b15      	ldr	r3, [pc, #84]	@ (800533c <prvTaskExitError+0x60>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d00d      	beq.n	800530c <prvTaskExitError+0x30>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	b672      	cpsid	i
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	b662      	cpsie	i
 8005304:	60fb      	str	r3, [r7, #12]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <prvTaskExitError+0x2c>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	b672      	cpsid	i
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	b662      	cpsie	i
 8005320:	60bb      	str	r3, [r7, #8]
}
 8005322:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005324:	bf00      	nop
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0fc      	beq.n	8005326 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	@ (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005396:	4b37      	ldr	r3, [pc, #220]	@ (8005474 <xPortStartScheduler+0xe4>)
 8005398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	22ff      	movs	r2, #255	@ 0xff
 80053a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005478 <xPortStartScheduler+0xe8>)
 80053bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053be:	4b2f      	ldr	r3, [pc, #188]	@ (800547c <xPortStartScheduler+0xec>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053c4:	e009      	b.n	80053da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053c6:	4b2d      	ldr	r3, [pc, #180]	@ (800547c <xPortStartScheduler+0xec>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a2b      	ldr	r2, [pc, #172]	@ (800547c <xPortStartScheduler+0xec>)
 80053ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d0ef      	beq.n	80053c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053e6:	4b25      	ldr	r3, [pc, #148]	@ (800547c <xPortStartScheduler+0xec>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1c3 0307 	rsb	r3, r3, #7
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00d      	beq.n	800540e <xPortStartScheduler+0x7e>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	60bb      	str	r3, [r7, #8]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800540e:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <xPortStartScheduler+0xec>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	4a19      	ldr	r2, [pc, #100]	@ (800547c <xPortStartScheduler+0xec>)
 8005416:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005418:	4b18      	ldr	r3, [pc, #96]	@ (800547c <xPortStartScheduler+0xec>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005420:	4a16      	ldr	r2, [pc, #88]	@ (800547c <xPortStartScheduler+0xec>)
 8005422:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <xPortStartScheduler+0xf0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a13      	ldr	r2, [pc, #76]	@ (8005480 <xPortStartScheduler+0xf0>)
 8005432:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005436:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005438:	4b11      	ldr	r3, [pc, #68]	@ (8005480 <xPortStartScheduler+0xf0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a10      	ldr	r2, [pc, #64]	@ (8005480 <xPortStartScheduler+0xf0>)
 800543e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005442:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005444:	f000 f8dc 	bl	8005600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <xPortStartScheduler+0xf4>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800544e:	f000 f8fb 	bl	8005648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005452:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <xPortStartScheduler+0xf8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a0c      	ldr	r2, [pc, #48]	@ (8005488 <xPortStartScheduler+0xf8>)
 8005458:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800545c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800545e:	f7ff ff83 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005462:	f7ff fa75 	bl	8004950 <vTaskSwitchContext>
	prvTaskExitError();
 8005466:	f7ff ff39 	bl	80052dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	e000e400 	.word	0xe000e400
 8005478:	200004b0 	.word	0x200004b0
 800547c:	200004b4 	.word	0x200004b4
 8005480:	e000ed20 	.word	0xe000ed20
 8005484:	2000000c 	.word	0x2000000c
 8005488:	e000ef34 	.word	0xe000ef34

0800548c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	b672      	cpsid	i
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	b662      	cpsie	i
 80054a6:	607b      	str	r3, [r7, #4]
}
 80054a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054aa:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <vPortEnterCritical+0x64>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	4a0f      	ldr	r2, [pc, #60]	@ (80054f0 <vPortEnterCritical+0x64>)
 80054b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054b4:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <vPortEnterCritical+0x64>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d112      	bne.n	80054e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054bc:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <vPortEnterCritical+0x68>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <vPortEnterCritical+0x56>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	603b      	str	r3, [r7, #0]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vPortEnterCritical+0x52>
	}
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054fe:	4b13      	ldr	r3, [pc, #76]	@ (800554c <vPortExitCritical+0x54>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <vPortExitCritical+0x2a>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	607b      	str	r3, [r7, #4]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005522:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <vPortExitCritical+0x54>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3b01      	subs	r3, #1
 8005528:	4a08      	ldr	r2, [pc, #32]	@ (800554c <vPortExitCritical+0x54>)
 800552a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800552c:	4b07      	ldr	r3, [pc, #28]	@ (800554c <vPortExitCritical+0x54>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <vPortExitCritical+0x48>
 8005534:	2300      	movs	r3, #0
 8005536:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800553e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	2000000c 	.word	0x2000000c

08005550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005550:	f3ef 8009 	mrs	r0, PSP
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <pxCurrentTCBConst>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f01e 0f10 	tst.w	lr, #16
 8005560:	bf08      	it	eq
 8005562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005574:	b672      	cpsid	i
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	b662      	cpsie	i
 8005584:	f7ff f9e4 	bl	8004950 <vTaskSwitchContext>
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f380 8811 	msr	BASEPRI, r0
 8005590:	bc09      	pop	{r0, r3}
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6808      	ldr	r0, [r1, #0]
 8005596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559a:	f01e 0f10 	tst.w	lr, #16
 800559e:	bf08      	it	eq
 80055a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055a4:	f380 8809 	msr	PSP, r0
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop

080055b0 <pxCurrentTCBConst>:
 80055b0:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	b672      	cpsid	i
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	b662      	cpsie	i
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055d6:	f7ff f8ff 	bl	80047d8 <xTaskIncrementTick>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055e0:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <xPortSysTickHandler+0x44>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f383 8811 	msr	BASEPRI, r3
}
 80055f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <vPortSetupTimerInterrupt+0x34>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800560a:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <vPortSetupTimerInterrupt+0x38>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005610:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <vPortSetupTimerInterrupt+0x3c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <vPortSetupTimerInterrupt+0x40>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	099b      	lsrs	r3, r3, #6
 800561c:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <vPortSetupTimerInterrupt+0x44>)
 800561e:	3b01      	subs	r3, #1
 8005620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005622:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <vPortSetupTimerInterrupt+0x34>)
 8005624:	2207      	movs	r2, #7
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000e010 	.word	0xe000e010
 8005638:	e000e018 	.word	0xe000e018
 800563c:	20000000 	.word	0x20000000
 8005640:	10624dd3 	.word	0x10624dd3
 8005644:	e000e014 	.word	0xe000e014

08005648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005648:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005658 <vPortEnableVFP+0x10>
 800564c:	6801      	ldr	r1, [r0, #0]
 800564e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005652:	6001      	str	r1, [r0, #0]
 8005654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005656:	bf00      	nop
 8005658:	e000ed88 	.word	0xe000ed88

0800565c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	@ 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005668:	f7ff f808 	bl	800467c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800566c:	4b5d      	ldr	r3, [pc, #372]	@ (80057e4 <pvPortMalloc+0x188>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005674:	f000 f920 	bl	80058b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005678:	4b5b      	ldr	r3, [pc, #364]	@ (80057e8 <pvPortMalloc+0x18c>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 8094 	bne.w	80057ae <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800568c:	2208      	movs	r2, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b00      	cmp	r3, #0
 800569c:	d017      	beq.n	80056ce <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f023 0307 	bic.w	r3, r3, #7
 80056a4:	3308      	adds	r3, #8
 80056a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <pvPortMalloc+0x72>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	b672      	cpsid	i
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	b662      	cpsie	i
 80056c6:	617b      	str	r3, [r7, #20]
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d06c      	beq.n	80057ae <pvPortMalloc+0x152>
 80056d4:	4b45      	ldr	r3, [pc, #276]	@ (80057ec <pvPortMalloc+0x190>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d867      	bhi.n	80057ae <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056de:	4b44      	ldr	r3, [pc, #272]	@ (80057f0 <pvPortMalloc+0x194>)
 80056e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056e2:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <pvPortMalloc+0x194>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056e8:	e004      	b.n	80056f4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d903      	bls.n	8005706 <pvPortMalloc+0xaa>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f1      	bne.n	80056ea <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005706:	4b37      	ldr	r3, [pc, #220]	@ (80057e4 <pvPortMalloc+0x188>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800570c:	429a      	cmp	r2, r3
 800570e:	d04e      	beq.n	80057ae <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2208      	movs	r2, #8
 8005716:	4413      	add	r3, r2
 8005718:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad2      	subs	r2, r2, r3
 800572a:	2308      	movs	r3, #8
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	429a      	cmp	r2, r3
 8005730:	d922      	bls.n	8005778 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4413      	add	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <pvPortMalloc+0x104>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	b672      	cpsid	i
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	b662      	cpsie	i
 8005758:	613b      	str	r3, [r7, #16]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	f000 f902 	bl	800597c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005778:	4b1c      	ldr	r3, [pc, #112]	@ (80057ec <pvPortMalloc+0x190>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <pvPortMalloc+0x190>)
 8005784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005786:	4b19      	ldr	r3, [pc, #100]	@ (80057ec <pvPortMalloc+0x190>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b1a      	ldr	r3, [pc, #104]	@ (80057f4 <pvPortMalloc+0x198>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d203      	bcs.n	800579a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005792:	4b16      	ldr	r3, [pc, #88]	@ (80057ec <pvPortMalloc+0x190>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <pvPortMalloc+0x198>)
 8005798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <pvPortMalloc+0x18c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057ae:	f7fe ff73 	bl	8004698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <pvPortMalloc+0x17c>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	b672      	cpsid	i
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	b662      	cpsie	i
 80057d0:	60fb      	str	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <pvPortMalloc+0x178>
	return pvReturn;
 80057d8:	69fb      	ldr	r3, [r7, #28]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3728      	adds	r7, #40	@ 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	200040c0 	.word	0x200040c0
 80057e8:	200040cc 	.word	0x200040cc
 80057ec:	200040c4 	.word	0x200040c4
 80057f0:	200040b8 	.word	0x200040b8
 80057f4:	200040c8 	.word	0x200040c8

080057f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d04e      	beq.n	80058a8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800580a:	2308      	movs	r3, #8
 800580c:	425b      	negs	r3, r3
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4b24      	ldr	r3, [pc, #144]	@ (80058b0 <vPortFree+0xb8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <vPortFree+0x4a>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	b672      	cpsid	i
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	b662      	cpsie	i
 800583a:	60fb      	str	r3, [r7, #12]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <vPortFree+0x6e>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584e:	b672      	cpsid	i
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	b662      	cpsie	i
 800585e:	60bb      	str	r3, [r7, #8]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <vPortFree+0xb8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d115      	bne.n	80058a8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <vPortFree+0xb8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800588c:	f7fe fef6 	bl	800467c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <vPortFree+0xbc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4413      	add	r3, r2
 800589a:	4a06      	ldr	r2, [pc, #24]	@ (80058b4 <vPortFree+0xbc>)
 800589c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800589e:	6938      	ldr	r0, [r7, #16]
 80058a0:	f000 f86c 	bl	800597c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058a4:	f7fe fef8 	bl	8004698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200040cc 	.word	0x200040cc
 80058b4:	200040c4 	.word	0x200040c4

080058b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058be:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80058c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058c4:	4b27      	ldr	r3, [pc, #156]	@ (8005964 <prvHeapInit+0xac>)
 80058c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3307      	adds	r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0307 	bic.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <prvHeapInit+0xac>)
 80058e8:	4413      	add	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005968 <prvHeapInit+0xb0>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005968 <prvHeapInit+0xb0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005904:	2208      	movs	r2, #8
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a15      	ldr	r2, [pc, #84]	@ (800596c <prvHeapInit+0xb4>)
 8005918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800591a:	4b14      	ldr	r3, [pc, #80]	@ (800596c <prvHeapInit+0xb4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <prvHeapInit+0xb4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <prvHeapInit+0xb4>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a0a      	ldr	r2, [pc, #40]	@ (8005970 <prvHeapInit+0xb8>)
 8005946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a09      	ldr	r2, [pc, #36]	@ (8005974 <prvHeapInit+0xbc>)
 800594e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005950:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <prvHeapInit+0xc0>)
 8005952:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	200004b8 	.word	0x200004b8
 8005968:	200040b8 	.word	0x200040b8
 800596c:	200040c0 	.word	0x200040c0
 8005970:	200040c8 	.word	0x200040c8
 8005974:	200040c4 	.word	0x200040c4
 8005978:	200040cc 	.word	0x200040cc

0800597c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005984:	4b28      	ldr	r3, [pc, #160]	@ (8005a28 <prvInsertBlockIntoFreeList+0xac>)
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e002      	b.n	8005990 <prvInsertBlockIntoFreeList+0x14>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d8f7      	bhi.n	800598a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4413      	add	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d108      	bne.n	80059be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	441a      	add	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	441a      	add	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d118      	bne.n	8005a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b15      	ldr	r3, [pc, #84]	@ (8005a2c <prvInsertBlockIntoFreeList+0xb0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d00d      	beq.n	80059fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	441a      	add	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e008      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <prvInsertBlockIntoFreeList+0xb0>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e003      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d002      	beq.n	8005a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	200040b8 	.word	0x200040b8
 8005a2c:	200040c0 	.word	0x200040c0

08005a30 <std>:
 8005a30:	2300      	movs	r3, #0
 8005a32:	b510      	push	{r4, lr}
 8005a34:	4604      	mov	r4, r0
 8005a36:	e9c0 3300 	strd	r3, r3, [r0]
 8005a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a3e:	6083      	str	r3, [r0, #8]
 8005a40:	8181      	strh	r1, [r0, #12]
 8005a42:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a44:	81c2      	strh	r2, [r0, #14]
 8005a46:	6183      	str	r3, [r0, #24]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	305c      	adds	r0, #92	@ 0x5c
 8005a4e:	f000 f9e7 	bl	8005e20 <memset>
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x58>)
 8005a54:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x5c>)
 8005a58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <std+0x60>)
 8005a5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <std+0x64>)
 8005a60:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <std+0x68>)
 8005a64:	6224      	str	r4, [r4, #32]
 8005a66:	429c      	cmp	r4, r3
 8005a68:	d006      	beq.n	8005a78 <std+0x48>
 8005a6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a6e:	4294      	cmp	r4, r2
 8005a70:	d002      	beq.n	8005a78 <std+0x48>
 8005a72:	33d0      	adds	r3, #208	@ 0xd0
 8005a74:	429c      	cmp	r4, r3
 8005a76:	d105      	bne.n	8005a84 <std+0x54>
 8005a78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a80:	f000 ba46 	b.w	8005f10 <__retarget_lock_init_recursive>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop
 8005a88:	08005c71 	.word	0x08005c71
 8005a8c:	08005c93 	.word	0x08005c93
 8005a90:	08005ccb 	.word	0x08005ccb
 8005a94:	08005cef 	.word	0x08005cef
 8005a98:	200040d0 	.word	0x200040d0

08005a9c <stdio_exit_handler>:
 8005a9c:	4a02      	ldr	r2, [pc, #8]	@ (8005aa8 <stdio_exit_handler+0xc>)
 8005a9e:	4903      	ldr	r1, [pc, #12]	@ (8005aac <stdio_exit_handler+0x10>)
 8005aa0:	4803      	ldr	r0, [pc, #12]	@ (8005ab0 <stdio_exit_handler+0x14>)
 8005aa2:	f000 b869 	b.w	8005b78 <_fwalk_sglue>
 8005aa6:	bf00      	nop
 8005aa8:	20000010 	.word	0x20000010
 8005aac:	0800622d 	.word	0x0800622d
 8005ab0:	20000020 	.word	0x20000020

08005ab4 <cleanup_stdio>:
 8005ab4:	6841      	ldr	r1, [r0, #4]
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <cleanup_stdio+0x34>)
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
 8005abe:	d001      	beq.n	8005ac4 <cleanup_stdio+0x10>
 8005ac0:	f000 fbb4 	bl	800622c <_fflush_r>
 8005ac4:	68a1      	ldr	r1, [r4, #8]
 8005ac6:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <cleanup_stdio+0x38>)
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <cleanup_stdio+0x1e>
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fbad 	bl	800622c <_fflush_r>
 8005ad2:	68e1      	ldr	r1, [r4, #12]
 8005ad4:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <cleanup_stdio+0x3c>)
 8005ad6:	4299      	cmp	r1, r3
 8005ad8:	d004      	beq.n	8005ae4 <cleanup_stdio+0x30>
 8005ada:	4620      	mov	r0, r4
 8005adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae0:	f000 bba4 	b.w	800622c <_fflush_r>
 8005ae4:	bd10      	pop	{r4, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200040d0 	.word	0x200040d0
 8005aec:	20004138 	.word	0x20004138
 8005af0:	200041a0 	.word	0x200041a0

08005af4 <global_stdio_init.part.0>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b24 <global_stdio_init.part.0+0x30>)
 8005af8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b28 <global_stdio_init.part.0+0x34>)
 8005afa:	4a0c      	ldr	r2, [pc, #48]	@ (8005b2c <global_stdio_init.part.0+0x38>)
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	4620      	mov	r0, r4
 8005b00:	2200      	movs	r2, #0
 8005b02:	2104      	movs	r1, #4
 8005b04:	f7ff ff94 	bl	8005a30 <std>
 8005b08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	2109      	movs	r1, #9
 8005b10:	f7ff ff8e 	bl	8005a30 <std>
 8005b14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b18:	2202      	movs	r2, #2
 8005b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b1e:	2112      	movs	r1, #18
 8005b20:	f7ff bf86 	b.w	8005a30 <std>
 8005b24:	20004208 	.word	0x20004208
 8005b28:	200040d0 	.word	0x200040d0
 8005b2c:	08005a9d 	.word	0x08005a9d

08005b30 <__sfp_lock_acquire>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__sfp_lock_acquire+0x8>)
 8005b32:	f000 b9ee 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 8005b36:	bf00      	nop
 8005b38:	20004211 	.word	0x20004211

08005b3c <__sfp_lock_release>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	@ (8005b44 <__sfp_lock_release+0x8>)
 8005b3e:	f000 b9e9 	b.w	8005f14 <__retarget_lock_release_recursive>
 8005b42:	bf00      	nop
 8005b44:	20004211 	.word	0x20004211

08005b48 <__sinit>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	f7ff fff0 	bl	8005b30 <__sfp_lock_acquire>
 8005b50:	6a23      	ldr	r3, [r4, #32]
 8005b52:	b11b      	cbz	r3, 8005b5c <__sinit+0x14>
 8005b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b58:	f7ff bff0 	b.w	8005b3c <__sfp_lock_release>
 8005b5c:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <__sinit+0x28>)
 8005b5e:	6223      	str	r3, [r4, #32]
 8005b60:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <__sinit+0x2c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f5      	bne.n	8005b54 <__sinit+0xc>
 8005b68:	f7ff ffc4 	bl	8005af4 <global_stdio_init.part.0>
 8005b6c:	e7f2      	b.n	8005b54 <__sinit+0xc>
 8005b6e:	bf00      	nop
 8005b70:	08005ab5 	.word	0x08005ab5
 8005b74:	20004208 	.word	0x20004208

08005b78 <_fwalk_sglue>:
 8005b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	4688      	mov	r8, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	2600      	movs	r6, #0
 8005b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b88:	f1b9 0901 	subs.w	r9, r9, #1
 8005b8c:	d505      	bpl.n	8005b9a <_fwalk_sglue+0x22>
 8005b8e:	6824      	ldr	r4, [r4, #0]
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	d1f7      	bne.n	8005b84 <_fwalk_sglue+0xc>
 8005b94:	4630      	mov	r0, r6
 8005b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9a:	89ab      	ldrh	r3, [r5, #12]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d907      	bls.n	8005bb0 <_fwalk_sglue+0x38>
 8005ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	d003      	beq.n	8005bb0 <_fwalk_sglue+0x38>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c0      	blx	r8
 8005bae:	4306      	orrs	r6, r0
 8005bb0:	3568      	adds	r5, #104	@ 0x68
 8005bb2:	e7e9      	b.n	8005b88 <_fwalk_sglue+0x10>

08005bb4 <_puts_r>:
 8005bb4:	6a03      	ldr	r3, [r0, #32]
 8005bb6:	b570      	push	{r4, r5, r6, lr}
 8005bb8:	6884      	ldr	r4, [r0, #8]
 8005bba:	4605      	mov	r5, r0
 8005bbc:	460e      	mov	r6, r1
 8005bbe:	b90b      	cbnz	r3, 8005bc4 <_puts_r+0x10>
 8005bc0:	f7ff ffc2 	bl	8005b48 <__sinit>
 8005bc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bc6:	07db      	lsls	r3, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_puts_r+0x22>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	0598      	lsls	r0, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_puts_r+0x22>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bd2:	f000 f99e 	bl	8005f12 <__retarget_lock_acquire_recursive>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	0719      	lsls	r1, r3, #28
 8005bda:	d502      	bpl.n	8005be2 <_puts_r+0x2e>
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d135      	bne.n	8005c4e <_puts_r+0x9a>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 f8c5 	bl	8005d74 <__swsetup_r>
 8005bea:	b380      	cbz	r0, 8005c4e <_puts_r+0x9a>
 8005bec:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bf2:	07da      	lsls	r2, r3, #31
 8005bf4:	d405      	bmi.n	8005c02 <_puts_r+0x4e>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	059b      	lsls	r3, r3, #22
 8005bfa:	d402      	bmi.n	8005c02 <_puts_r+0x4e>
 8005bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bfe:	f000 f989 	bl	8005f14 <__retarget_lock_release_recursive>
 8005c02:	4628      	mov	r0, r5
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da04      	bge.n	8005c14 <_puts_r+0x60>
 8005c0a:	69a2      	ldr	r2, [r4, #24]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	dc17      	bgt.n	8005c40 <_puts_r+0x8c>
 8005c10:	290a      	cmp	r1, #10
 8005c12:	d015      	beq.n	8005c40 <_puts_r+0x8c>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	7019      	strb	r1, [r3, #0]
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	2900      	cmp	r1, #0
 8005c28:	d1ed      	bne.n	8005c06 <_puts_r+0x52>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da11      	bge.n	8005c52 <_puts_r+0x9e>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	210a      	movs	r1, #10
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 f85f 	bl	8005cf6 <__swbuf_r>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d0d7      	beq.n	8005bec <_puts_r+0x38>
 8005c3c:	250a      	movs	r5, #10
 8005c3e:	e7d7      	b.n	8005bf0 <_puts_r+0x3c>
 8005c40:	4622      	mov	r2, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f857 	bl	8005cf6 <__swbuf_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d1e7      	bne.n	8005c1c <_puts_r+0x68>
 8005c4c:	e7ce      	b.n	8005bec <_puts_r+0x38>
 8005c4e:	3e01      	subs	r6, #1
 8005c50:	e7e4      	b.n	8005c1c <_puts_r+0x68>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	6022      	str	r2, [r4, #0]
 8005c58:	220a      	movs	r2, #10
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e7ee      	b.n	8005c3c <_puts_r+0x88>
	...

08005c60 <puts>:
 8005c60:	4b02      	ldr	r3, [pc, #8]	@ (8005c6c <puts+0xc>)
 8005c62:	4601      	mov	r1, r0
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f7ff bfa5 	b.w	8005bb4 <_puts_r>
 8005c6a:	bf00      	nop
 8005c6c:	2000001c 	.word	0x2000001c

08005c70 <__sread>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	460c      	mov	r4, r1
 8005c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c78:	f000 f8fc 	bl	8005e74 <_read_r>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	bfab      	itete	ge
 8005c80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c82:	89a3      	ldrhlt	r3, [r4, #12]
 8005c84:	181b      	addge	r3, r3, r0
 8005c86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c8a:	bfac      	ite	ge
 8005c8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c8e:	81a3      	strhlt	r3, [r4, #12]
 8005c90:	bd10      	pop	{r4, pc}

08005c92 <__swrite>:
 8005c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c96:	461f      	mov	r7, r3
 8005c98:	898b      	ldrh	r3, [r1, #12]
 8005c9a:	05db      	lsls	r3, r3, #23
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	d505      	bpl.n	8005cb0 <__swrite+0x1e>
 8005ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca8:	2302      	movs	r3, #2
 8005caa:	2200      	movs	r2, #0
 8005cac:	f000 f8d0 	bl	8005e50 <_lseek_r>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cba:	81a3      	strh	r3, [r4, #12]
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc6:	f000 b8e7 	b.w	8005e98 <_write_r>

08005cca <__sseek>:
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	460c      	mov	r4, r1
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 f8bd 	bl	8005e50 <_lseek_r>
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	bf15      	itete	ne
 8005cdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ce2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ce6:	81a3      	strheq	r3, [r4, #12]
 8005ce8:	bf18      	it	ne
 8005cea:	81a3      	strhne	r3, [r4, #12]
 8005cec:	bd10      	pop	{r4, pc}

08005cee <__sclose>:
 8005cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf2:	f000 b89d 	b.w	8005e30 <_close_r>

08005cf6 <__swbuf_r>:
 8005cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b118      	cbz	r0, 8005d08 <__swbuf_r+0x12>
 8005d00:	6a03      	ldr	r3, [r0, #32]
 8005d02:	b90b      	cbnz	r3, 8005d08 <__swbuf_r+0x12>
 8005d04:	f7ff ff20 	bl	8005b48 <__sinit>
 8005d08:	69a3      	ldr	r3, [r4, #24]
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	071a      	lsls	r2, r3, #28
 8005d10:	d501      	bpl.n	8005d16 <__swbuf_r+0x20>
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	b943      	cbnz	r3, 8005d28 <__swbuf_r+0x32>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f82b 	bl	8005d74 <__swsetup_r>
 8005d1e:	b118      	cbz	r0, 8005d28 <__swbuf_r+0x32>
 8005d20:	f04f 37ff 	mov.w	r7, #4294967295
 8005d24:	4638      	mov	r0, r7
 8005d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	6922      	ldr	r2, [r4, #16]
 8005d2c:	1a98      	subs	r0, r3, r2
 8005d2e:	6963      	ldr	r3, [r4, #20]
 8005d30:	b2f6      	uxtb	r6, r6
 8005d32:	4283      	cmp	r3, r0
 8005d34:	4637      	mov	r7, r6
 8005d36:	dc05      	bgt.n	8005d44 <__swbuf_r+0x4e>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 fa76 	bl	800622c <_fflush_r>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1ed      	bne.n	8005d20 <__swbuf_r+0x2a>
 8005d44:	68a3      	ldr	r3, [r4, #8]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	701e      	strb	r6, [r3, #0]
 8005d52:	6962      	ldr	r2, [r4, #20]
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d004      	beq.n	8005d64 <__swbuf_r+0x6e>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d5e1      	bpl.n	8005d24 <__swbuf_r+0x2e>
 8005d60:	2e0a      	cmp	r6, #10
 8005d62:	d1df      	bne.n	8005d24 <__swbuf_r+0x2e>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fa60 	bl	800622c <_fflush_r>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d0d9      	beq.n	8005d24 <__swbuf_r+0x2e>
 8005d70:	e7d6      	b.n	8005d20 <__swbuf_r+0x2a>
	...

08005d74 <__swsetup_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	4b29      	ldr	r3, [pc, #164]	@ (8005e1c <__swsetup_r+0xa8>)
 8005d78:	4605      	mov	r5, r0
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	b118      	cbz	r0, 8005d88 <__swsetup_r+0x14>
 8005d80:	6a03      	ldr	r3, [r0, #32]
 8005d82:	b90b      	cbnz	r3, 8005d88 <__swsetup_r+0x14>
 8005d84:	f7ff fee0 	bl	8005b48 <__sinit>
 8005d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8c:	0719      	lsls	r1, r3, #28
 8005d8e:	d422      	bmi.n	8005dd6 <__swsetup_r+0x62>
 8005d90:	06da      	lsls	r2, r3, #27
 8005d92:	d407      	bmi.n	8005da4 <__swsetup_r+0x30>
 8005d94:	2209      	movs	r2, #9
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d9c:	81a3      	strh	r3, [r4, #12]
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	e033      	b.n	8005e0c <__swsetup_r+0x98>
 8005da4:	0758      	lsls	r0, r3, #29
 8005da6:	d512      	bpl.n	8005dce <__swsetup_r+0x5a>
 8005da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005daa:	b141      	cbz	r1, 8005dbe <__swsetup_r+0x4a>
 8005dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db0:	4299      	cmp	r1, r3
 8005db2:	d002      	beq.n	8005dba <__swsetup_r+0x46>
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f8bd 	bl	8005f34 <_free_r>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6063      	str	r3, [r4, #4]
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f043 0308 	orr.w	r3, r3, #8
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	b94b      	cbnz	r3, 8005dee <__swsetup_r+0x7a>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de4:	d003      	beq.n	8005dee <__swsetup_r+0x7a>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 fa6d 	bl	80062c8 <__smakebuf_r>
 8005dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df2:	f013 0201 	ands.w	r2, r3, #1
 8005df6:	d00a      	beq.n	8005e0e <__swsetup_r+0x9a>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	60a2      	str	r2, [r4, #8]
 8005dfc:	6962      	ldr	r2, [r4, #20]
 8005dfe:	4252      	negs	r2, r2
 8005e00:	61a2      	str	r2, [r4, #24]
 8005e02:	6922      	ldr	r2, [r4, #16]
 8005e04:	b942      	cbnz	r2, 8005e18 <__swsetup_r+0xa4>
 8005e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e0a:	d1c5      	bne.n	8005d98 <__swsetup_r+0x24>
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	0799      	lsls	r1, r3, #30
 8005e10:	bf58      	it	pl
 8005e12:	6962      	ldrpl	r2, [r4, #20]
 8005e14:	60a2      	str	r2, [r4, #8]
 8005e16:	e7f4      	b.n	8005e02 <__swsetup_r+0x8e>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7f7      	b.n	8005e0c <__swsetup_r+0x98>
 8005e1c:	2000001c 	.word	0x2000001c

08005e20 <memset>:
 8005e20:	4402      	add	r2, r0
 8005e22:	4603      	mov	r3, r0
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d100      	bne.n	8005e2a <memset+0xa>
 8005e28:	4770      	bx	lr
 8005e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e2e:	e7f9      	b.n	8005e24 <memset+0x4>

08005e30 <_close_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	@ (8005e4c <_close_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fb fa4b 	bl	80012d6 <_close>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_close_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_close_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	2000420c 	.word	0x2000420c

08005e50 <_lseek_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	@ (8005e70 <_lseek_r+0x20>)
 8005e54:	4604      	mov	r4, r0
 8005e56:	4608      	mov	r0, r1
 8005e58:	4611      	mov	r1, r2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	602a      	str	r2, [r5, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f7fb fa60 	bl	8001324 <_lseek>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_lseek_r+0x1e>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_lseek_r+0x1e>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	2000420c 	.word	0x2000420c

08005e74 <_read_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	@ (8005e94 <_read_r+0x20>)
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	602a      	str	r2, [r5, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fb f9ee 	bl	8001264 <_read>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_read_r+0x1e>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_read_r+0x1e>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	2000420c 	.word	0x2000420c

08005e98 <_write_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	@ (8005eb8 <_write_r+0x20>)
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	602a      	str	r2, [r5, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f7fb f9f9 	bl	800129e <_write>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_write_r+0x1e>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_write_r+0x1e>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	2000420c 	.word	0x2000420c

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	@ (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2000001c 	.word	0x2000001c

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	@ (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	@ (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 fa62 	bl	80063a4 <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	080065f8 	.word	0x080065f8
 8005f04:	080065f8 	.word	0x080065f8
 8005f08:	080065f8 	.word	0x080065f8
 8005f0c:	080065fc 	.word	0x080065fc

08005f10 <__retarget_lock_init_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_acquire_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <__retarget_lock_release_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <memcpy>:
 8005f16:	440a      	add	r2, r1
 8005f18:	4291      	cmp	r1, r2
 8005f1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f1e:	d100      	bne.n	8005f22 <memcpy+0xc>
 8005f20:	4770      	bx	lr
 8005f22:	b510      	push	{r4, lr}
 8005f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f2c:	4291      	cmp	r1, r2
 8005f2e:	d1f9      	bne.n	8005f24 <memcpy+0xe>
 8005f30:	bd10      	pop	{r4, pc}
	...

08005f34 <_free_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4605      	mov	r5, r0
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d041      	beq.n	8005fc0 <_free_r+0x8c>
 8005f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f40:	1f0c      	subs	r4, r1, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfb8      	it	lt
 8005f46:	18e4      	addlt	r4, r4, r3
 8005f48:	f000 f8e0 	bl	800610c <__malloc_lock>
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <_free_r+0x90>)
 8005f4e:	6813      	ldr	r3, [r2, #0]
 8005f50:	b933      	cbnz	r3, 8005f60 <_free_r+0x2c>
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	6014      	str	r4, [r2, #0]
 8005f56:	4628      	mov	r0, r5
 8005f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f5c:	f000 b8dc 	b.w	8006118 <__malloc_unlock>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d908      	bls.n	8005f76 <_free_r+0x42>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf01      	itttt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	1809      	addeq	r1, r1, r0
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	e7ed      	b.n	8005f52 <_free_r+0x1e>
 8005f76:	461a      	mov	r2, r3
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b10b      	cbz	r3, 8005f80 <_free_r+0x4c>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d9fa      	bls.n	8005f76 <_free_r+0x42>
 8005f80:	6811      	ldr	r1, [r2, #0]
 8005f82:	1850      	adds	r0, r2, r1
 8005f84:	42a0      	cmp	r0, r4
 8005f86:	d10b      	bne.n	8005fa0 <_free_r+0x6c>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	4401      	add	r1, r0
 8005f8c:	1850      	adds	r0, r2, r1
 8005f8e:	4283      	cmp	r3, r0
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	d1e0      	bne.n	8005f56 <_free_r+0x22>
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	4408      	add	r0, r1
 8005f9c:	6010      	str	r0, [r2, #0]
 8005f9e:	e7da      	b.n	8005f56 <_free_r+0x22>
 8005fa0:	d902      	bls.n	8005fa8 <_free_r+0x74>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	e7d6      	b.n	8005f56 <_free_r+0x22>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	1821      	adds	r1, r4, r0
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf04      	itt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	bf04      	itt	eq
 8005fb8:	1809      	addeq	r1, r1, r0
 8005fba:	6021      	streq	r1, [r4, #0]
 8005fbc:	6054      	str	r4, [r2, #4]
 8005fbe:	e7ca      	b.n	8005f56 <_free_r+0x22>
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20004218 	.word	0x20004218

08005fc8 <sbrk_aligned>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0f      	ldr	r6, [pc, #60]	@ (8006008 <sbrk_aligned+0x40>)
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b911      	cbnz	r1, 8005fda <sbrk_aligned+0x12>
 8005fd4:	f000 f9d6 	bl	8006384 <_sbrk_r>
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f9d1 	bl	8006384 <_sbrk_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d103      	bne.n	8005fee <sbrk_aligned+0x26>
 8005fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8005fea:	4620      	mov	r0, r4
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	1cc4      	adds	r4, r0, #3
 8005ff0:	f024 0403 	bic.w	r4, r4, #3
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d0f8      	beq.n	8005fea <sbrk_aligned+0x22>
 8005ff8:	1a21      	subs	r1, r4, r0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f9c2 	bl	8006384 <_sbrk_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d1f2      	bne.n	8005fea <sbrk_aligned+0x22>
 8006004:	e7ef      	b.n	8005fe6 <sbrk_aligned+0x1e>
 8006006:	bf00      	nop
 8006008:	20004214 	.word	0x20004214

0800600c <_malloc_r>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	1ccd      	adds	r5, r1, #3
 8006012:	f025 0503 	bic.w	r5, r5, #3
 8006016:	3508      	adds	r5, #8
 8006018:	2d0c      	cmp	r5, #12
 800601a:	bf38      	it	cc
 800601c:	250c      	movcc	r5, #12
 800601e:	2d00      	cmp	r5, #0
 8006020:	4606      	mov	r6, r0
 8006022:	db01      	blt.n	8006028 <_malloc_r+0x1c>
 8006024:	42a9      	cmp	r1, r5
 8006026:	d904      	bls.n	8006032 <_malloc_r+0x26>
 8006028:	230c      	movs	r3, #12
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	2000      	movs	r0, #0
 800602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006108 <_malloc_r+0xfc>
 8006036:	f000 f869 	bl	800610c <__malloc_lock>
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	461c      	mov	r4, r3
 8006040:	bb44      	cbnz	r4, 8006094 <_malloc_r+0x88>
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ffbf 	bl	8005fc8 <sbrk_aligned>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	4604      	mov	r4, r0
 800604e:	d158      	bne.n	8006102 <_malloc_r+0xf6>
 8006050:	f8d8 4000 	ldr.w	r4, [r8]
 8006054:	4627      	mov	r7, r4
 8006056:	2f00      	cmp	r7, #0
 8006058:	d143      	bne.n	80060e2 <_malloc_r+0xd6>
 800605a:	2c00      	cmp	r4, #0
 800605c:	d04b      	beq.n	80060f6 <_malloc_r+0xea>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	eb04 0903 	add.w	r9, r4, r3
 8006068:	f000 f98c 	bl	8006384 <_sbrk_r>
 800606c:	4581      	cmp	r9, r0
 800606e:	d142      	bne.n	80060f6 <_malloc_r+0xea>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	1a6d      	subs	r5, r5, r1
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ffa6 	bl	8005fc8 <sbrk_aligned>
 800607c:	3001      	adds	r0, #1
 800607e:	d03a      	beq.n	80060f6 <_malloc_r+0xea>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	442b      	add	r3, r5
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	bb62      	cbnz	r2, 80060e8 <_malloc_r+0xdc>
 800608e:	f8c8 7000 	str.w	r7, [r8]
 8006092:	e00f      	b.n	80060b4 <_malloc_r+0xa8>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	1b52      	subs	r2, r2, r5
 8006098:	d420      	bmi.n	80060dc <_malloc_r+0xd0>
 800609a:	2a0b      	cmp	r2, #11
 800609c:	d917      	bls.n	80060ce <_malloc_r+0xc2>
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	6025      	str	r5, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	6059      	strne	r1, [r3, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	bf08      	it	eq
 80060ac:	f8c8 1000 	streq.w	r1, [r8]
 80060b0:	5162      	str	r2, [r4, r5]
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f82f 	bl	8006118 <__malloc_unlock>
 80060ba:	f104 000b 	add.w	r0, r4, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	f020 0007 	bic.w	r0, r0, #7
 80060c4:	1ac2      	subs	r2, r0, r3
 80060c6:	bf1c      	itt	ne
 80060c8:	1a1b      	subne	r3, r3, r0
 80060ca:	50a3      	strne	r3, [r4, r2]
 80060cc:	e7af      	b.n	800602e <_malloc_r+0x22>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	bf0c      	ite	eq
 80060d4:	f8c8 2000 	streq.w	r2, [r8]
 80060d8:	605a      	strne	r2, [r3, #4]
 80060da:	e7eb      	b.n	80060b4 <_malloc_r+0xa8>
 80060dc:	4623      	mov	r3, r4
 80060de:	6864      	ldr	r4, [r4, #4]
 80060e0:	e7ae      	b.n	8006040 <_malloc_r+0x34>
 80060e2:	463c      	mov	r4, r7
 80060e4:	687f      	ldr	r7, [r7, #4]
 80060e6:	e7b6      	b.n	8006056 <_malloc_r+0x4a>
 80060e8:	461a      	mov	r2, r3
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d1fb      	bne.n	80060e8 <_malloc_r+0xdc>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e7de      	b.n	80060b4 <_malloc_r+0xa8>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 f80c 	bl	8006118 <__malloc_unlock>
 8006100:	e794      	b.n	800602c <_malloc_r+0x20>
 8006102:	6005      	str	r5, [r0, #0]
 8006104:	e7d6      	b.n	80060b4 <_malloc_r+0xa8>
 8006106:	bf00      	nop
 8006108:	20004218 	.word	0x20004218

0800610c <__malloc_lock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_lock+0x8>)
 800610e:	f7ff bf00 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20004210 	.word	0x20004210

08006118 <__malloc_unlock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_unlock+0x8>)
 800611a:	f7ff befb 	b.w	8005f14 <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20004210 	.word	0x20004210

08006124 <__sflush_r>:
 8006124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	0716      	lsls	r6, r2, #28
 800612e:	4605      	mov	r5, r0
 8006130:	460c      	mov	r4, r1
 8006132:	d454      	bmi.n	80061de <__sflush_r+0xba>
 8006134:	684b      	ldr	r3, [r1, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dc02      	bgt.n	8006140 <__sflush_r+0x1c>
 800613a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	dd48      	ble.n	80061d2 <__sflush_r+0xae>
 8006140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006142:	2e00      	cmp	r6, #0
 8006144:	d045      	beq.n	80061d2 <__sflush_r+0xae>
 8006146:	2300      	movs	r3, #0
 8006148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800614c:	682f      	ldr	r7, [r5, #0]
 800614e:	6a21      	ldr	r1, [r4, #32]
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	d030      	beq.n	80061b6 <__sflush_r+0x92>
 8006154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	0759      	lsls	r1, r3, #29
 800615a:	d505      	bpl.n	8006168 <__sflush_r+0x44>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006162:	b10b      	cbz	r3, 8006168 <__sflush_r+0x44>
 8006164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	2300      	movs	r3, #0
 800616a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800616c:	6a21      	ldr	r1, [r4, #32]
 800616e:	4628      	mov	r0, r5
 8006170:	47b0      	blx	r6
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	d106      	bne.n	8006186 <__sflush_r+0x62>
 8006178:	6829      	ldr	r1, [r5, #0]
 800617a:	291d      	cmp	r1, #29
 800617c:	d82b      	bhi.n	80061d6 <__sflush_r+0xb2>
 800617e:	4a2a      	ldr	r2, [pc, #168]	@ (8006228 <__sflush_r+0x104>)
 8006180:	410a      	asrs	r2, r1
 8006182:	07d6      	lsls	r6, r2, #31
 8006184:	d427      	bmi.n	80061d6 <__sflush_r+0xb2>
 8006186:	2200      	movs	r2, #0
 8006188:	6062      	str	r2, [r4, #4]
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	6922      	ldr	r2, [r4, #16]
 800618e:	6022      	str	r2, [r4, #0]
 8006190:	d504      	bpl.n	800619c <__sflush_r+0x78>
 8006192:	1c42      	adds	r2, r0, #1
 8006194:	d101      	bne.n	800619a <__sflush_r+0x76>
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	b903      	cbnz	r3, 800619c <__sflush_r+0x78>
 800619a:	6560      	str	r0, [r4, #84]	@ 0x54
 800619c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800619e:	602f      	str	r7, [r5, #0]
 80061a0:	b1b9      	cbz	r1, 80061d2 <__sflush_r+0xae>
 80061a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061a6:	4299      	cmp	r1, r3
 80061a8:	d002      	beq.n	80061b0 <__sflush_r+0x8c>
 80061aa:	4628      	mov	r0, r5
 80061ac:	f7ff fec2 	bl	8005f34 <_free_r>
 80061b0:	2300      	movs	r3, #0
 80061b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b4:	e00d      	b.n	80061d2 <__sflush_r+0xae>
 80061b6:	2301      	movs	r3, #1
 80061b8:	4628      	mov	r0, r5
 80061ba:	47b0      	blx	r6
 80061bc:	4602      	mov	r2, r0
 80061be:	1c50      	adds	r0, r2, #1
 80061c0:	d1c9      	bne.n	8006156 <__sflush_r+0x32>
 80061c2:	682b      	ldr	r3, [r5, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0c6      	beq.n	8006156 <__sflush_r+0x32>
 80061c8:	2b1d      	cmp	r3, #29
 80061ca:	d001      	beq.n	80061d0 <__sflush_r+0xac>
 80061cc:	2b16      	cmp	r3, #22
 80061ce:	d11e      	bne.n	800620e <__sflush_r+0xea>
 80061d0:	602f      	str	r7, [r5, #0]
 80061d2:	2000      	movs	r0, #0
 80061d4:	e022      	b.n	800621c <__sflush_r+0xf8>
 80061d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061da:	b21b      	sxth	r3, r3
 80061dc:	e01b      	b.n	8006216 <__sflush_r+0xf2>
 80061de:	690f      	ldr	r7, [r1, #16]
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	d0f6      	beq.n	80061d2 <__sflush_r+0xae>
 80061e4:	0793      	lsls	r3, r2, #30
 80061e6:	680e      	ldr	r6, [r1, #0]
 80061e8:	bf08      	it	eq
 80061ea:	694b      	ldreq	r3, [r1, #20]
 80061ec:	600f      	str	r7, [r1, #0]
 80061ee:	bf18      	it	ne
 80061f0:	2300      	movne	r3, #0
 80061f2:	eba6 0807 	sub.w	r8, r6, r7
 80061f6:	608b      	str	r3, [r1, #8]
 80061f8:	f1b8 0f00 	cmp.w	r8, #0
 80061fc:	dde9      	ble.n	80061d2 <__sflush_r+0xae>
 80061fe:	6a21      	ldr	r1, [r4, #32]
 8006200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006202:	4643      	mov	r3, r8
 8006204:	463a      	mov	r2, r7
 8006206:	4628      	mov	r0, r5
 8006208:	47b0      	blx	r6
 800620a:	2800      	cmp	r0, #0
 800620c:	dc08      	bgt.n	8006220 <__sflush_r+0xfc>
 800620e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006216:	81a3      	strh	r3, [r4, #12]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006220:	4407      	add	r7, r0
 8006222:	eba8 0800 	sub.w	r8, r8, r0
 8006226:	e7e7      	b.n	80061f8 <__sflush_r+0xd4>
 8006228:	dfbffffe 	.word	0xdfbffffe

0800622c <_fflush_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	690b      	ldr	r3, [r1, #16]
 8006230:	4605      	mov	r5, r0
 8006232:	460c      	mov	r4, r1
 8006234:	b913      	cbnz	r3, 800623c <_fflush_r+0x10>
 8006236:	2500      	movs	r5, #0
 8006238:	4628      	mov	r0, r5
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	b118      	cbz	r0, 8006246 <_fflush_r+0x1a>
 800623e:	6a03      	ldr	r3, [r0, #32]
 8006240:	b90b      	cbnz	r3, 8006246 <_fflush_r+0x1a>
 8006242:	f7ff fc81 	bl	8005b48 <__sinit>
 8006246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f3      	beq.n	8006236 <_fflush_r+0xa>
 800624e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006250:	07d0      	lsls	r0, r2, #31
 8006252:	d404      	bmi.n	800625e <_fflush_r+0x32>
 8006254:	0599      	lsls	r1, r3, #22
 8006256:	d402      	bmi.n	800625e <_fflush_r+0x32>
 8006258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625a:	f7ff fe5a 	bl	8005f12 <__retarget_lock_acquire_recursive>
 800625e:	4628      	mov	r0, r5
 8006260:	4621      	mov	r1, r4
 8006262:	f7ff ff5f 	bl	8006124 <__sflush_r>
 8006266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006268:	07da      	lsls	r2, r3, #31
 800626a:	4605      	mov	r5, r0
 800626c:	d4e4      	bmi.n	8006238 <_fflush_r+0xc>
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	059b      	lsls	r3, r3, #22
 8006272:	d4e1      	bmi.n	8006238 <_fflush_r+0xc>
 8006274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006276:	f7ff fe4d 	bl	8005f14 <__retarget_lock_release_recursive>
 800627a:	e7dd      	b.n	8006238 <_fflush_r+0xc>

0800627c <__swhatbuf_r>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	460c      	mov	r4, r1
 8006280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006284:	2900      	cmp	r1, #0
 8006286:	b096      	sub	sp, #88	@ 0x58
 8006288:	4615      	mov	r5, r2
 800628a:	461e      	mov	r6, r3
 800628c:	da0d      	bge.n	80062aa <__swhatbuf_r+0x2e>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	bf14      	ite	ne
 800629a:	2340      	movne	r3, #64	@ 0x40
 800629c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062a0:	2000      	movs	r0, #0
 80062a2:	6031      	str	r1, [r6, #0]
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	b016      	add	sp, #88	@ 0x58
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	466a      	mov	r2, sp
 80062ac:	f000 f848 	bl	8006340 <_fstat_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dbec      	blt.n	800628e <__swhatbuf_r+0x12>
 80062b4:	9901      	ldr	r1, [sp, #4]
 80062b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062be:	4259      	negs	r1, r3
 80062c0:	4159      	adcs	r1, r3
 80062c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062c6:	e7eb      	b.n	80062a0 <__swhatbuf_r+0x24>

080062c8 <__smakebuf_r>:
 80062c8:	898b      	ldrh	r3, [r1, #12]
 80062ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062cc:	079d      	lsls	r5, r3, #30
 80062ce:	4606      	mov	r6, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	d507      	bpl.n	80062e4 <__smakebuf_r+0x1c>
 80062d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	2301      	movs	r3, #1
 80062de:	6163      	str	r3, [r4, #20]
 80062e0:	b003      	add	sp, #12
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	ab01      	add	r3, sp, #4
 80062e6:	466a      	mov	r2, sp
 80062e8:	f7ff ffc8 	bl	800627c <__swhatbuf_r>
 80062ec:	9f00      	ldr	r7, [sp, #0]
 80062ee:	4605      	mov	r5, r0
 80062f0:	4639      	mov	r1, r7
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff fe8a 	bl	800600c <_malloc_r>
 80062f8:	b948      	cbnz	r0, 800630e <__smakebuf_r+0x46>
 80062fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fe:	059a      	lsls	r2, r3, #22
 8006300:	d4ee      	bmi.n	80062e0 <__smakebuf_r+0x18>
 8006302:	f023 0303 	bic.w	r3, r3, #3
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	e7e2      	b.n	80062d4 <__smakebuf_r+0xc>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	6020      	str	r0, [r4, #0]
 8006312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006316:	81a3      	strh	r3, [r4, #12]
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800631e:	b15b      	cbz	r3, 8006338 <__smakebuf_r+0x70>
 8006320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f81d 	bl	8006364 <_isatty_r>
 800632a:	b128      	cbz	r0, 8006338 <__smakebuf_r+0x70>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	431d      	orrs	r5, r3
 800633c:	81a5      	strh	r5, [r4, #12]
 800633e:	e7cf      	b.n	80062e0 <__smakebuf_r+0x18>

08006340 <_fstat_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	@ (8006360 <_fstat_r+0x20>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	f7fa ffce 	bl	80012ee <_fstat>
 8006352:	1c43      	adds	r3, r0, #1
 8006354:	d102      	bne.n	800635c <_fstat_r+0x1c>
 8006356:	682b      	ldr	r3, [r5, #0]
 8006358:	b103      	cbz	r3, 800635c <_fstat_r+0x1c>
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	2000420c 	.word	0x2000420c

08006364 <_isatty_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d06      	ldr	r5, [pc, #24]	@ (8006380 <_isatty_r+0x1c>)
 8006368:	2300      	movs	r3, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa ffcd 	bl	800130e <_isatty>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_isatty_r+0x1a>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_isatty_r+0x1a>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	2000420c 	.word	0x2000420c

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	@ (80063a0 <_sbrk_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fa ffd6 	bl	8001340 <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	2000420c 	.word	0x2000420c

080063a4 <_init>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr

080063b0 <_fini>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr
