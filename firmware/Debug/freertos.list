
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  0800545c  0800545c  0000645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005464  08005464  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005464  08005464  00006464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005468  08005468  00006468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800546c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041a0  2000006c  080054d8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000420c  080054d8  0000720c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed6d  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002964  00000000  00000000  00015e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00018770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b9  00000000  00000000  00019448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028336  00000000  00000000  00019e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bc2  00000000  00000000  00042137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1fc5  00000000  00000000  00052cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144cbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  00144d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014857c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080053c8 	.word	0x080053c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080053c8 	.word	0x080053c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000090 	.word	0x20000090
 8000530:	200000e4 	.word	0x200000e4

08000534 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b08e      	sub	sp, #56	@ 0x38
 8000538:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_FREERTOS_Init+0x58>)
 800053c:	f107 041c 	add.w	r4, r7, #28
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f003 f838 	bl	80035ca <osThreadCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a0c      	ldr	r2, [pc, #48]	@ (8000590 <MX_FREERTOS_Init+0x5c>)
 800055e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTASK */
  osThreadDef(LEDTASK, LEDtask, osPriorityNormal, 0, 128);
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_FREERTOS_Init+0x60>)
 8000562:	463c      	mov	r4, r7
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTASKHandle = osThreadCreate(osThread(LEDTASK), NULL);
 8000572:	463b      	mov	r3, r7
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 f827 	bl	80035ca <osThreadCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a06      	ldr	r2, [pc, #24]	@ (8000598 <MX_FREERTOS_Init+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000582:	bf00      	nop
 8000584:	3738      	adds	r7, #56	@ 0x38
 8000586:	46bd      	mov	sp, r7
 8000588:	bdb0      	pop	{r4, r5, r7, pc}
 800058a:	bf00      	nop
 800058c:	080053ec 	.word	0x080053ec
 8000590:	20000088 	.word	0x20000088
 8000594:	08005410 	.word	0x08005410
 8000598:	2000008c 	.word	0x2000008c

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f003 f85c 	bl	8003662 <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <LEDtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDtask */
void LEDtask(void const * argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDtask */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 80005b4:	2102      	movs	r1, #2
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <LEDtask+0x20>)
 80005b8:	f001 f9fd 	bl	80019b6 <HAL_GPIO_TogglePin>
	    printf("LED toggled!\r\n");             // Message série (si printf bien redirigé)
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <LEDtask+0x24>)
 80005be:	f004 fb6f 	bl	8004ca0 <puts>
	    vTaskDelay(100 / portTICK_PERIOD_MS);   // Attente de 100 ms
 80005c2:	2064      	movs	r0, #100	@ 0x64
 80005c4:	f003 fab4 	bl	8003b30 <vTaskDelay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 80005c8:	bf00      	nop
 80005ca:	e7f3      	b.n	80005b4 <LEDtask+0x8>
 80005cc:	40022000 	.word	0x40022000
 80005d0:	0800542c 	.word	0x0800542c

080005d4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b090      	sub	sp, #64	@ 0x40
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ea:	4bad      	ldr	r3, [pc, #692]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4aac      	ldr	r2, [pc, #688]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4baa      	ldr	r3, [pc, #680]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0310 	and.w	r3, r3, #16
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000602:	4ba7      	ldr	r3, [pc, #668]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4aa6      	ldr	r2, [pc, #664]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4ba4      	ldr	r3, [pc, #656]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4ba1      	ldr	r3, [pc, #644]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4aa0      	ldr	r2, [pc, #640]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b9e      	ldr	r3, [pc, #632]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	623b      	str	r3, [r7, #32]
 8000630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b9b      	ldr	r3, [pc, #620]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a9a      	ldr	r2, [pc, #616]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b98      	ldr	r3, [pc, #608]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b95      	ldr	r3, [pc, #596]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a94      	ldr	r2, [pc, #592]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b92      	ldr	r3, [pc, #584]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b8f      	ldr	r3, [pc, #572]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a8e      	ldr	r2, [pc, #568]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b8c      	ldr	r3, [pc, #560]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b89      	ldr	r3, [pc, #548]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a88      	ldr	r2, [pc, #544]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b86      	ldr	r3, [pc, #536]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000692:	4b83      	ldr	r3, [pc, #524]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a82      	ldr	r2, [pc, #520]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b80      	ldr	r3, [pc, #512]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006aa:	4b7d      	ldr	r3, [pc, #500]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a7c      	ldr	r2, [pc, #496]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b7a      	ldr	r3, [pc, #488]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b77      	ldr	r3, [pc, #476]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a76      	ldr	r2, [pc, #472]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006c8:	f043 0320 	orr.w	r3, r3, #32
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b74      	ldr	r3, [pc, #464]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b71      	ldr	r3, [pc, #452]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a70      	ldr	r2, [pc, #448]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b6e      	ldr	r3, [pc, #440]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2120      	movs	r1, #32
 80006f6:	486b      	ldr	r0, [pc, #428]	@ (80008a4 <MX_GPIO_Init+0x2d0>)
 80006f8:	f001 f944 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000702:	4869      	ldr	r0, [pc, #420]	@ (80008a8 <MX_GPIO_Init+0x2d4>)
 8000704:	f001 f93e 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2108      	movs	r1, #8
 800070c:	4867      	ldr	r0, [pc, #412]	@ (80008ac <MX_GPIO_Init+0x2d8>)
 800070e:	f001 f939 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000718:	4865      	ldr	r0, [pc, #404]	@ (80008b0 <MX_GPIO_Init+0x2dc>)
 800071a:	f001 f933 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	21c8      	movs	r1, #200	@ 0xc8
 8000722:	4864      	ldr	r0, [pc, #400]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 8000724:	f001 f92e 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000738:	230e      	movs	r3, #14
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000740:	4619      	mov	r1, r3
 8000742:	485d      	ldr	r0, [pc, #372]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 8000744:	f000 ff72 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000748:	2308      	movs	r3, #8
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000758:	4619      	mov	r1, r3
 800075a:	4857      	ldr	r0, [pc, #348]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 800075c:	f000 ff66 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000760:	2304      	movs	r3, #4
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000770:	2309      	movs	r3, #9
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000778:	4619      	mov	r1, r3
 800077a:	484f      	ldr	r0, [pc, #316]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 800077c:	f000 ff56 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000780:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000792:	230b      	movs	r3, #11
 8000794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800079a:	4619      	mov	r1, r3
 800079c:	4845      	ldr	r0, [pc, #276]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 800079e:	f000 ff45 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007a2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b4:	230c      	movs	r3, #12
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	483e      	ldr	r0, [pc, #248]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 80007c0:	f000 ff34 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d6:	2304      	movs	r3, #4
 80007d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007de:	4619      	mov	r1, r3
 80007e0:	4836      	ldr	r0, [pc, #216]	@ (80008bc <MX_GPIO_Init+0x2e8>)
 80007e2:	f000 ff23 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007e6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007f8:	230a      	movs	r3, #10
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000800:	4619      	mov	r1, r3
 8000802:	482e      	ldr	r0, [pc, #184]	@ (80008bc <MX_GPIO_Init+0x2e8>)
 8000804:	f000 ff12 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000820:	4619      	mov	r1, r3
 8000822:	4826      	ldr	r0, [pc, #152]	@ (80008bc <MX_GPIO_Init+0x2e8>)
 8000824:	f000 ff02 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000838:	2308      	movs	r3, #8
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000840:	4619      	mov	r1, r3
 8000842:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <MX_GPIO_Init+0x2d0>)
 8000844:	f000 fef2 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000848:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800085a:	230c      	movs	r3, #12
 800085c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <MX_GPIO_Init+0x2ec>)
 8000866:	f000 fee1 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800086a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800087c:	2301      	movs	r3, #1
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	480f      	ldr	r0, [pc, #60]	@ (80008c4 <MX_GPIO_Init+0x2f0>)
 8000888:	f000 fed0 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800088c:	2360      	movs	r3, #96	@ 0x60
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800089c:	230d      	movs	r3, #13
 800089e:	e013      	b.n	80008c8 <MX_GPIO_Init+0x2f4>
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40022000 	.word	0x40022000
 80008ac:	40022800 	.word	0x40022800
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40021800 	.word	0x40021800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	48bc      	ldr	r0, [pc, #752]	@ (8000bc4 <MX_GPIO_Init+0x5f0>)
 80008d2:	f000 feab 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008e6:	230a      	movs	r3, #10
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	48b5      	ldr	r0, [pc, #724]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 80008f2:	f000 fe9b 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008f6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000908:	230c      	movs	r3, #12
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800090c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000910:	4619      	mov	r1, r3
 8000912:	48ae      	ldr	r0, [pc, #696]	@ (8000bcc <MX_GPIO_Init+0x5f8>)
 8000914:	f000 fe8a 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000918:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092a:	230e      	movs	r3, #14
 800092c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800092e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000932:	4619      	mov	r1, r3
 8000934:	48a6      	ldr	r0, [pc, #664]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000936:	f000 fe79 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800093a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094c:	4619      	mov	r1, r3
 800094e:	48a0      	ldr	r0, [pc, #640]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000950:	f000 fe6c 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000958:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000966:	4619      	mov	r1, r3
 8000968:	489a      	ldr	r0, [pc, #616]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 800096a:	f000 fe5f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800096e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000980:	230c      	movs	r3, #12
 8000982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000988:	4619      	mov	r1, r3
 800098a:	4892      	ldr	r0, [pc, #584]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 800098c:	f000 fe4e 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009aa:	4619      	mov	r1, r3
 80009ac:	488a      	ldr	r0, [pc, #552]	@ (8000bd8 <MX_GPIO_Init+0x604>)
 80009ae:	f000 fe3d 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009b2:	23f0      	movs	r3, #240	@ 0xf0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009c2:	230a      	movs	r3, #10
 80009c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ca:	4619      	mov	r1, r3
 80009cc:	4883      	ldr	r0, [pc, #524]	@ (8000bdc <MX_GPIO_Init+0x608>)
 80009ce:	f000 fe2d 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009d2:	23f7      	movs	r3, #247	@ 0xf7
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009e2:	230e      	movs	r3, #14
 80009e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	487c      	ldr	r0, [pc, #496]	@ (8000be0 <MX_GPIO_Init+0x60c>)
 80009ee:	f000 fe1d 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a04:	2309      	movs	r3, #9
 8000a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	486f      	ldr	r0, [pc, #444]	@ (8000bcc <MX_GPIO_Init+0x5f8>)
 8000a10:	f000 fe0c 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a26:	230a      	movs	r3, #10
 8000a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4866      	ldr	r0, [pc, #408]	@ (8000bcc <MX_GPIO_Init+0x5f8>)
 8000a32:	f000 fdfb 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4861      	ldr	r0, [pc, #388]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 8000a4e:	f000 fded 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a52:	2308      	movs	r3, #8
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a62:	230d      	movs	r3, #13
 8000a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4859      	ldr	r0, [pc, #356]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 8000a6e:	f000 fddd 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a72:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4854      	ldr	r0, [pc, #336]	@ (8000bdc <MX_GPIO_Init+0x608>)
 8000a8c:	f000 fdce 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	484f      	ldr	r0, [pc, #316]	@ (8000be4 <MX_GPIO_Init+0x610>)
 8000aa6:	f000 fdc1 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aaa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abc:	230c      	movs	r3, #12
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4848      	ldr	r0, [pc, #288]	@ (8000be8 <MX_GPIO_Init+0x614>)
 8000ac8:	f000 fdb0 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000acc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ade:	230e      	movs	r3, #14
 8000ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483c      	ldr	r0, [pc, #240]	@ (8000bdc <MX_GPIO_Init+0x608>)
 8000aea:	f000 fd9f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000aee:	2308      	movs	r3, #8
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b02:	4619      	mov	r1, r3
 8000b04:	4836      	ldr	r0, [pc, #216]	@ (8000be0 <MX_GPIO_Init+0x60c>)
 8000b06:	f000 fd91 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b1c:	230d      	movs	r3, #13
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4829      	ldr	r0, [pc, #164]	@ (8000bcc <MX_GPIO_Init+0x5f8>)
 8000b28:	f000 fd80 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4825      	ldr	r0, [pc, #148]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 8000b40:	f000 fd74 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b44:	2304      	movs	r3, #4
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b54:	230c      	movs	r3, #12
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481d      	ldr	r0, [pc, #116]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 8000b60:	f000 fd64 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b64:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	481c      	ldr	r0, [pc, #112]	@ (8000bec <MX_GPIO_Init+0x618>)
 8000b7a:	f000 fd57 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0x618>)
 8000b98:	f000 fd48 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b9c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bae:	230d      	movs	r3, #13
 8000bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_GPIO_Init+0x618>)
 8000bba:	f000 fd37 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e016      	b.n	8000bf0 <MX_GPIO_Init+0x61c>
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40022400 	.word	0x40022400
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40022000 	.word	0x40022000
 8000be0:	40022800 	.word	0x40022800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40021c00 	.word	0x40021c00
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	48a4      	ldr	r0, [pc, #656]	@ (8000e9c <MX_GPIO_Init+0x8c8>)
 8000c0a:	f000 fd0f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	489e      	ldr	r0, [pc, #632]	@ (8000e9c <MX_GPIO_Init+0x8c8>)
 8000c24:	f000 fd02 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	4896      	ldr	r0, [pc, #600]	@ (8000ea0 <MX_GPIO_Init+0x8cc>)
 8000c46:	f000 fcf1 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	488e      	ldr	r0, [pc, #568]	@ (8000e9c <MX_GPIO_Init+0x8c8>)
 8000c62:	f000 fce3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c66:	23c0      	movs	r3, #192	@ 0xc0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c76:	2308      	movs	r3, #8
 8000c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4888      	ldr	r0, [pc, #544]	@ (8000ea4 <MX_GPIO_Init+0x8d0>)
 8000c82:	f000 fcd3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c86:	2310      	movs	r3, #16
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4881      	ldr	r0, [pc, #516]	@ (8000ea8 <MX_GPIO_Init+0x8d4>)
 8000ca2:	f000 fcc3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ca6:	2328      	movs	r3, #40	@ 0x28
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4879      	ldr	r0, [pc, #484]	@ (8000ea8 <MX_GPIO_Init+0x8d4>)
 8000cc2:	f000 fcb3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000cc6:	23c8      	movs	r3, #200	@ 0xc8
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4873      	ldr	r0, [pc, #460]	@ (8000eac <MX_GPIO_Init+0x8d8>)
 8000cde:	f000 fca5 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000ce2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	486e      	ldr	r0, [pc, #440]	@ (8000eb0 <MX_GPIO_Init+0x8dc>)
 8000cf8:	f000 fc98 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	4863      	ldr	r0, [pc, #396]	@ (8000ea4 <MX_GPIO_Init+0x8d0>)
 8000d18:	f000 fc88 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	485b      	ldr	r0, [pc, #364]	@ (8000ea4 <MX_GPIO_Init+0x8d0>)
 8000d38:	f000 fc78 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d3c:	2332      	movs	r3, #50	@ 0x32
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4853      	ldr	r0, [pc, #332]	@ (8000ea4 <MX_GPIO_Init+0x8d0>)
 8000d58:	f000 fc68 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	484f      	ldr	r0, [pc, #316]	@ (8000eb4 <MX_GPIO_Init+0x8e0>)
 8000d78:	f000 fc58 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d7c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d8e:	2309      	movs	r3, #9
 8000d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	4847      	ldr	r0, [pc, #284]	@ (8000eb8 <MX_GPIO_Init+0x8e4>)
 8000d9a:	f000 fc47 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	483e      	ldr	r0, [pc, #248]	@ (8000eac <MX_GPIO_Init+0x8d8>)
 8000db2:	f000 fc3b 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000db6:	2382      	movs	r3, #130	@ 0x82
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4833      	ldr	r0, [pc, #204]	@ (8000ea0 <MX_GPIO_Init+0x8cc>)
 8000dd2:	f000 fc2b 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	482d      	ldr	r0, [pc, #180]	@ (8000ea0 <MX_GPIO_Init+0x8cc>)
 8000dea:	f000 fc1f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000dee:	2350      	movs	r3, #80	@ 0x50
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dfe:	230d      	movs	r3, #13
 8000e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4825      	ldr	r0, [pc, #148]	@ (8000ea0 <MX_GPIO_Init+0x8cc>)
 8000e0a:	f000 fc0f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e20:	2304      	movs	r3, #4
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481f      	ldr	r0, [pc, #124]	@ (8000ea8 <MX_GPIO_Init+0x8d4>)
 8000e2c:	f000 fbfe 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000e30:	2320      	movs	r3, #32
 8000e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e40:	230a      	movs	r3, #10
 8000e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4815      	ldr	r0, [pc, #84]	@ (8000ea0 <MX_GPIO_Init+0x8cc>)
 8000e4c:	f000 fbee 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e50:	2340      	movs	r3, #64	@ 0x40
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e60:	2309      	movs	r3, #9
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <MX_GPIO_Init+0x8d4>)
 8000e6c:	f000 fbde 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e70:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e82:	2305      	movs	r3, #5
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_GPIO_Init+0x8e0>)
 8000e8e:	f000 fbcd 	bl	800162c <HAL_GPIO_Init>

}
 8000e92:	bf00      	nop
 8000e94:	3740      	adds	r7, #64	@ 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40021c00 	.word	0x40021c00
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,
 8000ec4:	1d39      	adds	r1, r7, #4
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <__io_putchar+0x20>)
 8000ece:	f001 fea5 	bl	8002c1c <HAL_UART_Transmit>
	HAL_MAX_DELAY); return ch; }
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200002e8 	.word	0x200002e8

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fa5f 	bl	80013a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f80a 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f7ff fb72 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ef0:	f000 f97e 	bl	80011f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ef4:	f7ff fb1e 	bl	8000534 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ef8:	f002 fb60 	bl	80035bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <main+0x1c>

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	@ 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0320 	add.w	r3, r7, #32
 8000f0a:	2230      	movs	r2, #48	@ 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 ffa6 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f28:	4a29      	ldr	r2, [pc, #164]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <SystemClock_Config+0xd0>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a24      	ldr	r2, [pc, #144]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <SystemClock_Config+0xd4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f54:	2302      	movs	r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f60:	2302      	movs	r3, #2
 8000f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f6c:	23d8      	movs	r3, #216	@ 0xd8
 8000f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fd85 	bl	8001a8c <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f88:	f000 f826 	bl	8000fd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f8c:	f000 fd2e 	bl	80019ec <HAL_PWREx_EnableOverDrive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f96:	f000 f81f 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000faa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f80b 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fc4:	f000 f808 	bl	8000fd8 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	@ 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_MspInit+0x4c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_MspInit+0x4c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_MspInit+0x4c>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	f06f 0001 	mvn.w	r0, #1
 8001022:	f000 fada 	bl	80015da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f9d7 	bl	8001420 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001072:	f003 f89b 	bl	80041ac <xTaskGetSchedulerState>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d001      	beq.n	8001080 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800107c:	f003 fabc 	bl	80045f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff feef 	bl	8000ebc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
  }
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 feb4 	bl	8004efc <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20050000 	.word	0x20050000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200002e4 	.word	0x200002e4
 80011c8:	20004210 	.word	0x20004210

080011cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 80011f6:	4a15      	ldr	r2, [pc, #84]	@ (800124c <MX_USART1_UART_Init+0x5c>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_USART1_UART_Init+0x58>)
 8001234:	f001 fca4 	bl	8002b80 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123e:	f7ff fecb 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002e8 	.word	0x200002e8
 800124c:	40011000 	.word	0x40011000

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0ac      	sub	sp, #176	@ 0xb0
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2284      	movs	r2, #132	@ 0x84
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fdf5 	bl	8004e60 <memset>
  if(uartHandle->Instance==USART1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a32      	ldr	r2, [pc, #200]	@ (8001344 <HAL_UART_MspInit+0xf4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d15c      	bne.n	800133a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001280:	2340      	movs	r3, #64	@ 0x40
 8001282:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f001 f887 	bl	80023a0 <HAL_RCCEx_PeriphCLKConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001298:	f7ff fe9e 	bl	8000fd8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	4a29      	ldr	r2, [pc, #164]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_UART_MspInit+0xf8>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fc:	2307      	movs	r3, #7
 80012fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	@ (800134c <HAL_UART_MspInit+0xfc>)
 800130a:	f000 f98f 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001332:	4619      	mov	r1, r3
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <HAL_UART_MspInit+0x100>)
 8001336:	f000 f979 	bl	800162c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	37b0      	adds	r7, #176	@ 0xb0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400
 8001350:	40020000 	.word	0x40020000

08001354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800138c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001358:	f7ff ff38 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	@ (80013a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001382:	f003 fdc1 	bl	8004f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001386:	f7ff fdab 	bl	8000ee0 <main>
  bx  lr    
 800138a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001398:	0800546c 	.word	0x0800546c
  ldr r2, =_sbss
 800139c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013a0:	2000420c 	.word	0x2000420c

080013a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC_IRQHandler>

080013a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f000 f90a 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b0:	200f      	movs	r0, #15
 80013b2:	f000 f805 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fe15 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f917 	bl	8001612 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f8ed 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000370 	.word	0x20000370

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000370 	.word	0x20000370

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	4313      	orrs	r3, r2
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	05fa0000 	.word	0x05fa0000

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5c 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb0 	bl	8001580 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e175      	b.n	8001938 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 8164 	bne.w	8001932 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d005      	beq.n	8001682 <HAL_GPIO_Init+0x56>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d130      	bne.n	80016e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d017      	beq.n	8001720 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d123      	bne.n	8001774 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80be 	beq.w	8001932 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b66      	ldr	r3, [pc, #408]	@ (8001950 <HAL_GPIO_Init+0x324>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a65      	ldr	r2, [pc, #404]	@ (8001950 <HAL_GPIO_Init+0x324>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b63      	ldr	r3, [pc, #396]	@ (8001950 <HAL_GPIO_Init+0x324>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ce:	4a61      	ldr	r2, [pc, #388]	@ (8001954 <HAL_GPIO_Init+0x328>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <HAL_GPIO_Init+0x32c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d037      	beq.n	800186a <HAL_GPIO_Init+0x23e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a57      	ldr	r2, [pc, #348]	@ (800195c <HAL_GPIO_Init+0x330>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_Init+0x23a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a56      	ldr	r2, [pc, #344]	@ (8001960 <HAL_GPIO_Init+0x334>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x236>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a55      	ldr	r2, [pc, #340]	@ (8001964 <HAL_GPIO_Init+0x338>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x232>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a54      	ldr	r2, [pc, #336]	@ (8001968 <HAL_GPIO_Init+0x33c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x22e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a53      	ldr	r2, [pc, #332]	@ (800196c <HAL_GPIO_Init+0x340>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x22a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a52      	ldr	r2, [pc, #328]	@ (8001970 <HAL_GPIO_Init+0x344>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x226>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a51      	ldr	r2, [pc, #324]	@ (8001974 <HAL_GPIO_Init+0x348>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x222>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a50      	ldr	r2, [pc, #320]	@ (8001978 <HAL_GPIO_Init+0x34c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x21e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4f      	ldr	r2, [pc, #316]	@ (800197c <HAL_GPIO_Init+0x350>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x21a>
 8001842:	2309      	movs	r3, #9
 8001844:	e012      	b.n	800186c <HAL_GPIO_Init+0x240>
 8001846:	230a      	movs	r3, #10
 8001848:	e010      	b.n	800186c <HAL_GPIO_Init+0x240>
 800184a:	2308      	movs	r3, #8
 800184c:	e00e      	b.n	800186c <HAL_GPIO_Init+0x240>
 800184e:	2307      	movs	r3, #7
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x240>
 8001852:	2306      	movs	r3, #6
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x240>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x240>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x240>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x240>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x240>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x240>
 800186a:	2300      	movs	r3, #0
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800187c:	4935      	ldr	r1, [pc, #212]	@ (8001954 <HAL_GPIO_Init+0x328>)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188a:	4b3d      	ldr	r3, [pc, #244]	@ (8001980 <HAL_GPIO_Init+0x354>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ae:	4a34      	ldr	r2, [pc, #208]	@ (8001980 <HAL_GPIO_Init+0x354>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b4:	4b32      	ldr	r3, [pc, #200]	@ (8001980 <HAL_GPIO_Init+0x354>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d8:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <HAL_GPIO_Init+0x354>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018de:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <HAL_GPIO_Init+0x354>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_GPIO_Init+0x354>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_GPIO_Init+0x354>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <HAL_GPIO_Init+0x354>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	f67f ae86 	bls.w	800164c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	40013800 	.word	0x40013800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400
 8001960:	40020800 	.word	0x40020800
 8001964:	40020c00 	.word	0x40020c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40021400 	.word	0x40021400
 8001970:	40021800 	.word	0x40021800
 8001974:	40021c00 	.word	0x40021c00
 8001978:	40022000 	.word	0x40022000
 800197c:	40022400 	.word	0x40022400
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c8:	887a      	ldrh	r2, [r7, #2]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	400b      	ands	r3, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b23      	ldr	r3, [pc, #140]	@ (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b20      	ldr	r3, [pc, #128]	@ (8001a84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1a:	f7ff fd15 	bl	8001448 <HAL_GetTick>
 8001a1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a20:	e009      	b.n	8001a36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a22:	f7ff fd11 	bl	8001448 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	d901      	bls.n	8001a36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e022      	b.n	8001a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a42:	d1ee      	bne.n	8001a22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a44:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fcfa 	bl	8001448 <HAL_GetTick>
 8001a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a56:	e009      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a58:	f7ff fcf6 	bl	8001448 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a66:	d901      	bls.n	8001a6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e007      	b.n	8001a7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a78:	d1ee      	bne.n	8001a58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e291      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b96      	ldr	r3, [pc, #600]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001abc:	4b93      	ldr	r3, [pc, #588]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001ac8:	4b90      	ldr	r3, [pc, #576]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x130>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e26b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x7a>
 8001af8:	4b84      	ldr	r3, [pc, #528]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a83      	ldr	r2, [pc, #524]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x9c>
 8001b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7e      	ldr	r2, [pc, #504]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xc0>
 8001b32:	4b76      	ldr	r3, [pc, #472]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b73      	ldr	r3, [pc, #460]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a72      	ldr	r2, [pc, #456]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd8>
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6e      	ldr	r2, [pc, #440]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b6c      	ldr	r3, [pc, #432]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fc6c 	bl	8001448 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc68 	bl	8001448 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e21f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b61      	ldr	r3, [pc, #388]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe8>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff fc58 	bl	8001448 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fc54 	bl	8001448 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e20b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x110>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d069      	beq.n	8001c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
 8001be2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1df      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	493d      	ldr	r1, [pc, #244]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e040      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d023      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a38      	ldr	r2, [pc, #224]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fc0a 	bl	8001448 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fc06 	bl	8001448 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1bd      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4929      	ldr	r1, [pc, #164]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
 8001c6a:	e018      	b.n	8001c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a26      	ldr	r2, [pc, #152]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fbe6 	bl	8001448 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbe2 	bl	8001448 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e199      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d038      	beq.n	8001d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb6:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fbc3 	bl	8001448 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fbbf 	bl	8001448 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e176      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x23a>
 8001ce4:	e01a      	b.n	8001d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_RCC_OscConfig+0x280>)
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fba9 	bl	8001448 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fba5 	bl	8001448 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d903      	bls.n	8001d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e15c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
 8001d0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b91      	ldr	r3, [pc, #580]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a4 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b88      	ldr	r3, [pc, #544]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a87      	ldr	r2, [pc, #540]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b85      	ldr	r3, [pc, #532]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	4b82      	ldr	r3, [pc, #520]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fb6d 	bl	8001448 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7ff fb69 	bl	8001448 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	@ 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e120      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b75      	ldr	r3, [pc, #468]	@ (8001f5c <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x31a>
 8001d98:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x33c>
 8001dae:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db2:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dba:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	4a66      	ldr	r2, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x35e>
 8001dd0:	4b61      	ldr	r3, [pc, #388]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4a60      	ldr	r2, [pc, #384]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x376>
 8001dea:	4b5b      	ldr	r3, [pc, #364]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	4b58      	ldr	r3, [pc, #352]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfa:	4a57      	ldr	r2, [pc, #348]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb1d 	bl	8001448 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb19 	bl	8001448 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0ce      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b4b      	ldr	r3, [pc, #300]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x386>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb07 	bl	8001448 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb03 	bl	8001448 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b40      	ldr	r3, [pc, #256]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b3c      	ldr	r3, [pc, #240]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80a4 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d06b      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d149      	bne.n	8001f24 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fad4 	bl	8001448 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fad0 	bl	8001448 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001eee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff faa4 	bl	8001448 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff faa0 	bl	8001448 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e057      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x478>
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0b      	ldr	r2, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fa8a 	bl	8001448 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fa86 	bl	8001448 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b03      	ldr	r3, [pc, #12]	@ (8001f58 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4ac>
 8001f56:	e035      	b.n	8001fc4 <HAL_RCC_OscConfig+0x538>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x544>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d028      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d121      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d111      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4965      	ldr	r1, [pc, #404]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a58      	ldr	r2, [pc, #352]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c8:	f7ff f9be 	bl	8001448 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f9ba 	bl	8001448 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 020f 	bic.w	r2, r3, #15
 800210e:	4922      	ldr	r1, [pc, #136]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f91a 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00
 800219c:	40023800 	.word	0x40023800
 80021a0:	08005444 	.word	0x08005444
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b0:	b090      	sub	sp, #64	@ 0x40
 80021b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c4:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d00d      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x40>
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	f200 80a1 	bhi.w	8002318 <HAL_RCC_GetSysClockFreq+0x16c>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x34>
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021de:	e09b      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x184>)
 80021e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e4:	e09b      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e6:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ea:	e098      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021f6:	4b4d      	ldr	r3, [pc, #308]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d028      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	4b4a      	ldr	r3, [pc, #296]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	2200      	movs	r2, #0
 800220a:	623b      	str	r3, [r7, #32]
 800220c:	627a      	str	r2, [r7, #36]	@ 0x24
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002214:	2100      	movs	r1, #0
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 8002218:	fb03 f201 	mul.w	r2, r3, r1
 800221c:	2300      	movs	r3, #0
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	4413      	add	r3, r2
 8002224:	4a43      	ldr	r2, [pc, #268]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x188>)
 8002226:	fba0 1202 	umull	r1, r2, r0, r2
 800222a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800222c:	460a      	mov	r2, r1
 800222e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002232:	4413      	add	r3, r2
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002238:	2200      	movs	r2, #0
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	61fa      	str	r2, [r7, #28]
 800223e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002242:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002246:	f7fd ffe3 	bl	8000210 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4613      	mov	r3, r2
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002252:	e053      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	2200      	movs	r2, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	617a      	str	r2, [r7, #20]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002266:	f04f 0b00 	mov.w	fp, #0
 800226a:	4652      	mov	r2, sl
 800226c:	465b      	mov	r3, fp
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	0159      	lsls	r1, r3, #5
 8002278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227c:	0150      	lsls	r0, r2, #5
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	ebb2 080a 	subs.w	r8, r2, sl
 8002286:	eb63 090b 	sbc.w	r9, r3, fp
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002296:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800229a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800229e:	ebb2 0408 	subs.w	r4, r2, r8
 80022a2:	eb63 0509 	sbc.w	r5, r3, r9
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	00eb      	lsls	r3, r5, #3
 80022b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b4:	00e2      	lsls	r2, r4, #3
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	eb14 030a 	adds.w	r3, r4, sl
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	eb45 030b 	adc.w	r3, r5, fp
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d2:	4629      	mov	r1, r5
 80022d4:	028b      	lsls	r3, r1, #10
 80022d6:	4621      	mov	r1, r4
 80022d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022dc:	4621      	mov	r1, r4
 80022de:	028a      	lsls	r2, r1, #10
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e6:	2200      	movs	r2, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	60fa      	str	r2, [r7, #12]
 80022ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022f0:	f7fd ff8e 	bl	8000210 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_GetSysClockFreq+0x180>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800230c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x184>)
 800231a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002320:	4618      	mov	r0, r3
 8002322:	3740      	adds	r7, #64	@ 0x40
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	00f42400 	.word	0x00f42400
 8002334:	017d7840 	.word	0x017d7840

08002338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08005454 	.word	0x08005454

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800237c:	f7ff ffdc 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0b5b      	lsrs	r3, r3, #13
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	08005454 	.word	0x08005454

080023a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023c8:	4b69      	ldr	r3, [pc, #420]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a68      	ldr	r2, [pc, #416]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023d2:	6093      	str	r3, [r2, #8]
 80023d4:	4b66      	ldr	r3, [pc, #408]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023dc:	4964      	ldr	r1, [pc, #400]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002400:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	4959      	ldr	r1, [pc, #356]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d017      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800243c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	494a      	ldr	r1, [pc, #296]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002454:	d101      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 808b 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b3a      	ldr	r3, [pc, #232]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	4a39      	ldr	r2, [pc, #228]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002490:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800249c:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a34      	ldr	r2, [pc, #208]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7fe ffce 	bl	8001448 <HAL_GetTick>
 80024ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b0:	f7fe ffca 	bl	8001448 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e357      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ce:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d035      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d02e      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002502:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002506:	4a1a      	ldr	r2, [pc, #104]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800250e:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002514:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d114      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe ff92 	bl	8001448 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7fe ff8e 	bl	8001448 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e319      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002556:	d111      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002566:	400b      	ands	r3, r1
 8002568:	4901      	ldr	r1, [pc, #4]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
 800256e:	e00b      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	0ffffcff 	.word	0x0ffffcff
 800257c:	4baa      	ldr	r3, [pc, #680]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4aa9      	ldr	r2, [pc, #676]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002582:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	4ba7      	ldr	r3, [pc, #668]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800258a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	49a4      	ldr	r1, [pc, #656]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002596:	4313      	orrs	r3, r2
 8002598:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d010      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ac:	4a9e      	ldr	r2, [pc, #632]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025b6:	4b9c      	ldr	r3, [pc, #624]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	4999      	ldr	r1, [pc, #612]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d4:	4b94      	ldr	r3, [pc, #592]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025e2:	4991      	ldr	r1, [pc, #580]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002604:	4988      	ldr	r1, [pc, #544]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002618:	4b83      	ldr	r3, [pc, #524]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002626:	4980      	ldr	r1, [pc, #512]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800263a:	4b7b      	ldr	r3, [pc, #492]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4977      	ldr	r1, [pc, #476]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800265c:	4b72      	ldr	r3, [pc, #456]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	496f      	ldr	r1, [pc, #444]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800267e:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f023 020c 	bic.w	r2, r3, #12
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268c:	4966      	ldr	r1, [pc, #408]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a0:	4b61      	ldr	r3, [pc, #388]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	495e      	ldr	r1, [pc, #376]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c2:	4b59      	ldr	r3, [pc, #356]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d0:	4955      	ldr	r1, [pc, #340]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026e4:	4b50      	ldr	r3, [pc, #320]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f2:	494d      	ldr	r1, [pc, #308]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002706:	4b48      	ldr	r3, [pc, #288]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	4944      	ldr	r1, [pc, #272]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002728:	4b3f      	ldr	r3, [pc, #252]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	493c      	ldr	r1, [pc, #240]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800274a:	4b37      	ldr	r3, [pc, #220]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002758:	4933      	ldr	r1, [pc, #204]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800276c:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800277a:	492b      	ldr	r1, [pc, #172]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d011      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800278e:	4b26      	ldr	r3, [pc, #152]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002794:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800279c:	4922      	ldr	r1, [pc, #136]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ac:	d101      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027dc:	4912      	ldr	r1, [pc, #72]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002800:	4909      	ldr	r1, [pc, #36]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d006      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80d9 	beq.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800281c:	4b02      	ldr	r3, [pc, #8]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a01      	ldr	r2, [pc, #4]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002822:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002826:	e001      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002828:	40023800 	.word	0x40023800
 800282c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282e:	f7fe fe0b 	bl	8001448 <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002836:	f7fe fe07 	bl	8001448 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	@ 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e194      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002848:	4b6c      	ldr	r3, [pc, #432]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11d      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002868:	4b64      	ldr	r3, [pc, #400]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002876:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287c:	0e1b      	lsrs	r3, r3, #24
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	071b      	lsls	r3, r3, #28
 800289c:	4957      	ldr	r1, [pc, #348]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02e      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028ce:	d129      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028d0:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e4:	0f1b      	lsrs	r3, r3, #28
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	019a      	lsls	r2, r3, #6
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	071b      	lsls	r3, r3, #28
 8002904:	493d      	ldr	r1, [pc, #244]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002912:	f023 021f 	bic.w	r2, r3, #31
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	3b01      	subs	r3, #1
 800291c:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01d      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002930:	4b32      	ldr	r3, [pc, #200]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002936:	0e1b      	lsrs	r3, r3, #24
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002944:	0f1b      	lsrs	r3, r3, #28
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	019a      	lsls	r2, r3, #6
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	431a      	orrs	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	071b      	lsls	r3, r3, #28
 8002964:	4925      	ldr	r1, [pc, #148]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d011      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	019a      	lsls	r2, r3, #6
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	071b      	lsls	r3, r3, #28
 8002994:	4919      	ldr	r1, [pc, #100]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a16      	ldr	r2, [pc, #88]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe fd4e 	bl	8001448 <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029b0:	f7fe fd4a 	bl	8001448 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0d7      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029c2:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	f040 80cd 	bne.w	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a08      	ldr	r2, [pc, #32]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e2:	f7fe fd31 	bl	8001448 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029ea:	f7fe fd2d 	bl	8001448 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d903      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0ba      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80029fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a00:	4b5e      	ldr	r3, [pc, #376]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a0c:	d0ed      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d02e      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d12a      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a36:	4b51      	ldr	r3, [pc, #324]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a44:	4b4d      	ldr	r3, [pc, #308]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	0f1b      	lsrs	r3, r3, #28
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	019a      	lsls	r2, r3, #6
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	061b      	lsls	r3, r3, #24
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	071b      	lsls	r3, r3, #28
 8002a6a:	4944      	ldr	r1, [pc, #272]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a72:	4b42      	ldr	r3, [pc, #264]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a78:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	493d      	ldr	r1, [pc, #244]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d022      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aa0:	d11d      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aa2:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa8:	0e1b      	lsrs	r3, r3, #24
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ab0:	4b32      	ldr	r3, [pc, #200]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	0f1b      	lsrs	r3, r3, #28
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	019a      	lsls	r2, r3, #6
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	431a      	orrs	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	4929      	ldr	r1, [pc, #164]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aea:	4b24      	ldr	r3, [pc, #144]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af0:	0e1b      	lsrs	r3, r3, #24
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002af8:	4b20      	ldr	r3, [pc, #128]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	019a      	lsls	r2, r3, #6
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	4917      	ldr	r1, [pc, #92]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4911      	ldr	r1, [pc, #68]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe fc7e 	bl	8001448 <HAL_GetTick>
 8002b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b50:	f7fe fc7a 	bl	8001448 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e007      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b6e:	d1ef      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800

08002b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e040      	b.n	8002c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fb54 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	@ 0x24
 8002bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb16 	bl	80031f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f8af 	bl	8002d30 <UART_SetConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01b      	b.n	8002c14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fb95 	bl	800333c <UART_CheckIdleState>
 8002c12:	4603      	mov	r3, r0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d177      	bne.n	8002d24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_UART_Transmit+0x24>
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e070      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	@ 0x21
 8002c50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c52:	f7fe fbf9 	bl	8001448 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c70:	d108      	bne.n	8002c84 <HAL_UART_Transmit+0x68>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c8c:	e02f      	b.n	8002cee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fba6 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e03b      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e007      	b.n	8002cdc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1c9      	bne.n	8002c8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	@ 0x40
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fb70 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e005      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ff4 <UART_SetConfig+0x2c4>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a94      	ldr	r2, [pc, #592]	@ (8002ff8 <UART_SetConfig+0x2c8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d120      	bne.n	8002dee <UART_SetConfig+0xbe>
 8002dac:	4b93      	ldr	r3, [pc, #588]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d816      	bhi.n	8002de8 <UART_SetConfig+0xb8>
 8002dba:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc0 <UART_SetConfig+0x90>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002dd1 	.word	0x08002dd1
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002dd7 	.word	0x08002dd7
 8002dcc:	08002de3 	.word	0x08002de3
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	e150      	b.n	8003078 <UART_SetConfig+0x348>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	77fb      	strb	r3, [r7, #31]
 8002dda:	e14d      	b.n	8003078 <UART_SetConfig+0x348>
 8002ddc:	2304      	movs	r3, #4
 8002dde:	77fb      	strb	r3, [r7, #31]
 8002de0:	e14a      	b.n	8003078 <UART_SetConfig+0x348>
 8002de2:	2308      	movs	r3, #8
 8002de4:	77fb      	strb	r3, [r7, #31]
 8002de6:	e147      	b.n	8003078 <UART_SetConfig+0x348>
 8002de8:	2310      	movs	r3, #16
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e144      	b.n	8003078 <UART_SetConfig+0x348>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a83      	ldr	r2, [pc, #524]	@ (8003000 <UART_SetConfig+0x2d0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d132      	bne.n	8002e5e <UART_SetConfig+0x12e>
 8002df8:	4b80      	ldr	r3, [pc, #512]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d828      	bhi.n	8002e58 <UART_SetConfig+0x128>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <UART_SetConfig+0xdc>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e59 	.word	0x08002e59
 8002e14:	08002e59 	.word	0x08002e59
 8002e18:	08002e59 	.word	0x08002e59
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e59 	.word	0x08002e59
 8002e24:	08002e59 	.word	0x08002e59
 8002e28:	08002e59 	.word	0x08002e59
 8002e2c:	08002e47 	.word	0x08002e47
 8002e30:	08002e59 	.word	0x08002e59
 8002e34:	08002e59 	.word	0x08002e59
 8002e38:	08002e59 	.word	0x08002e59
 8002e3c:	08002e53 	.word	0x08002e53
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e118      	b.n	8003078 <UART_SetConfig+0x348>
 8002e46:	2302      	movs	r3, #2
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e115      	b.n	8003078 <UART_SetConfig+0x348>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e112      	b.n	8003078 <UART_SetConfig+0x348>
 8002e52:	2308      	movs	r3, #8
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e10f      	b.n	8003078 <UART_SetConfig+0x348>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e10c      	b.n	8003078 <UART_SetConfig+0x348>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a68      	ldr	r2, [pc, #416]	@ (8003004 <UART_SetConfig+0x2d4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d120      	bne.n	8002eaa <UART_SetConfig+0x17a>
 8002e68:	4b64      	ldr	r3, [pc, #400]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e72:	2b30      	cmp	r3, #48	@ 0x30
 8002e74:	d013      	beq.n	8002e9e <UART_SetConfig+0x16e>
 8002e76:	2b30      	cmp	r3, #48	@ 0x30
 8002e78:	d814      	bhi.n	8002ea4 <UART_SetConfig+0x174>
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d009      	beq.n	8002e92 <UART_SetConfig+0x162>
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d810      	bhi.n	8002ea4 <UART_SetConfig+0x174>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <UART_SetConfig+0x15c>
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d006      	beq.n	8002e98 <UART_SetConfig+0x168>
 8002e8a:	e00b      	b.n	8002ea4 <UART_SetConfig+0x174>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e0f2      	b.n	8003078 <UART_SetConfig+0x348>
 8002e92:	2302      	movs	r3, #2
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e0ef      	b.n	8003078 <UART_SetConfig+0x348>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e0ec      	b.n	8003078 <UART_SetConfig+0x348>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	77fb      	strb	r3, [r7, #31]
 8002ea2:	e0e9      	b.n	8003078 <UART_SetConfig+0x348>
 8002ea4:	2310      	movs	r3, #16
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e0e6      	b.n	8003078 <UART_SetConfig+0x348>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a56      	ldr	r2, [pc, #344]	@ (8003008 <UART_SetConfig+0x2d8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d120      	bne.n	8002ef6 <UART_SetConfig+0x1c6>
 8002eb4:	4b51      	ldr	r3, [pc, #324]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ec0:	d013      	beq.n	8002eea <UART_SetConfig+0x1ba>
 8002ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ec4:	d814      	bhi.n	8002ef0 <UART_SetConfig+0x1c0>
 8002ec6:	2b80      	cmp	r3, #128	@ 0x80
 8002ec8:	d009      	beq.n	8002ede <UART_SetConfig+0x1ae>
 8002eca:	2b80      	cmp	r3, #128	@ 0x80
 8002ecc:	d810      	bhi.n	8002ef0 <UART_SetConfig+0x1c0>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0x1a8>
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d006      	beq.n	8002ee4 <UART_SetConfig+0x1b4>
 8002ed6:	e00b      	b.n	8002ef0 <UART_SetConfig+0x1c0>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e0cc      	b.n	8003078 <UART_SetConfig+0x348>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e0c9      	b.n	8003078 <UART_SetConfig+0x348>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	e0c6      	b.n	8003078 <UART_SetConfig+0x348>
 8002eea:	2308      	movs	r3, #8
 8002eec:	77fb      	strb	r3, [r7, #31]
 8002eee:	e0c3      	b.n	8003078 <UART_SetConfig+0x348>
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e0c0      	b.n	8003078 <UART_SetConfig+0x348>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a44      	ldr	r2, [pc, #272]	@ (800300c <UART_SetConfig+0x2dc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d125      	bne.n	8002f4c <UART_SetConfig+0x21c>
 8002f00:	4b3e      	ldr	r3, [pc, #248]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f0e:	d017      	beq.n	8002f40 <UART_SetConfig+0x210>
 8002f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f14:	d817      	bhi.n	8002f46 <UART_SetConfig+0x216>
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1a:	d00b      	beq.n	8002f34 <UART_SetConfig+0x204>
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f20:	d811      	bhi.n	8002f46 <UART_SetConfig+0x216>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <UART_SetConfig+0x1fe>
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2a:	d006      	beq.n	8002f3a <UART_SetConfig+0x20a>
 8002f2c:	e00b      	b.n	8002f46 <UART_SetConfig+0x216>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e0a1      	b.n	8003078 <UART_SetConfig+0x348>
 8002f34:	2302      	movs	r3, #2
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e09e      	b.n	8003078 <UART_SetConfig+0x348>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e09b      	b.n	8003078 <UART_SetConfig+0x348>
 8002f40:	2308      	movs	r3, #8
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e098      	b.n	8003078 <UART_SetConfig+0x348>
 8002f46:	2310      	movs	r3, #16
 8002f48:	77fb      	strb	r3, [r7, #31]
 8002f4a:	e095      	b.n	8003078 <UART_SetConfig+0x348>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2f      	ldr	r2, [pc, #188]	@ (8003010 <UART_SetConfig+0x2e0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d125      	bne.n	8002fa2 <UART_SetConfig+0x272>
 8002f56:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f64:	d017      	beq.n	8002f96 <UART_SetConfig+0x266>
 8002f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f6a:	d817      	bhi.n	8002f9c <UART_SetConfig+0x26c>
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f70:	d00b      	beq.n	8002f8a <UART_SetConfig+0x25a>
 8002f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f76:	d811      	bhi.n	8002f9c <UART_SetConfig+0x26c>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <UART_SetConfig+0x254>
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f80:	d006      	beq.n	8002f90 <UART_SetConfig+0x260>
 8002f82:	e00b      	b.n	8002f9c <UART_SetConfig+0x26c>
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e076      	b.n	8003078 <UART_SetConfig+0x348>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e073      	b.n	8003078 <UART_SetConfig+0x348>
 8002f90:	2304      	movs	r3, #4
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e070      	b.n	8003078 <UART_SetConfig+0x348>
 8002f96:	2308      	movs	r3, #8
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e06d      	b.n	8003078 <UART_SetConfig+0x348>
 8002f9c:	2310      	movs	r3, #16
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e06a      	b.n	8003078 <UART_SetConfig+0x348>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <UART_SetConfig+0x2e4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d138      	bne.n	800301e <UART_SetConfig+0x2ee>
 8002fac:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <UART_SetConfig+0x2cc>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002fb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fba:	d017      	beq.n	8002fec <UART_SetConfig+0x2bc>
 8002fbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fc0:	d82a      	bhi.n	8003018 <UART_SetConfig+0x2e8>
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc6:	d00b      	beq.n	8002fe0 <UART_SetConfig+0x2b0>
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fcc:	d824      	bhi.n	8003018 <UART_SetConfig+0x2e8>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <UART_SetConfig+0x2aa>
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd6:	d006      	beq.n	8002fe6 <UART_SetConfig+0x2b6>
 8002fd8:	e01e      	b.n	8003018 <UART_SetConfig+0x2e8>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	77fb      	strb	r3, [r7, #31]
 8002fde:	e04b      	b.n	8003078 <UART_SetConfig+0x348>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	77fb      	strb	r3, [r7, #31]
 8002fe4:	e048      	b.n	8003078 <UART_SetConfig+0x348>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	77fb      	strb	r3, [r7, #31]
 8002fea:	e045      	b.n	8003078 <UART_SetConfig+0x348>
 8002fec:	2308      	movs	r3, #8
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e042      	b.n	8003078 <UART_SetConfig+0x348>
 8002ff2:	bf00      	nop
 8002ff4:	efff69f3 	.word	0xefff69f3
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40004400 	.word	0x40004400
 8003004:	40004800 	.word	0x40004800
 8003008:	40004c00 	.word	0x40004c00
 800300c:	40005000 	.word	0x40005000
 8003010:	40011400 	.word	0x40011400
 8003014:	40007800 	.word	0x40007800
 8003018:	2310      	movs	r3, #16
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e02c      	b.n	8003078 <UART_SetConfig+0x348>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a72      	ldr	r2, [pc, #456]	@ (80031ec <UART_SetConfig+0x4bc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d125      	bne.n	8003074 <UART_SetConfig+0x344>
 8003028:	4b71      	ldr	r3, [pc, #452]	@ (80031f0 <UART_SetConfig+0x4c0>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003032:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003036:	d017      	beq.n	8003068 <UART_SetConfig+0x338>
 8003038:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800303c:	d817      	bhi.n	800306e <UART_SetConfig+0x33e>
 800303e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003042:	d00b      	beq.n	800305c <UART_SetConfig+0x32c>
 8003044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003048:	d811      	bhi.n	800306e <UART_SetConfig+0x33e>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <UART_SetConfig+0x326>
 800304e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003052:	d006      	beq.n	8003062 <UART_SetConfig+0x332>
 8003054:	e00b      	b.n	800306e <UART_SetConfig+0x33e>
 8003056:	2300      	movs	r3, #0
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e00d      	b.n	8003078 <UART_SetConfig+0x348>
 800305c:	2302      	movs	r3, #2
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e00a      	b.n	8003078 <UART_SetConfig+0x348>
 8003062:	2304      	movs	r3, #4
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	e007      	b.n	8003078 <UART_SetConfig+0x348>
 8003068:	2308      	movs	r3, #8
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e004      	b.n	8003078 <UART_SetConfig+0x348>
 800306e:	2310      	movs	r3, #16
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e001      	b.n	8003078 <UART_SetConfig+0x348>
 8003074:	2310      	movs	r3, #16
 8003076:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003080:	d15b      	bne.n	800313a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003082:	7ffb      	ldrb	r3, [r7, #31]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d828      	bhi.n	80030da <UART_SetConfig+0x3aa>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x360>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030bd 	.word	0x080030bd
 8003098:	080030c5 	.word	0x080030c5
 800309c:	080030db 	.word	0x080030db
 80030a0:	080030cb 	.word	0x080030cb
 80030a4:	080030db 	.word	0x080030db
 80030a8:	080030db 	.word	0x080030db
 80030ac:	080030db 	.word	0x080030db
 80030b0:	080030d3 	.word	0x080030d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff f94c 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 80030b8:	61b8      	str	r0, [r7, #24]
        break;
 80030ba:	e013      	b.n	80030e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7ff f95c 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 80030c0:	61b8      	str	r0, [r7, #24]
        break;
 80030c2:	e00f      	b.n	80030e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c4:	4b4b      	ldr	r3, [pc, #300]	@ (80031f4 <UART_SetConfig+0x4c4>)
 80030c6:	61bb      	str	r3, [r7, #24]
        break;
 80030c8:	e00c      	b.n	80030e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ca:	f7ff f86f 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 80030ce:	61b8      	str	r0, [r7, #24]
        break;
 80030d0:	e008      	b.n	80030e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030d6:	61bb      	str	r3, [r7, #24]
        break;
 80030d8:	e004      	b.n	80030e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	77bb      	strb	r3, [r7, #30]
        break;
 80030e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d074      	beq.n	80031d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	005a      	lsls	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	d916      	bls.n	8003134 <UART_SetConfig+0x404>
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310c:	d212      	bcs.n	8003134 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f023 030f 	bic.w	r3, r3, #15
 8003116:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	b29a      	uxth	r2, r3
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	4313      	orrs	r3, r2
 8003128:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	89fa      	ldrh	r2, [r7, #14]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	e04f      	b.n	80031d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77bb      	strb	r3, [r7, #30]
 8003138:	e04c      	b.n	80031d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800313a:	7ffb      	ldrb	r3, [r7, #31]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d828      	bhi.n	8003192 <UART_SetConfig+0x462>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0x418>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003193 	.word	0x08003193
 8003158:	08003183 	.word	0x08003183
 800315c:	08003193 	.word	0x08003193
 8003160:	08003193 	.word	0x08003193
 8003164:	08003193 	.word	0x08003193
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff f8f0 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e013      	b.n	800319c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff f900 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8003178:	61b8      	str	r0, [r7, #24]
        break;
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <UART_SetConfig+0x4c4>)
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e00c      	b.n	800319c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7ff f813 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8003186:	61b8      	str	r0, [r7, #24]
        break;
 8003188:	e008      	b.n	800319c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e004      	b.n	800319c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77bb      	strb	r3, [r7, #30]
        break;
 800319a:	bf00      	nop
    }

    if (pclk != 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	085a      	lsrs	r2, r3, #1
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b0f      	cmp	r3, #15
 80031ba:	d909      	bls.n	80031d0 <UART_SetConfig+0x4a0>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c2:	d205      	bcs.n	80031d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e001      	b.n	80031d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40007c00 	.word	0x40007c00
 80031f0:	40023800 	.word	0x40023800
 80031f4:	00f42400 	.word	0x00f42400

080031f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01a      	beq.n	800330e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f6:	d10a      	bne.n	800330e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800334c:	f7fe f87c 	bl	8001448 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b08      	cmp	r3, #8
 800335e:	d12e      	bne.n	80033be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f83b 	bl	80033ea <UART_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d021      	beq.n	80033be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	60fb      	str	r3, [r7, #12]
   return(result);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	617b      	str	r3, [r7, #20]
   return(result);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e6      	bne.n	800337a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e011      	b.n	80033e2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	4613      	mov	r3, r2
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	e04f      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d04b      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fe f820 	bl	8001448 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <UART_WaitOnFlagUntilTimeout+0x30>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04e      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d037      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b80      	cmp	r3, #128	@ 0x80
 8003430:	d034      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b40      	cmp	r3, #64	@ 0x40
 8003436:	d031      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b08      	cmp	r3, #8
 8003444:	d110      	bne.n	8003468 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2208      	movs	r2, #8
 800344c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f838 	bl	80034c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2208      	movs	r2, #8
 8003458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e029      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003476:	d111      	bne.n	800349c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003480:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f81e 	bl	80034c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d0a0      	beq.n	80033fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b095      	sub	sp, #84	@ 0x54
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80034ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e6      	bne.n	80034cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	61fb      	str	r3, [r7, #28]
   return(result);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3308      	adds	r3, #8
 800351c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800351e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	2b01      	cmp	r3, #1
 8003538:	d118      	bne.n	800356c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	60bb      	str	r3, [r7, #8]
   return(result);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f023 0310 	bic.w	r3, r3, #16
 800354e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	6979      	ldr	r1, [r7, #20]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	613b      	str	r3, [r7, #16]
   return(result);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e6      	bne.n	800353a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003580:	bf00      	nop
 8003582:	3754      	adds	r7, #84	@ 0x54
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359e:	2b84      	cmp	r3, #132	@ 0x84
 80035a0:	d005      	beq.n	80035ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80035a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	3303      	adds	r3, #3
 80035ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035c0:	f000 faee 	bl	8003ba0 <vTaskStartScheduler>
  
  return osOK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	bd80      	pop	{r7, pc}

080035ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035cc:	b089      	sub	sp, #36	@ 0x24
 80035ce:	af04      	add	r7, sp, #16
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <osThreadCreate+0x54>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01c      	beq.n	800361e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685c      	ldr	r4, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691e      	ldr	r6, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffc8 	bl	800358c <makeFreeRtosPriority>
 80035fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003606:	9202      	str	r2, [sp, #8]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	9100      	str	r1, [sp, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4632      	mov	r2, r6
 8003610:	4629      	mov	r1, r5
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f8ed 	bl	80037f2 <xTaskCreateStatic>
 8003618:	4603      	mov	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e01c      	b.n	8003658 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685c      	ldr	r4, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800362a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ffaa 	bl	800358c <makeFreeRtosPriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	9200      	str	r2, [sp, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4632      	mov	r2, r6
 8003646:	4629      	mov	r1, r5
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f938 	bl	80038be <xTaskCreate>
 800364e:	4603      	mov	r3, r0
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003662 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <osDelay+0x16>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e000      	b.n	800367a <osDelay+0x18>
 8003678:	2301      	movs	r3, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fa58 	bl	8003b30 <vTaskDelay>
  
  return osOK;
 8003680:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f103 0208 	add.w	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
 80036a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f103 0208 	add.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f103 0208 	add.w	r2, r3, #8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d103      	bne.n	800374c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e00c      	b.n	8003766 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3308      	adds	r3, #8
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e002      	b.n	800375a <vListInsert+0x2e>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d2f6      	bcs.n	8003754 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6852      	ldr	r2, [r2, #4]
 80037be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d103      	bne.n	80037d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1e5a      	subs	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08e      	sub	sp, #56	@ 0x38
 80037f6:	af04      	add	r7, sp, #16
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380a:	b672      	cpsid	i
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	b662      	cpsie	i
 800381a:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <xTaskCreateStatic+0x52>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	b672      	cpsid	i
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	b662      	cpsie	i
 800383c:	61fb      	str	r3, [r7, #28]
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003844:	2354      	movs	r3, #84	@ 0x54
 8003846:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b54      	cmp	r3, #84	@ 0x54
 800384c:	d00d      	beq.n	800386a <xTaskCreateStatic+0x78>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003852:	b672      	cpsid	i
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	b662      	cpsie	i
 8003862:	61bb      	str	r3, [r7, #24]
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	e7fd      	b.n	8003866 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800386a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800386c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800386e:	2b00      	cmp	r3, #0
 8003870:	d01e      	beq.n	80038b0 <xTaskCreateStatic+0xbe>
 8003872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800388a:	2300      	movs	r3, #0
 800388c:	9303      	str	r3, [sp, #12]
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	9302      	str	r3, [sp, #8]
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f850 	bl	8003948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80038aa:	f000 f8d7 	bl	8003a5c <prvAddNewTaskToReadyList>
 80038ae:	e001      	b.n	80038b4 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038b4:	697b      	ldr	r3, [r7, #20]
	}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3728      	adds	r7, #40	@ 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b08c      	sub	sp, #48	@ 0x30
 80038c2:	af04      	add	r7, sp, #16
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fee2 	bl	800469c <pvPortMalloc>
 80038d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038e0:	2054      	movs	r0, #84	@ 0x54
 80038e2:	f000 fedb 	bl	800469c <pvPortMalloc>
 80038e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038f4:	e005      	b.n	8003902 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f000 ff9e 	bl	8004838 <vPortFree>
 80038fc:	e001      	b.n	8003902 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	2300      	movs	r3, #0
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f80e 	bl	8003948 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392c:	69f8      	ldr	r0, [r7, #28]
 800392e:	f000 f895 	bl	8003a5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e002      	b.n	800393e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800393e:	69bb      	ldr	r3, [r7, #24]
	}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003960:	440b      	add	r3, r1
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00d      	beq.n	8003996 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	b672      	cpsid	i
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	b662      	cpsie	i
 800398e:	617b      	str	r3, [r7, #20]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e012      	b.n	80039c8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	7819      	ldrb	r1, [r3, #0]
 80039aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	4413      	add	r3, r2
 80039b0:	3334      	adds	r3, #52	@ 0x34
 80039b2:	460a      	mov	r2, r1
 80039b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d9e9      	bls.n	80039a2 <prvInitialiseNewTask+0x5a>
 80039ce:	e000      	b.n	80039d2 <prvInitialiseNewTask+0x8a>
			{
				break;
 80039d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039da:	e003      	b.n	80039e4 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d901      	bls.n	80039ee <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039ea:	2306      	movs	r3, #6
 80039ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	3304      	adds	r3, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fe60 	bl	80036ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fe5b 	bl	80036ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	f1c3 0207 	rsb	r2, r3, #7
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	69b8      	ldr	r0, [r7, #24]
 8003a3e:	f000 fc39 	bl	80042b4 <pxPortInitialiseStack>
 8003a42:	4602      	mov	r2, r0
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a54:	bf00      	nop
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a64:	f000 fd32 	bl	80044cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a68:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <prvAddNewTaskToReadyList+0xb8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a29      	ldr	r2, [pc, #164]	@ (8003b14 <prvAddNewTaskToReadyList+0xb8>)
 8003a70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a72:	4b29      	ldr	r3, [pc, #164]	@ (8003b18 <prvAddNewTaskToReadyList+0xbc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a7a:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <prvAddNewTaskToReadyList+0xbc>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <prvAddNewTaskToReadyList+0xb8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d110      	bne.n	8003aaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a88:	f000 fad0 	bl	800402c <prvInitialiseTaskLists>
 8003a8c:	e00d      	b.n	8003aaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <prvAddNewTaskToReadyList+0xc0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a96:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <prvAddNewTaskToReadyList+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d802      	bhi.n	8003aaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <prvAddNewTaskToReadyList+0xbc>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <prvAddNewTaskToReadyList+0xc4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <prvAddNewTaskToReadyList+0xc4>)
 8003ab2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <prvAddNewTaskToReadyList+0xc8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <prvAddNewTaskToReadyList+0xc8>)
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a15      	ldr	r2, [pc, #84]	@ (8003b28 <prvAddNewTaskToReadyList+0xcc>)
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4610      	mov	r0, r2
 8003ade:	f7ff fe01 	bl	80036e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ae2:	f000 fd29 	bl	8004538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <prvAddNewTaskToReadyList+0xc0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00e      	beq.n	8003b0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aee:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <prvAddNewTaskToReadyList+0xbc>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d207      	bcs.n	8003b0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <prvAddNewTaskToReadyList+0xd0>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000474 	.word	0x20000474
 8003b18:	20000374 	.word	0x20000374
 8003b1c:	20000480 	.word	0x20000480
 8003b20:	20000490 	.word	0x20000490
 8003b24:	2000047c 	.word	0x2000047c
 8003b28:	20000378 	.word	0x20000378
 8003b2c:	e000ed04 	.word	0xe000ed04

08003b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01a      	beq.n	8003b78 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b42:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <vTaskDelay+0x68>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <vTaskDelay+0x36>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	b672      	cpsid	i
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	b662      	cpsie	i
 8003b5e:	60bb      	str	r3, [r7, #8]
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	e7fd      	b.n	8003b62 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003b66:	f000 f881 	bl	8003c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb3b 	bl	80041e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b72:	f000 f889 	bl	8003c88 <xTaskResumeAll>
 8003b76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003b7e:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <vTaskDelay+0x6c>)
 8003b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	2000049c 	.word	0x2000049c
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bae:	463a      	mov	r2, r7
 8003bb0:	1d39      	adds	r1, r7, #4
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fca2 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	9202      	str	r2, [sp, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	460a      	mov	r2, r1
 8003bce:	4921      	ldr	r1, [pc, #132]	@ (8003c54 <vTaskStartScheduler+0xb4>)
 8003bd0:	4821      	ldr	r0, [pc, #132]	@ (8003c58 <vTaskStartScheduler+0xb8>)
 8003bd2:	f7ff fe0e 	bl	80037f2 <xTaskCreateStatic>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4a20      	ldr	r2, [pc, #128]	@ (8003c5c <vTaskStartScheduler+0xbc>)
 8003bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <vTaskStartScheduler+0xbc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e001      	b.n	8003bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d118      	bne.n	8003c26 <vTaskStartScheduler+0x86>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	b672      	cpsid	i
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	b662      	cpsie	i
 8003c08:	613b      	str	r3, [r7, #16]
}
 8003c0a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c0c:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <vTaskStartScheduler+0xc0>)
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c14:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <vTaskStartScheduler+0xc4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c1a:	4b13      	ldr	r3, [pc, #76]	@ (8003c68 <vTaskStartScheduler+0xc8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c20:	f000 fbd6 	bl	80043d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c24:	e011      	b.n	8003c4a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d10d      	bne.n	8003c4a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	b672      	cpsid	i
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	b662      	cpsie	i
 8003c42:	60fb      	str	r3, [r7, #12]
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	e7fd      	b.n	8003c46 <vTaskStartScheduler+0xa6>
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	0800543c 	.word	0x0800543c
 8003c58:	08003ffd 	.word	0x08003ffd
 8003c5c:	20000498 	.word	0x20000498
 8003c60:	20000494 	.word	0x20000494
 8003c64:	20000480 	.word	0x20000480
 8003c68:	20000478 	.word	0x20000478

08003c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <vTaskSuspendAll+0x18>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a03      	ldr	r2, [pc, #12]	@ (8003c84 <vTaskSuspendAll+0x18>)
 8003c78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	2000049c 	.word	0x2000049c

08003c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c96:	4b43      	ldr	r3, [pc, #268]	@ (8003da4 <xTaskResumeAll+0x11c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <xTaskResumeAll+0x32>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	b672      	cpsid	i
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	b662      	cpsie	i
 8003cb2:	603b      	str	r3, [r7, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	e7fd      	b.n	8003cb6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cba:	f000 fc07 	bl	80044cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cbe:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <xTaskResumeAll+0x11c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <xTaskResumeAll+0x11c>)
 8003cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc8:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <xTaskResumeAll+0x11c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d161      	bne.n	8003d94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <xTaskResumeAll+0x120>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05d      	beq.n	8003d94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd8:	e02e      	b.n	8003d38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cda:	4b34      	ldr	r3, [pc, #208]	@ (8003dac <xTaskResumeAll+0x124>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd59 	bl	800379e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fd54 	bl	800379e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8003db0 <xTaskResumeAll+0x128>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <xTaskResumeAll+0x128>)
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <xTaskResumeAll+0x12c>)
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f7ff fce0 	bl	80036e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d28:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <xTaskResumeAll+0x130>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003d32:	4b22      	ldr	r3, [pc, #136]	@ (8003dbc <xTaskResumeAll+0x134>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d38:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <xTaskResumeAll+0x124>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1cc      	bne.n	8003cda <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d46:	f000 fa11 	bl	800416c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <xTaskResumeAll+0x138>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d010      	beq.n	8003d78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d56:	f000 f837 	bl	8003dc8 <xTaskIncrementTick>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003d60:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <xTaskResumeAll+0x134>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f1      	bne.n	8003d56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003d72:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <xTaskResumeAll+0x138>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d78:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <xTaskResumeAll+0x134>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d84:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <xTaskResumeAll+0x13c>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d94:	f000 fbd0 	bl	8004538 <vPortExitCritical>

	return xAlreadyYielded;
 8003d98:	68bb      	ldr	r3, [r7, #8]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000049c 	.word	0x2000049c
 8003da8:	20000474 	.word	0x20000474
 8003dac:	20000434 	.word	0x20000434
 8003db0:	2000047c 	.word	0x2000047c
 8003db4:	20000378 	.word	0x20000378
 8003db8:	20000374 	.word	0x20000374
 8003dbc:	20000488 	.word	0x20000488
 8003dc0:	20000484 	.word	0x20000484
 8003dc4:	e000ed04 	.word	0xe000ed04

08003dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd2:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <xTaskIncrementTick+0x14c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 808b 	bne.w	8003ef2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f18 <xTaskIncrementTick+0x150>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003de4:	4a4c      	ldr	r2, [pc, #304]	@ (8003f18 <xTaskIncrementTick+0x150>)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d123      	bne.n	8003e38 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003df0:	4b4a      	ldr	r3, [pc, #296]	@ (8003f1c <xTaskIncrementTick+0x154>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <xTaskIncrementTick+0x4e>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfe:	b672      	cpsid	i
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	b662      	cpsie	i
 8003e0e:	603b      	str	r3, [r7, #0]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <xTaskIncrementTick+0x4a>
 8003e16:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <xTaskIncrementTick+0x154>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	4b40      	ldr	r3, [pc, #256]	@ (8003f20 <xTaskIncrementTick+0x158>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3e      	ldr	r2, [pc, #248]	@ (8003f1c <xTaskIncrementTick+0x154>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4a3e      	ldr	r2, [pc, #248]	@ (8003f20 <xTaskIncrementTick+0x158>)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f24 <xTaskIncrementTick+0x15c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a3c      	ldr	r2, [pc, #240]	@ (8003f24 <xTaskIncrementTick+0x15c>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	f000 f99a 	bl	800416c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e38:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <xTaskIncrementTick+0x160>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d348      	bcc.n	8003ed4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e42:	4b36      	ldr	r3, [pc, #216]	@ (8003f1c <xTaskIncrementTick+0x154>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4c:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <xTaskIncrementTick+0x160>)
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	601a      	str	r2, [r3, #0]
					break;
 8003e54:	e03e      	b.n	8003ed4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <xTaskIncrementTick+0x154>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d203      	bcs.n	8003e76 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f28 <xTaskIncrementTick+0x160>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e74:	e02e      	b.n	8003ed4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fc8f 	bl	800379e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fc86 	bl	800379e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <xTaskIncrementTick+0x164>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <xTaskIncrementTick+0x164>)
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <xTaskIncrementTick+0x168>)
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7ff fc12 	bl	80036e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <xTaskIncrementTick+0x16c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3b9      	bcc.n	8003e42 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed2:	e7b6      	b.n	8003e42 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ed4:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <xTaskIncrementTick+0x16c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eda:	4915      	ldr	r1, [pc, #84]	@ (8003f30 <xTaskIncrementTick+0x168>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d907      	bls.n	8003efc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e004      	b.n	8003efc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <xTaskIncrementTick+0x170>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8003f38 <xTaskIncrementTick+0x170>)
 8003efa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <xTaskIncrementTick+0x174>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f08:	697b      	ldr	r3, [r7, #20]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000049c 	.word	0x2000049c
 8003f18:	20000478 	.word	0x20000478
 8003f1c:	2000042c 	.word	0x2000042c
 8003f20:	20000430 	.word	0x20000430
 8003f24:	2000048c 	.word	0x2000048c
 8003f28:	20000494 	.word	0x20000494
 8003f2c:	2000047c 	.word	0x2000047c
 8003f30:	20000378 	.word	0x20000378
 8003f34:	20000374 	.word	0x20000374
 8003f38:	20000484 	.word	0x20000484
 8003f3c:	20000488 	.word	0x20000488

08003f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f46:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <vTaskSwitchContext+0xa8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f4e:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <vTaskSwitchContext+0xac>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f54:	e042      	b.n	8003fdc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <vTaskSwitchContext+0xac>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <vTaskSwitchContext+0xb0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	f1c3 031f 	rsb	r3, r3, #31
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	4920      	ldr	r1, [pc, #128]	@ (8003ff4 <vTaskSwitchContext+0xb4>)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <vTaskSwitchContext+0x62>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	b672      	cpsid	i
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	b662      	cpsie	i
 8003f9a:	607b      	str	r3, [r7, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <vTaskSwitchContext+0x5e>
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <vTaskSwitchContext+0xb4>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d104      	bne.n	8003fd2 <vTaskSwitchContext+0x92>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <vTaskSwitchContext+0xb8>)
 8003fda:	6013      	str	r3, [r2, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	2000049c 	.word	0x2000049c
 8003fec:	20000488 	.word	0x20000488
 8003ff0:	2000047c 	.word	0x2000047c
 8003ff4:	20000378 	.word	0x20000378
 8003ff8:	20000374 	.word	0x20000374

08003ffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004004:	f000 f852 	bl	80040ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <prvIdleTask+0x28>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d9f9      	bls.n	8004004 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <prvIdleTask+0x2c>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004020:	e7f0      	b.n	8004004 <prvIdleTask+0x8>
 8004022:	bf00      	nop
 8004024:	20000378 	.word	0x20000378
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	e00c      	b.n	8004052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a12      	ldr	r2, [pc, #72]	@ (800408c <prvInitialiseTaskLists+0x60>)
 8004044:	4413      	add	r3, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fb1f 	bl	800368a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3301      	adds	r3, #1
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d9ef      	bls.n	8004038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004058:	480d      	ldr	r0, [pc, #52]	@ (8004090 <prvInitialiseTaskLists+0x64>)
 800405a:	f7ff fb16 	bl	800368a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800405e:	480d      	ldr	r0, [pc, #52]	@ (8004094 <prvInitialiseTaskLists+0x68>)
 8004060:	f7ff fb13 	bl	800368a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004064:	480c      	ldr	r0, [pc, #48]	@ (8004098 <prvInitialiseTaskLists+0x6c>)
 8004066:	f7ff fb10 	bl	800368a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800406a:	480c      	ldr	r0, [pc, #48]	@ (800409c <prvInitialiseTaskLists+0x70>)
 800406c:	f7ff fb0d 	bl	800368a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004070:	480b      	ldr	r0, [pc, #44]	@ (80040a0 <prvInitialiseTaskLists+0x74>)
 8004072:	f7ff fb0a 	bl	800368a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004076:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <prvInitialiseTaskLists+0x78>)
 8004078:	4a05      	ldr	r2, [pc, #20]	@ (8004090 <prvInitialiseTaskLists+0x64>)
 800407a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800407c:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <prvInitialiseTaskLists+0x7c>)
 800407e:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <prvInitialiseTaskLists+0x68>)
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000378 	.word	0x20000378
 8004090:	20000404 	.word	0x20000404
 8004094:	20000418 	.word	0x20000418
 8004098:	20000434 	.word	0x20000434
 800409c:	20000448 	.word	0x20000448
 80040a0:	20000460 	.word	0x20000460
 80040a4:	2000042c 	.word	0x2000042c
 80040a8:	20000430 	.word	0x20000430

080040ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040b2:	e019      	b.n	80040e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040b4:	f000 fa0a 	bl	80044cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b8:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <prvCheckTasksWaitingTermination+0x50>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fb6a 	bl	800379e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <prvCheckTasksWaitingTermination+0x54>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004100 <prvCheckTasksWaitingTermination+0x54>)
 80040d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <prvCheckTasksWaitingTermination+0x58>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3b01      	subs	r3, #1
 80040da:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <prvCheckTasksWaitingTermination+0x58>)
 80040dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040de:	f000 fa2b 	bl	8004538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f810 	bl	8004108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <prvCheckTasksWaitingTermination+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e1      	bne.n	80040b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000448 	.word	0x20000448
 8004100:	20000474 	.word	0x20000474
 8004104:	2000045c 	.word	0x2000045c

08004108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fb8a 	bl	8004838 <vPortFree>
				vPortFree( pxTCB );
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fb87 	bl	8004838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800412a:	e01b      	b.n	8004164 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004132:	2b01      	cmp	r3, #1
 8004134:	d103      	bne.n	800413e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fb7e 	bl	8004838 <vPortFree>
	}
 800413c:	e012      	b.n	8004164 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004144:	2b02      	cmp	r3, #2
 8004146:	d00d      	beq.n	8004164 <prvDeleteTCB+0x5c>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	b672      	cpsid	i
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	b662      	cpsie	i
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <prvDeleteTCB+0x58>
	}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004172:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <prvResetNextTaskUnblockTime+0x38>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <prvResetNextTaskUnblockTime+0x3c>)
 800417e:	f04f 32ff 	mov.w	r2, #4294967295
 8004182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004184:	e008      	b.n	8004198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <prvResetNextTaskUnblockTime+0x38>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a04      	ldr	r2, [pc, #16]	@ (80041a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	2000042c 	.word	0x2000042c
 80041a8:	20000494 	.word	0x20000494

080041ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041b2:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <xTaskGetSchedulerState+0x34>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ba:	2301      	movs	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	e008      	b.n	80041d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <xTaskGetSchedulerState+0x38>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041c8:	2302      	movs	r3, #2
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	e001      	b.n	80041d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041d2:	687b      	ldr	r3, [r7, #4]
	}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000480 	.word	0x20000480
 80041e4:	2000049c 	.word	0x2000049c

080041e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041f2:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <prvAddCurrentTaskToDelayedList+0xb0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f8:	4b28      	ldr	r3, [pc, #160]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff facd 	bl	800379e <uxListRemove>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800420a:	4b24      	ldr	r3, [pc, #144]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4013      	ands	r3, r2
 800421e:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004220:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d10a      	bne.n	8004240 <prvAddCurrentTaskToDelayedList+0x58>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004230:	4b1a      	ldr	r3, [pc, #104]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	481a      	ldr	r0, [pc, #104]	@ (80042a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800423a:	f7ff fa53 	bl	80036e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800423e:	e026      	b.n	800428e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	429a      	cmp	r2, r3
 8004256:	d209      	bcs.n	800426c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004258:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff fa61 	bl	800372c <vListInsert>
}
 800426a:	e010      	b.n	800428e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800426c:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff fa57 	bl	800372c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d202      	bcs.n	800428e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004288:	4a09      	ldr	r2, [pc, #36]	@ (80042b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6013      	str	r3, [r2, #0]
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000478 	.word	0x20000478
 800429c:	20000374 	.word	0x20000374
 80042a0:	2000047c 	.word	0x2000047c
 80042a4:	20000460 	.word	0x20000460
 80042a8:	20000430 	.word	0x20000430
 80042ac:	2000042c 	.word	0x2000042c
 80042b0:	20000494 	.word	0x20000494

080042b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b04      	subs	r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b04      	subs	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80042e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <pxPortInitialiseStack+0x64>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b14      	subs	r3, #20
 80042ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f06f 0202 	mvn.w	r2, #2
 8004302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b20      	subs	r3, #32
 8004308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	0800431d 	.word	0x0800431d

0800431c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <prvTaskExitError+0x60>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d00d      	beq.n	800434c <prvTaskExitError+0x30>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	b672      	cpsid	i
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	b662      	cpsie	i
 8004344:	60fb      	str	r3, [r7, #12]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <prvTaskExitError+0x2c>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	b672      	cpsid	i
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	b662      	cpsie	i
 8004360:	60bb      	str	r3, [r7, #8]
}
 8004362:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004364:	bf00      	nop
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0fc      	beq.n	8004366 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	20000374 	.word	0x20000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043a8:	4808      	ldr	r0, [pc, #32]	@ (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ca:	bf00      	nop
 80043cc:	e000ed08 	.word	0xe000ed08

080043d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <xPortStartScheduler+0xe4>)
 80043d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	@ 0xff
 80043e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b2f      	ldr	r3, [pc, #188]	@ (80044b8 <xPortStartScheduler+0xe8>)
 80043fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <xPortStartScheduler+0xec>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004404:	e009      	b.n	800441a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004406:	4b2d      	ldr	r3, [pc, #180]	@ (80044bc <xPortStartScheduler+0xec>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3b01      	subs	r3, #1
 800440c:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <xPortStartScheduler+0xec>)
 800440e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004422:	2b80      	cmp	r3, #128	@ 0x80
 8004424:	d0ef      	beq.n	8004406 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004426:	4b25      	ldr	r3, [pc, #148]	@ (80044bc <xPortStartScheduler+0xec>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1c3 0307 	rsb	r3, r3, #7
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00d      	beq.n	800444e <xPortStartScheduler+0x7e>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	b672      	cpsid	i
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	b662      	cpsie	i
 8004446:	60bb      	str	r3, [r7, #8]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <xPortStartScheduler+0xec>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4a19      	ldr	r2, [pc, #100]	@ (80044bc <xPortStartScheduler+0xec>)
 8004456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <xPortStartScheduler+0xec>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004460:	4a16      	ldr	r2, [pc, #88]	@ (80044bc <xPortStartScheduler+0xec>)
 8004462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800446c:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <xPortStartScheduler+0xf0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <xPortStartScheduler+0xf0>)
 8004472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004478:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <xPortStartScheduler+0xf0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a10      	ldr	r2, [pc, #64]	@ (80044c0 <xPortStartScheduler+0xf0>)
 800447e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004484:	f000 f8dc 	bl	8004640 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004488:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <xPortStartScheduler+0xf4>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800448e:	f000 f8fb 	bl	8004688 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <xPortStartScheduler+0xf8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <xPortStartScheduler+0xf8>)
 8004498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800449c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800449e:	f7ff ff83 	bl	80043a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044a2:	f7ff fd4d 	bl	8003f40 <vTaskSwitchContext>
	prvTaskExitError();
 80044a6:	f7ff ff39 	bl	800431c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	e000e400 	.word	0xe000e400
 80044b8:	200004a0 	.word	0x200004a0
 80044bc:	200004a4 	.word	0x200004a4
 80044c0:	e000ed20 	.word	0xe000ed20
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	e000ef34 	.word	0xe000ef34

080044cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	b672      	cpsid	i
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	b662      	cpsie	i
 80044e6:	607b      	str	r3, [r7, #4]
}
 80044e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044ea:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <vPortEnterCritical+0x64>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004530 <vPortEnterCritical+0x64>)
 80044f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <vPortEnterCritical+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d112      	bne.n	8004522 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <vPortEnterCritical+0x68>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <vPortEnterCritical+0x56>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	b672      	cpsid	i
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	b662      	cpsie	i
 800451a:	603b      	str	r3, [r7, #0]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <vPortEnterCritical+0x52>
	}
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800453e:	4b13      	ldr	r3, [pc, #76]	@ (800458c <vPortExitCritical+0x54>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10d      	bne.n	8004562 <vPortExitCritical+0x2a>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	b672      	cpsid	i
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	b662      	cpsie	i
 800455a:	607b      	str	r3, [r7, #4]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004562:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <vPortExitCritical+0x54>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	4a08      	ldr	r2, [pc, #32]	@ (800458c <vPortExitCritical+0x54>)
 800456a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800456c:	4b07      	ldr	r3, [pc, #28]	@ (800458c <vPortExitCritical+0x54>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <vPortExitCritical+0x48>
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800457e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	2000000c 	.word	0x2000000c

08004590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004590:	f3ef 8009 	mrs	r0, PSP
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <pxCurrentTCBConst>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f01e 0f10 	tst.w	lr, #16
 80045a0:	bf08      	it	eq
 80045a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	6010      	str	r0, [r2, #0]
 80045ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80045b4:	b672      	cpsid	i
 80045b6:	f380 8811 	msr	BASEPRI, r0
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	b662      	cpsie	i
 80045c4:	f7ff fcbc 	bl	8003f40 <vTaskSwitchContext>
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f380 8811 	msr	BASEPRI, r0
 80045d0:	bc09      	pop	{r0, r3}
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	6808      	ldr	r0, [r1, #0]
 80045d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	f01e 0f10 	tst.w	lr, #16
 80045de:	bf08      	it	eq
 80045e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045e4:	f380 8809 	msr	PSP, r0
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop

080045f0 <pxCurrentTCBConst>:
 80045f0:	20000374 	.word	0x20000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop

080045f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004602:	b672      	cpsid	i
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	b662      	cpsie	i
 8004612:	607b      	str	r3, [r7, #4]
}
 8004614:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004616:	f7ff fbd7 	bl	8003dc8 <xTaskIncrementTick>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <xPortSysTickHandler+0x44>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	2300      	movs	r3, #0
 800462a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f383 8811 	msr	BASEPRI, r3
}
 8004632:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <vPortSetupTimerInterrupt+0x34>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800464a:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <vPortSetupTimerInterrupt+0x38>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004650:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <vPortSetupTimerInterrupt+0x3c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <vPortSetupTimerInterrupt+0x40>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	4a09      	ldr	r2, [pc, #36]	@ (8004684 <vPortSetupTimerInterrupt+0x44>)
 800465e:	3b01      	subs	r3, #1
 8004660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004662:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <vPortSetupTimerInterrupt+0x34>)
 8004664:	2207      	movs	r2, #7
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000e010 	.word	0xe000e010
 8004678:	e000e018 	.word	0xe000e018
 800467c:	20000000 	.word	0x20000000
 8004680:	10624dd3 	.word	0x10624dd3
 8004684:	e000e014 	.word	0xe000e014

08004688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004688:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004698 <vPortEnableVFP+0x10>
 800468c:	6801      	ldr	r1, [r0, #0]
 800468e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004692:	6001      	str	r1, [r0, #0]
 8004694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004696:	bf00      	nop
 8004698:	e000ed88 	.word	0xe000ed88

0800469c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046a8:	f7ff fae0 	bl	8003c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004824 <pvPortMalloc+0x188>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046b4:	f000 f920 	bl	80048f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <pvPortMalloc+0x18c>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 8094 	bne.w	80047ee <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80046cc:	2208      	movs	r2, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	3308      	adds	r3, #8
 80046e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <pvPortMalloc+0x72>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	b672      	cpsid	i
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	b662      	cpsie	i
 8004706:	617b      	str	r3, [r7, #20]
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	e7fd      	b.n	800470a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06c      	beq.n	80047ee <pvPortMalloc+0x152>
 8004714:	4b45      	ldr	r3, [pc, #276]	@ (800482c <pvPortMalloc+0x190>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d867      	bhi.n	80047ee <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800471e:	4b44      	ldr	r3, [pc, #272]	@ (8004830 <pvPortMalloc+0x194>)
 8004720:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004722:	4b43      	ldr	r3, [pc, #268]	@ (8004830 <pvPortMalloc+0x194>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004728:	e004      	b.n	8004734 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d903      	bls.n	8004746 <pvPortMalloc+0xaa>
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1f1      	bne.n	800472a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004746:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <pvPortMalloc+0x188>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474c:	429a      	cmp	r2, r3
 800474e:	d04e      	beq.n	80047ee <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	4413      	add	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	1ad2      	subs	r2, r2, r3
 800476a:	2308      	movs	r3, #8
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	429a      	cmp	r2, r3
 8004770:	d922      	bls.n	80047b8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <pvPortMalloc+0x104>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	b672      	cpsid	i
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	b662      	cpsie	i
 8004798:	613b      	str	r3, [r7, #16]
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	e7fd      	b.n	800479c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f000 f902 	bl	80049bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <pvPortMalloc+0x190>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	4a1a      	ldr	r2, [pc, #104]	@ (800482c <pvPortMalloc+0x190>)
 80047c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047c6:	4b19      	ldr	r3, [pc, #100]	@ (800482c <pvPortMalloc+0x190>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <pvPortMalloc+0x198>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d203      	bcs.n	80047da <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <pvPortMalloc+0x190>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <pvPortMalloc+0x198>)
 80047d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <pvPortMalloc+0x18c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047ee:	f7ff fa4b 	bl	8003c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <pvPortMalloc+0x17c>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004800:	b672      	cpsid	i
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	b662      	cpsie	i
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <pvPortMalloc+0x178>
	return pvReturn;
 8004818:	69fb      	ldr	r3, [r7, #28]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3728      	adds	r7, #40	@ 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200040b0 	.word	0x200040b0
 8004828:	200040bc 	.word	0x200040bc
 800482c:	200040b4 	.word	0x200040b4
 8004830:	200040a8 	.word	0x200040a8
 8004834:	200040b8 	.word	0x200040b8

08004838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04e      	beq.n	80048e8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800484a:	2308      	movs	r3, #8
 800484c:	425b      	negs	r3, r3
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <vPortFree+0xb8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <vPortFree+0x4a>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	b672      	cpsid	i
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	b662      	cpsie	i
 800487a:	60fb      	str	r3, [r7, #12]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <vPortFree+0x6e>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	b672      	cpsid	i
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	b662      	cpsie	i
 800489e:	60bb      	str	r3, [r7, #8]
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	e7fd      	b.n	80048a2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4b11      	ldr	r3, [pc, #68]	@ (80048f0 <vPortFree+0xb8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d019      	beq.n	80048e8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d115      	bne.n	80048e8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <vPortFree+0xb8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048cc:	f7ff f9ce 	bl	8003c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <vPortFree+0xbc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	4a06      	ldr	r2, [pc, #24]	@ (80048f4 <vPortFree+0xbc>)
 80048dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048de:	6938      	ldr	r0, [r7, #16]
 80048e0:	f000 f86c 	bl	80049bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80048e4:	f7ff f9d0 	bl	8003c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048e8:	bf00      	nop
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200040bc 	.word	0x200040bc
 80048f4:	200040b4 	.word	0x200040b4

080048f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004902:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004904:	4b27      	ldr	r3, [pc, #156]	@ (80049a4 <prvHeapInit+0xac>)
 8004906:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00c      	beq.n	800492c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3307      	adds	r3, #7
 8004916:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	4a1f      	ldr	r2, [pc, #124]	@ (80049a4 <prvHeapInit+0xac>)
 8004928:	4413      	add	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004930:	4a1d      	ldr	r2, [pc, #116]	@ (80049a8 <prvHeapInit+0xb0>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004936:	4b1c      	ldr	r3, [pc, #112]	@ (80049a8 <prvHeapInit+0xb0>)
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004944:	2208      	movs	r2, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a15      	ldr	r2, [pc, #84]	@ (80049ac <prvHeapInit+0xb4>)
 8004958:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800495a:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <prvHeapInit+0xb4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004962:	4b12      	ldr	r3, [pc, #72]	@ (80049ac <prvHeapInit+0xb4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	1ad2      	subs	r2, r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <prvHeapInit+0xb4>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <prvHeapInit+0xb8>)
 8004986:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a09      	ldr	r2, [pc, #36]	@ (80049b4 <prvHeapInit+0xbc>)
 800498e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <prvHeapInit+0xc0>)
 8004992:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004996:	601a      	str	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	200004a8 	.word	0x200004a8
 80049a8:	200040a8 	.word	0x200040a8
 80049ac:	200040b0 	.word	0x200040b0
 80049b0:	200040b8 	.word	0x200040b8
 80049b4:	200040b4 	.word	0x200040b4
 80049b8:	200040bc 	.word	0x200040bc

080049bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c4:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <prvInsertBlockIntoFreeList+0xac>)
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <prvInsertBlockIntoFreeList+0x14>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d8f7      	bhi.n	80049ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d108      	bne.n	80049fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	441a      	add	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d118      	bne.n	8004a44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <prvInsertBlockIntoFreeList+0xb0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d00d      	beq.n	8004a3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e008      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <prvInsertBlockIntoFreeList+0xb0>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e003      	b.n	8004a4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d002      	beq.n	8004a5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	200040a8 	.word	0x200040a8
 8004a6c:	200040b0 	.word	0x200040b0

08004a70 <std>:
 8004a70:	2300      	movs	r3, #0
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4604      	mov	r4, r0
 8004a76:	e9c0 3300 	strd	r3, r3, [r0]
 8004a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a7e:	6083      	str	r3, [r0, #8]
 8004a80:	8181      	strh	r1, [r0, #12]
 8004a82:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a84:	81c2      	strh	r2, [r0, #14]
 8004a86:	6183      	str	r3, [r0, #24]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	305c      	adds	r0, #92	@ 0x5c
 8004a8e:	f000 f9e7 	bl	8004e60 <memset>
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <std+0x58>)
 8004a94:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <std+0x5c>)
 8004a98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <std+0x60>)
 8004a9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <std+0x64>)
 8004aa0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <std+0x68>)
 8004aa4:	6224      	str	r4, [r4, #32]
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d006      	beq.n	8004ab8 <std+0x48>
 8004aaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aae:	4294      	cmp	r4, r2
 8004ab0:	d002      	beq.n	8004ab8 <std+0x48>
 8004ab2:	33d0      	adds	r3, #208	@ 0xd0
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d105      	bne.n	8004ac4 <std+0x54>
 8004ab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac0:	f000 ba46 	b.w	8004f50 <__retarget_lock_init_recursive>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08004cb1 	.word	0x08004cb1
 8004acc:	08004cd3 	.word	0x08004cd3
 8004ad0:	08004d0b 	.word	0x08004d0b
 8004ad4:	08004d2f 	.word	0x08004d2f
 8004ad8:	200040c0 	.word	0x200040c0

08004adc <stdio_exit_handler>:
 8004adc:	4a02      	ldr	r2, [pc, #8]	@ (8004ae8 <stdio_exit_handler+0xc>)
 8004ade:	4903      	ldr	r1, [pc, #12]	@ (8004aec <stdio_exit_handler+0x10>)
 8004ae0:	4803      	ldr	r0, [pc, #12]	@ (8004af0 <stdio_exit_handler+0x14>)
 8004ae2:	f000 b869 	b.w	8004bb8 <_fwalk_sglue>
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	08005251 	.word	0x08005251
 8004af0:	20000020 	.word	0x20000020

08004af4 <cleanup_stdio>:
 8004af4:	6841      	ldr	r1, [r0, #4]
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <cleanup_stdio+0x34>)
 8004af8:	4299      	cmp	r1, r3
 8004afa:	b510      	push	{r4, lr}
 8004afc:	4604      	mov	r4, r0
 8004afe:	d001      	beq.n	8004b04 <cleanup_stdio+0x10>
 8004b00:	f000 fba6 	bl	8005250 <_fflush_r>
 8004b04:	68a1      	ldr	r1, [r4, #8]
 8004b06:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <cleanup_stdio+0x38>)
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d002      	beq.n	8004b12 <cleanup_stdio+0x1e>
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 fb9f 	bl	8005250 <_fflush_r>
 8004b12:	68e1      	ldr	r1, [r4, #12]
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <cleanup_stdio+0x3c>)
 8004b16:	4299      	cmp	r1, r3
 8004b18:	d004      	beq.n	8004b24 <cleanup_stdio+0x30>
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b20:	f000 bb96 	b.w	8005250 <_fflush_r>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	200040c0 	.word	0x200040c0
 8004b2c:	20004128 	.word	0x20004128
 8004b30:	20004190 	.word	0x20004190

08004b34 <global_stdio_init.part.0>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <global_stdio_init.part.0+0x30>)
 8004b38:	4c0b      	ldr	r4, [pc, #44]	@ (8004b68 <global_stdio_init.part.0+0x34>)
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <global_stdio_init.part.0+0x38>)
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	2200      	movs	r2, #0
 8004b42:	2104      	movs	r1, #4
 8004b44:	f7ff ff94 	bl	8004a70 <std>
 8004b48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2109      	movs	r1, #9
 8004b50:	f7ff ff8e 	bl	8004a70 <std>
 8004b54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b58:	2202      	movs	r2, #2
 8004b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5e:	2112      	movs	r1, #18
 8004b60:	f7ff bf86 	b.w	8004a70 <std>
 8004b64:	200041f8 	.word	0x200041f8
 8004b68:	200040c0 	.word	0x200040c0
 8004b6c:	08004add 	.word	0x08004add

08004b70 <__sfp_lock_acquire>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__sfp_lock_acquire+0x8>)
 8004b72:	f000 b9ee 	b.w	8004f52 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	20004201 	.word	0x20004201

08004b7c <__sfp_lock_release>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	@ (8004b84 <__sfp_lock_release+0x8>)
 8004b7e:	f000 b9e9 	b.w	8004f54 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	20004201 	.word	0x20004201

08004b88 <__sinit>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	f7ff fff0 	bl	8004b70 <__sfp_lock_acquire>
 8004b90:	6a23      	ldr	r3, [r4, #32]
 8004b92:	b11b      	cbz	r3, 8004b9c <__sinit+0x14>
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	f7ff bff0 	b.w	8004b7c <__sfp_lock_release>
 8004b9c:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <__sinit+0x28>)
 8004b9e:	6223      	str	r3, [r4, #32]
 8004ba0:	4b04      	ldr	r3, [pc, #16]	@ (8004bb4 <__sinit+0x2c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f5      	bne.n	8004b94 <__sinit+0xc>
 8004ba8:	f7ff ffc4 	bl	8004b34 <global_stdio_init.part.0>
 8004bac:	e7f2      	b.n	8004b94 <__sinit+0xc>
 8004bae:	bf00      	nop
 8004bb0:	08004af5 	.word	0x08004af5
 8004bb4:	200041f8 	.word	0x200041f8

08004bb8 <_fwalk_sglue>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	4688      	mov	r8, r1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bcc:	d505      	bpl.n	8004bda <_fwalk_sglue+0x22>
 8004bce:	6824      	ldr	r4, [r4, #0]
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	d1f7      	bne.n	8004bc4 <_fwalk_sglue+0xc>
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bda:	89ab      	ldrh	r3, [r5, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d907      	bls.n	8004bf0 <_fwalk_sglue+0x38>
 8004be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d003      	beq.n	8004bf0 <_fwalk_sglue+0x38>
 8004be8:	4629      	mov	r1, r5
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c0      	blx	r8
 8004bee:	4306      	orrs	r6, r0
 8004bf0:	3568      	adds	r5, #104	@ 0x68
 8004bf2:	e7e9      	b.n	8004bc8 <_fwalk_sglue+0x10>

08004bf4 <_puts_r>:
 8004bf4:	6a03      	ldr	r3, [r0, #32]
 8004bf6:	b570      	push	{r4, r5, r6, lr}
 8004bf8:	6884      	ldr	r4, [r0, #8]
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	460e      	mov	r6, r1
 8004bfe:	b90b      	cbnz	r3, 8004c04 <_puts_r+0x10>
 8004c00:	f7ff ffc2 	bl	8004b88 <__sinit>
 8004c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c06:	07db      	lsls	r3, r3, #31
 8004c08:	d405      	bmi.n	8004c16 <_puts_r+0x22>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	0598      	lsls	r0, r3, #22
 8004c0e:	d402      	bmi.n	8004c16 <_puts_r+0x22>
 8004c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c12:	f000 f99e 	bl	8004f52 <__retarget_lock_acquire_recursive>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	0719      	lsls	r1, r3, #28
 8004c1a:	d502      	bpl.n	8004c22 <_puts_r+0x2e>
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d135      	bne.n	8004c8e <_puts_r+0x9a>
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 f8c5 	bl	8004db4 <__swsetup_r>
 8004c2a:	b380      	cbz	r0, 8004c8e <_puts_r+0x9a>
 8004c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c32:	07da      	lsls	r2, r3, #31
 8004c34:	d405      	bmi.n	8004c42 <_puts_r+0x4e>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	059b      	lsls	r3, r3, #22
 8004c3a:	d402      	bmi.n	8004c42 <_puts_r+0x4e>
 8004c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c3e:	f000 f989 	bl	8004f54 <__retarget_lock_release_recursive>
 8004c42:	4628      	mov	r0, r5
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da04      	bge.n	8004c54 <_puts_r+0x60>
 8004c4a:	69a2      	ldr	r2, [r4, #24]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	dc17      	bgt.n	8004c80 <_puts_r+0x8c>
 8004c50:	290a      	cmp	r1, #10
 8004c52:	d015      	beq.n	8004c80 <_puts_r+0x8c>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	7019      	strb	r1, [r3, #0]
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c62:	3b01      	subs	r3, #1
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d1ed      	bne.n	8004c46 <_puts_r+0x52>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da11      	bge.n	8004c92 <_puts_r+0x9e>
 8004c6e:	4622      	mov	r2, r4
 8004c70:	210a      	movs	r1, #10
 8004c72:	4628      	mov	r0, r5
 8004c74:	f000 f85f 	bl	8004d36 <__swbuf_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d0d7      	beq.n	8004c2c <_puts_r+0x38>
 8004c7c:	250a      	movs	r5, #10
 8004c7e:	e7d7      	b.n	8004c30 <_puts_r+0x3c>
 8004c80:	4622      	mov	r2, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f857 	bl	8004d36 <__swbuf_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1e7      	bne.n	8004c5c <_puts_r+0x68>
 8004c8c:	e7ce      	b.n	8004c2c <_puts_r+0x38>
 8004c8e:	3e01      	subs	r6, #1
 8004c90:	e7e4      	b.n	8004c5c <_puts_r+0x68>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	6022      	str	r2, [r4, #0]
 8004c98:	220a      	movs	r2, #10
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e7ee      	b.n	8004c7c <_puts_r+0x88>
	...

08004ca0 <puts>:
 8004ca0:	4b02      	ldr	r3, [pc, #8]	@ (8004cac <puts+0xc>)
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f7ff bfa5 	b.w	8004bf4 <_puts_r>
 8004caa:	bf00      	nop
 8004cac:	2000001c 	.word	0x2000001c

08004cb0 <__sread>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	f000 f8fc 	bl	8004eb4 <_read_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	bfab      	itete	ge
 8004cc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004cc4:	181b      	addge	r3, r3, r0
 8004cc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cca:	bfac      	ite	ge
 8004ccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cce:	81a3      	strhlt	r3, [r4, #12]
 8004cd0:	bd10      	pop	{r4, pc}

08004cd2 <__swrite>:
 8004cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	898b      	ldrh	r3, [r1, #12]
 8004cda:	05db      	lsls	r3, r3, #23
 8004cdc:	4605      	mov	r5, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	d505      	bpl.n	8004cf0 <__swrite+0x1e>
 8004ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce8:	2302      	movs	r3, #2
 8004cea:	2200      	movs	r2, #0
 8004cec:	f000 f8d0 	bl	8004e90 <_lseek_r>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cfa:	81a3      	strh	r3, [r4, #12]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	4628      	mov	r0, r5
 8004d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d06:	f000 b8e7 	b.w	8004ed8 <_write_r>

08004d0a <__sseek>:
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d12:	f000 f8bd 	bl	8004e90 <_lseek_r>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	bf15      	itete	ne
 8004d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d26:	81a3      	strheq	r3, [r4, #12]
 8004d28:	bf18      	it	ne
 8004d2a:	81a3      	strhne	r3, [r4, #12]
 8004d2c:	bd10      	pop	{r4, pc}

08004d2e <__sclose>:
 8004d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d32:	f000 b89d 	b.w	8004e70 <_close_r>

08004d36 <__swbuf_r>:
 8004d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d38:	460e      	mov	r6, r1
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	b118      	cbz	r0, 8004d48 <__swbuf_r+0x12>
 8004d40:	6a03      	ldr	r3, [r0, #32]
 8004d42:	b90b      	cbnz	r3, 8004d48 <__swbuf_r+0x12>
 8004d44:	f7ff ff20 	bl	8004b88 <__sinit>
 8004d48:	69a3      	ldr	r3, [r4, #24]
 8004d4a:	60a3      	str	r3, [r4, #8]
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	071a      	lsls	r2, r3, #28
 8004d50:	d501      	bpl.n	8004d56 <__swbuf_r+0x20>
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	b943      	cbnz	r3, 8004d68 <__swbuf_r+0x32>
 8004d56:	4621      	mov	r1, r4
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f000 f82b 	bl	8004db4 <__swsetup_r>
 8004d5e:	b118      	cbz	r0, 8004d68 <__swbuf_r+0x32>
 8004d60:	f04f 37ff 	mov.w	r7, #4294967295
 8004d64:	4638      	mov	r0, r7
 8004d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	6922      	ldr	r2, [r4, #16]
 8004d6c:	1a98      	subs	r0, r3, r2
 8004d6e:	6963      	ldr	r3, [r4, #20]
 8004d70:	b2f6      	uxtb	r6, r6
 8004d72:	4283      	cmp	r3, r0
 8004d74:	4637      	mov	r7, r6
 8004d76:	dc05      	bgt.n	8004d84 <__swbuf_r+0x4e>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 fa68 	bl	8005250 <_fflush_r>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1ed      	bne.n	8004d60 <__swbuf_r+0x2a>
 8004d84:	68a3      	ldr	r3, [r4, #8]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	60a3      	str	r3, [r4, #8]
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	6022      	str	r2, [r4, #0]
 8004d90:	701e      	strb	r6, [r3, #0]
 8004d92:	6962      	ldr	r2, [r4, #20]
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d004      	beq.n	8004da4 <__swbuf_r+0x6e>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	07db      	lsls	r3, r3, #31
 8004d9e:	d5e1      	bpl.n	8004d64 <__swbuf_r+0x2e>
 8004da0:	2e0a      	cmp	r6, #10
 8004da2:	d1df      	bne.n	8004d64 <__swbuf_r+0x2e>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fa52 	bl	8005250 <_fflush_r>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d0d9      	beq.n	8004d64 <__swbuf_r+0x2e>
 8004db0:	e7d6      	b.n	8004d60 <__swbuf_r+0x2a>
	...

08004db4 <__swsetup_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <__swsetup_r+0xa8>)
 8004db8:	4605      	mov	r5, r0
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	b118      	cbz	r0, 8004dc8 <__swsetup_r+0x14>
 8004dc0:	6a03      	ldr	r3, [r0, #32]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <__swsetup_r+0x14>
 8004dc4:	f7ff fee0 	bl	8004b88 <__sinit>
 8004dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dcc:	0719      	lsls	r1, r3, #28
 8004dce:	d422      	bmi.n	8004e16 <__swsetup_r+0x62>
 8004dd0:	06da      	lsls	r2, r3, #27
 8004dd2:	d407      	bmi.n	8004de4 <__swsetup_r+0x30>
 8004dd4:	2209      	movs	r2, #9
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	e033      	b.n	8004e4c <__swsetup_r+0x98>
 8004de4:	0758      	lsls	r0, r3, #29
 8004de6:	d512      	bpl.n	8004e0e <__swsetup_r+0x5a>
 8004de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dea:	b141      	cbz	r1, 8004dfe <__swsetup_r+0x4a>
 8004dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df0:	4299      	cmp	r1, r3
 8004df2:	d002      	beq.n	8004dfa <__swsetup_r+0x46>
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 f8af 	bl	8004f58 <_free_r>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	2300      	movs	r3, #0
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	b94b      	cbnz	r3, 8004e2e <__swsetup_r+0x7a>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e24:	d003      	beq.n	8004e2e <__swsetup_r+0x7a>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 fa5f 	bl	80052ec <__smakebuf_r>
 8004e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e32:	f013 0201 	ands.w	r2, r3, #1
 8004e36:	d00a      	beq.n	8004e4e <__swsetup_r+0x9a>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	60a2      	str	r2, [r4, #8]
 8004e3c:	6962      	ldr	r2, [r4, #20]
 8004e3e:	4252      	negs	r2, r2
 8004e40:	61a2      	str	r2, [r4, #24]
 8004e42:	6922      	ldr	r2, [r4, #16]
 8004e44:	b942      	cbnz	r2, 8004e58 <__swsetup_r+0xa4>
 8004e46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e4a:	d1c5      	bne.n	8004dd8 <__swsetup_r+0x24>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	0799      	lsls	r1, r3, #30
 8004e50:	bf58      	it	pl
 8004e52:	6962      	ldrpl	r2, [r4, #20]
 8004e54:	60a2      	str	r2, [r4, #8]
 8004e56:	e7f4      	b.n	8004e42 <__swsetup_r+0x8e>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e7f7      	b.n	8004e4c <__swsetup_r+0x98>
 8004e5c:	2000001c 	.word	0x2000001c

08004e60 <memset>:
 8004e60:	4402      	add	r2, r0
 8004e62:	4603      	mov	r3, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <_close_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d06      	ldr	r5, [pc, #24]	@ (8004e8c <_close_r+0x1c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fc f93b 	bl	80010f6 <_close>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_close_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_close_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200041fc 	.word	0x200041fc

08004e90 <_lseek_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d07      	ldr	r5, [pc, #28]	@ (8004eb0 <_lseek_r+0x20>)
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fc f950 	bl	8001144 <_lseek>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_lseek_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_lseek_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	200041fc 	.word	0x200041fc

08004eb4 <_read_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	@ (8004ed4 <_read_r+0x20>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	4608      	mov	r0, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fc f8de 	bl	8001084 <_read>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_read_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_read_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	200041fc 	.word	0x200041fc

08004ed8 <_write_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4d07      	ldr	r5, [pc, #28]	@ (8004ef8 <_write_r+0x20>)
 8004edc:	4604      	mov	r4, r0
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	602a      	str	r2, [r5, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f7fc f8e9 	bl	80010be <_write>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_write_r+0x1e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_write_r+0x1e>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	200041fc 	.word	0x200041fc

08004efc <__errno>:
 8004efc:	4b01      	ldr	r3, [pc, #4]	@ (8004f04 <__errno+0x8>)
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000001c 	.word	0x2000001c

08004f08 <__libc_init_array>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f40 <__libc_init_array+0x38>)
 8004f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f44 <__libc_init_array+0x3c>)
 8004f0e:	1b64      	subs	r4, r4, r5
 8004f10:	10a4      	asrs	r4, r4, #2
 8004f12:	2600      	movs	r6, #0
 8004f14:	42a6      	cmp	r6, r4
 8004f16:	d109      	bne.n	8004f2c <__libc_init_array+0x24>
 8004f18:	4d0b      	ldr	r5, [pc, #44]	@ (8004f48 <__libc_init_array+0x40>)
 8004f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f4c <__libc_init_array+0x44>)
 8004f1c:	f000 fa54 	bl	80053c8 <_init>
 8004f20:	1b64      	subs	r4, r4, r5
 8004f22:	10a4      	asrs	r4, r4, #2
 8004f24:	2600      	movs	r6, #0
 8004f26:	42a6      	cmp	r6, r4
 8004f28:	d105      	bne.n	8004f36 <__libc_init_array+0x2e>
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f30:	4798      	blx	r3
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7ee      	b.n	8004f14 <__libc_init_array+0xc>
 8004f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3a:	4798      	blx	r3
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	e7f2      	b.n	8004f26 <__libc_init_array+0x1e>
 8004f40:	08005464 	.word	0x08005464
 8004f44:	08005464 	.word	0x08005464
 8004f48:	08005464 	.word	0x08005464
 8004f4c:	08005468 	.word	0x08005468

08004f50 <__retarget_lock_init_recursive>:
 8004f50:	4770      	bx	lr

08004f52 <__retarget_lock_acquire_recursive>:
 8004f52:	4770      	bx	lr

08004f54 <__retarget_lock_release_recursive>:
 8004f54:	4770      	bx	lr
	...

08004f58 <_free_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d041      	beq.n	8004fe4 <_free_r+0x8c>
 8004f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f64:	1f0c      	subs	r4, r1, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfb8      	it	lt
 8004f6a:	18e4      	addlt	r4, r4, r3
 8004f6c:	f000 f8e0 	bl	8005130 <__malloc_lock>
 8004f70:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <_free_r+0x90>)
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	b933      	cbnz	r3, 8004f84 <_free_r+0x2c>
 8004f76:	6063      	str	r3, [r4, #4]
 8004f78:	6014      	str	r4, [r2, #0]
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f80:	f000 b8dc 	b.w	800513c <__malloc_unlock>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d908      	bls.n	8004f9a <_free_r+0x42>
 8004f88:	6820      	ldr	r0, [r4, #0]
 8004f8a:	1821      	adds	r1, r4, r0
 8004f8c:	428b      	cmp	r3, r1
 8004f8e:	bf01      	itttt	eq
 8004f90:	6819      	ldreq	r1, [r3, #0]
 8004f92:	685b      	ldreq	r3, [r3, #4]
 8004f94:	1809      	addeq	r1, r1, r0
 8004f96:	6021      	streq	r1, [r4, #0]
 8004f98:	e7ed      	b.n	8004f76 <_free_r+0x1e>
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	b10b      	cbz	r3, 8004fa4 <_free_r+0x4c>
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	d9fa      	bls.n	8004f9a <_free_r+0x42>
 8004fa4:	6811      	ldr	r1, [r2, #0]
 8004fa6:	1850      	adds	r0, r2, r1
 8004fa8:	42a0      	cmp	r0, r4
 8004faa:	d10b      	bne.n	8004fc4 <_free_r+0x6c>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	4401      	add	r1, r0
 8004fb0:	1850      	adds	r0, r2, r1
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	d1e0      	bne.n	8004f7a <_free_r+0x22>
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	6053      	str	r3, [r2, #4]
 8004fbe:	4408      	add	r0, r1
 8004fc0:	6010      	str	r0, [r2, #0]
 8004fc2:	e7da      	b.n	8004f7a <_free_r+0x22>
 8004fc4:	d902      	bls.n	8004fcc <_free_r+0x74>
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	e7d6      	b.n	8004f7a <_free_r+0x22>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	1821      	adds	r1, r4, r0
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf04      	itt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	6063      	str	r3, [r4, #4]
 8004fda:	bf04      	itt	eq
 8004fdc:	1809      	addeq	r1, r1, r0
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	6054      	str	r4, [r2, #4]
 8004fe2:	e7ca      	b.n	8004f7a <_free_r+0x22>
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20004208 	.word	0x20004208

08004fec <sbrk_aligned>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4e0f      	ldr	r6, [pc, #60]	@ (800502c <sbrk_aligned+0x40>)
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	6831      	ldr	r1, [r6, #0]
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	b911      	cbnz	r1, 8004ffe <sbrk_aligned+0x12>
 8004ff8:	f000 f9d6 	bl	80053a8 <_sbrk_r>
 8004ffc:	6030      	str	r0, [r6, #0]
 8004ffe:	4621      	mov	r1, r4
 8005000:	4628      	mov	r0, r5
 8005002:	f000 f9d1 	bl	80053a8 <_sbrk_r>
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	d103      	bne.n	8005012 <sbrk_aligned+0x26>
 800500a:	f04f 34ff 	mov.w	r4, #4294967295
 800500e:	4620      	mov	r0, r4
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	1cc4      	adds	r4, r0, #3
 8005014:	f024 0403 	bic.w	r4, r4, #3
 8005018:	42a0      	cmp	r0, r4
 800501a:	d0f8      	beq.n	800500e <sbrk_aligned+0x22>
 800501c:	1a21      	subs	r1, r4, r0
 800501e:	4628      	mov	r0, r5
 8005020:	f000 f9c2 	bl	80053a8 <_sbrk_r>
 8005024:	3001      	adds	r0, #1
 8005026:	d1f2      	bne.n	800500e <sbrk_aligned+0x22>
 8005028:	e7ef      	b.n	800500a <sbrk_aligned+0x1e>
 800502a:	bf00      	nop
 800502c:	20004204 	.word	0x20004204

08005030 <_malloc_r>:
 8005030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005034:	1ccd      	adds	r5, r1, #3
 8005036:	f025 0503 	bic.w	r5, r5, #3
 800503a:	3508      	adds	r5, #8
 800503c:	2d0c      	cmp	r5, #12
 800503e:	bf38      	it	cc
 8005040:	250c      	movcc	r5, #12
 8005042:	2d00      	cmp	r5, #0
 8005044:	4606      	mov	r6, r0
 8005046:	db01      	blt.n	800504c <_malloc_r+0x1c>
 8005048:	42a9      	cmp	r1, r5
 800504a:	d904      	bls.n	8005056 <_malloc_r+0x26>
 800504c:	230c      	movs	r3, #12
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	2000      	movs	r0, #0
 8005052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800512c <_malloc_r+0xfc>
 800505a:	f000 f869 	bl	8005130 <__malloc_lock>
 800505e:	f8d8 3000 	ldr.w	r3, [r8]
 8005062:	461c      	mov	r4, r3
 8005064:	bb44      	cbnz	r4, 80050b8 <_malloc_r+0x88>
 8005066:	4629      	mov	r1, r5
 8005068:	4630      	mov	r0, r6
 800506a:	f7ff ffbf 	bl	8004fec <sbrk_aligned>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	4604      	mov	r4, r0
 8005072:	d158      	bne.n	8005126 <_malloc_r+0xf6>
 8005074:	f8d8 4000 	ldr.w	r4, [r8]
 8005078:	4627      	mov	r7, r4
 800507a:	2f00      	cmp	r7, #0
 800507c:	d143      	bne.n	8005106 <_malloc_r+0xd6>
 800507e:	2c00      	cmp	r4, #0
 8005080:	d04b      	beq.n	800511a <_malloc_r+0xea>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	4639      	mov	r1, r7
 8005086:	4630      	mov	r0, r6
 8005088:	eb04 0903 	add.w	r9, r4, r3
 800508c:	f000 f98c 	bl	80053a8 <_sbrk_r>
 8005090:	4581      	cmp	r9, r0
 8005092:	d142      	bne.n	800511a <_malloc_r+0xea>
 8005094:	6821      	ldr	r1, [r4, #0]
 8005096:	1a6d      	subs	r5, r5, r1
 8005098:	4629      	mov	r1, r5
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff ffa6 	bl	8004fec <sbrk_aligned>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d03a      	beq.n	800511a <_malloc_r+0xea>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	442b      	add	r3, r5
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	f8d8 3000 	ldr.w	r3, [r8]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	bb62      	cbnz	r2, 800510c <_malloc_r+0xdc>
 80050b2:	f8c8 7000 	str.w	r7, [r8]
 80050b6:	e00f      	b.n	80050d8 <_malloc_r+0xa8>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	1b52      	subs	r2, r2, r5
 80050bc:	d420      	bmi.n	8005100 <_malloc_r+0xd0>
 80050be:	2a0b      	cmp	r2, #11
 80050c0:	d917      	bls.n	80050f2 <_malloc_r+0xc2>
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	6025      	str	r5, [r4, #0]
 80050c8:	bf18      	it	ne
 80050ca:	6059      	strne	r1, [r3, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	bf08      	it	eq
 80050d0:	f8c8 1000 	streq.w	r1, [r8]
 80050d4:	5162      	str	r2, [r4, r5]
 80050d6:	604b      	str	r3, [r1, #4]
 80050d8:	4630      	mov	r0, r6
 80050da:	f000 f82f 	bl	800513c <__malloc_unlock>
 80050de:	f104 000b 	add.w	r0, r4, #11
 80050e2:	1d23      	adds	r3, r4, #4
 80050e4:	f020 0007 	bic.w	r0, r0, #7
 80050e8:	1ac2      	subs	r2, r0, r3
 80050ea:	bf1c      	itt	ne
 80050ec:	1a1b      	subne	r3, r3, r0
 80050ee:	50a3      	strne	r3, [r4, r2]
 80050f0:	e7af      	b.n	8005052 <_malloc_r+0x22>
 80050f2:	6862      	ldr	r2, [r4, #4]
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	bf0c      	ite	eq
 80050f8:	f8c8 2000 	streq.w	r2, [r8]
 80050fc:	605a      	strne	r2, [r3, #4]
 80050fe:	e7eb      	b.n	80050d8 <_malloc_r+0xa8>
 8005100:	4623      	mov	r3, r4
 8005102:	6864      	ldr	r4, [r4, #4]
 8005104:	e7ae      	b.n	8005064 <_malloc_r+0x34>
 8005106:	463c      	mov	r4, r7
 8005108:	687f      	ldr	r7, [r7, #4]
 800510a:	e7b6      	b.n	800507a <_malloc_r+0x4a>
 800510c:	461a      	mov	r2, r3
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	42a3      	cmp	r3, r4
 8005112:	d1fb      	bne.n	800510c <_malloc_r+0xdc>
 8005114:	2300      	movs	r3, #0
 8005116:	6053      	str	r3, [r2, #4]
 8005118:	e7de      	b.n	80050d8 <_malloc_r+0xa8>
 800511a:	230c      	movs	r3, #12
 800511c:	6033      	str	r3, [r6, #0]
 800511e:	4630      	mov	r0, r6
 8005120:	f000 f80c 	bl	800513c <__malloc_unlock>
 8005124:	e794      	b.n	8005050 <_malloc_r+0x20>
 8005126:	6005      	str	r5, [r0, #0]
 8005128:	e7d6      	b.n	80050d8 <_malloc_r+0xa8>
 800512a:	bf00      	nop
 800512c:	20004208 	.word	0x20004208

08005130 <__malloc_lock>:
 8005130:	4801      	ldr	r0, [pc, #4]	@ (8005138 <__malloc_lock+0x8>)
 8005132:	f7ff bf0e 	b.w	8004f52 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	20004200 	.word	0x20004200

0800513c <__malloc_unlock>:
 800513c:	4801      	ldr	r0, [pc, #4]	@ (8005144 <__malloc_unlock+0x8>)
 800513e:	f7ff bf09 	b.w	8004f54 <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	20004200 	.word	0x20004200

08005148 <__sflush_r>:
 8005148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	0716      	lsls	r6, r2, #28
 8005152:	4605      	mov	r5, r0
 8005154:	460c      	mov	r4, r1
 8005156:	d454      	bmi.n	8005202 <__sflush_r+0xba>
 8005158:	684b      	ldr	r3, [r1, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	dc02      	bgt.n	8005164 <__sflush_r+0x1c>
 800515e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	dd48      	ble.n	80051f6 <__sflush_r+0xae>
 8005164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005166:	2e00      	cmp	r6, #0
 8005168:	d045      	beq.n	80051f6 <__sflush_r+0xae>
 800516a:	2300      	movs	r3, #0
 800516c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005170:	682f      	ldr	r7, [r5, #0]
 8005172:	6a21      	ldr	r1, [r4, #32]
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	d030      	beq.n	80051da <__sflush_r+0x92>
 8005178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	0759      	lsls	r1, r3, #29
 800517e:	d505      	bpl.n	800518c <__sflush_r+0x44>
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005186:	b10b      	cbz	r3, 800518c <__sflush_r+0x44>
 8005188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	2300      	movs	r3, #0
 800518e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005190:	6a21      	ldr	r1, [r4, #32]
 8005192:	4628      	mov	r0, r5
 8005194:	47b0      	blx	r6
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	d106      	bne.n	80051aa <__sflush_r+0x62>
 800519c:	6829      	ldr	r1, [r5, #0]
 800519e:	291d      	cmp	r1, #29
 80051a0:	d82b      	bhi.n	80051fa <__sflush_r+0xb2>
 80051a2:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <__sflush_r+0x104>)
 80051a4:	410a      	asrs	r2, r1
 80051a6:	07d6      	lsls	r6, r2, #31
 80051a8:	d427      	bmi.n	80051fa <__sflush_r+0xb2>
 80051aa:	2200      	movs	r2, #0
 80051ac:	6062      	str	r2, [r4, #4]
 80051ae:	04d9      	lsls	r1, r3, #19
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	6022      	str	r2, [r4, #0]
 80051b4:	d504      	bpl.n	80051c0 <__sflush_r+0x78>
 80051b6:	1c42      	adds	r2, r0, #1
 80051b8:	d101      	bne.n	80051be <__sflush_r+0x76>
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	b903      	cbnz	r3, 80051c0 <__sflush_r+0x78>
 80051be:	6560      	str	r0, [r4, #84]	@ 0x54
 80051c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051c2:	602f      	str	r7, [r5, #0]
 80051c4:	b1b9      	cbz	r1, 80051f6 <__sflush_r+0xae>
 80051c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d002      	beq.n	80051d4 <__sflush_r+0x8c>
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7ff fec2 	bl	8004f58 <_free_r>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80051d8:	e00d      	b.n	80051f6 <__sflush_r+0xae>
 80051da:	2301      	movs	r3, #1
 80051dc:	4628      	mov	r0, r5
 80051de:	47b0      	blx	r6
 80051e0:	4602      	mov	r2, r0
 80051e2:	1c50      	adds	r0, r2, #1
 80051e4:	d1c9      	bne.n	800517a <__sflush_r+0x32>
 80051e6:	682b      	ldr	r3, [r5, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0c6      	beq.n	800517a <__sflush_r+0x32>
 80051ec:	2b1d      	cmp	r3, #29
 80051ee:	d001      	beq.n	80051f4 <__sflush_r+0xac>
 80051f0:	2b16      	cmp	r3, #22
 80051f2:	d11e      	bne.n	8005232 <__sflush_r+0xea>
 80051f4:	602f      	str	r7, [r5, #0]
 80051f6:	2000      	movs	r0, #0
 80051f8:	e022      	b.n	8005240 <__sflush_r+0xf8>
 80051fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fe:	b21b      	sxth	r3, r3
 8005200:	e01b      	b.n	800523a <__sflush_r+0xf2>
 8005202:	690f      	ldr	r7, [r1, #16]
 8005204:	2f00      	cmp	r7, #0
 8005206:	d0f6      	beq.n	80051f6 <__sflush_r+0xae>
 8005208:	0793      	lsls	r3, r2, #30
 800520a:	680e      	ldr	r6, [r1, #0]
 800520c:	bf08      	it	eq
 800520e:	694b      	ldreq	r3, [r1, #20]
 8005210:	600f      	str	r7, [r1, #0]
 8005212:	bf18      	it	ne
 8005214:	2300      	movne	r3, #0
 8005216:	eba6 0807 	sub.w	r8, r6, r7
 800521a:	608b      	str	r3, [r1, #8]
 800521c:	f1b8 0f00 	cmp.w	r8, #0
 8005220:	dde9      	ble.n	80051f6 <__sflush_r+0xae>
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005226:	4643      	mov	r3, r8
 8005228:	463a      	mov	r2, r7
 800522a:	4628      	mov	r0, r5
 800522c:	47b0      	blx	r6
 800522e:	2800      	cmp	r0, #0
 8005230:	dc08      	bgt.n	8005244 <__sflush_r+0xfc>
 8005232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	4407      	add	r7, r0
 8005246:	eba8 0800 	sub.w	r8, r8, r0
 800524a:	e7e7      	b.n	800521c <__sflush_r+0xd4>
 800524c:	dfbffffe 	.word	0xdfbffffe

08005250 <_fflush_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	690b      	ldr	r3, [r1, #16]
 8005254:	4605      	mov	r5, r0
 8005256:	460c      	mov	r4, r1
 8005258:	b913      	cbnz	r3, 8005260 <_fflush_r+0x10>
 800525a:	2500      	movs	r5, #0
 800525c:	4628      	mov	r0, r5
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	b118      	cbz	r0, 800526a <_fflush_r+0x1a>
 8005262:	6a03      	ldr	r3, [r0, #32]
 8005264:	b90b      	cbnz	r3, 800526a <_fflush_r+0x1a>
 8005266:	f7ff fc8f 	bl	8004b88 <__sinit>
 800526a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f3      	beq.n	800525a <_fflush_r+0xa>
 8005272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005274:	07d0      	lsls	r0, r2, #31
 8005276:	d404      	bmi.n	8005282 <_fflush_r+0x32>
 8005278:	0599      	lsls	r1, r3, #22
 800527a:	d402      	bmi.n	8005282 <_fflush_r+0x32>
 800527c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800527e:	f7ff fe68 	bl	8004f52 <__retarget_lock_acquire_recursive>
 8005282:	4628      	mov	r0, r5
 8005284:	4621      	mov	r1, r4
 8005286:	f7ff ff5f 	bl	8005148 <__sflush_r>
 800528a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800528c:	07da      	lsls	r2, r3, #31
 800528e:	4605      	mov	r5, r0
 8005290:	d4e4      	bmi.n	800525c <_fflush_r+0xc>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	059b      	lsls	r3, r3, #22
 8005296:	d4e1      	bmi.n	800525c <_fflush_r+0xc>
 8005298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800529a:	f7ff fe5b 	bl	8004f54 <__retarget_lock_release_recursive>
 800529e:	e7dd      	b.n	800525c <_fflush_r+0xc>

080052a0 <__swhatbuf_r>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	460c      	mov	r4, r1
 80052a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	b096      	sub	sp, #88	@ 0x58
 80052ac:	4615      	mov	r5, r2
 80052ae:	461e      	mov	r6, r3
 80052b0:	da0d      	bge.n	80052ce <__swhatbuf_r+0x2e>
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	bf14      	ite	ne
 80052be:	2340      	movne	r3, #64	@ 0x40
 80052c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052c4:	2000      	movs	r0, #0
 80052c6:	6031      	str	r1, [r6, #0]
 80052c8:	602b      	str	r3, [r5, #0]
 80052ca:	b016      	add	sp, #88	@ 0x58
 80052cc:	bd70      	pop	{r4, r5, r6, pc}
 80052ce:	466a      	mov	r2, sp
 80052d0:	f000 f848 	bl	8005364 <_fstat_r>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	dbec      	blt.n	80052b2 <__swhatbuf_r+0x12>
 80052d8:	9901      	ldr	r1, [sp, #4]
 80052da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052e2:	4259      	negs	r1, r3
 80052e4:	4159      	adcs	r1, r3
 80052e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052ea:	e7eb      	b.n	80052c4 <__swhatbuf_r+0x24>

080052ec <__smakebuf_r>:
 80052ec:	898b      	ldrh	r3, [r1, #12]
 80052ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f0:	079d      	lsls	r5, r3, #30
 80052f2:	4606      	mov	r6, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	d507      	bpl.n	8005308 <__smakebuf_r+0x1c>
 80052f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	6123      	str	r3, [r4, #16]
 8005300:	2301      	movs	r3, #1
 8005302:	6163      	str	r3, [r4, #20]
 8005304:	b003      	add	sp, #12
 8005306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005308:	ab01      	add	r3, sp, #4
 800530a:	466a      	mov	r2, sp
 800530c:	f7ff ffc8 	bl	80052a0 <__swhatbuf_r>
 8005310:	9f00      	ldr	r7, [sp, #0]
 8005312:	4605      	mov	r5, r0
 8005314:	4639      	mov	r1, r7
 8005316:	4630      	mov	r0, r6
 8005318:	f7ff fe8a 	bl	8005030 <_malloc_r>
 800531c:	b948      	cbnz	r0, 8005332 <__smakebuf_r+0x46>
 800531e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005322:	059a      	lsls	r2, r3, #22
 8005324:	d4ee      	bmi.n	8005304 <__smakebuf_r+0x18>
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	e7e2      	b.n	80052f8 <__smakebuf_r+0xc>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	6020      	str	r0, [r4, #0]
 8005336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005342:	b15b      	cbz	r3, 800535c <__smakebuf_r+0x70>
 8005344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005348:	4630      	mov	r0, r6
 800534a:	f000 f81d 	bl	8005388 <_isatty_r>
 800534e:	b128      	cbz	r0, 800535c <__smakebuf_r+0x70>
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	81a3      	strh	r3, [r4, #12]
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	431d      	orrs	r5, r3
 8005360:	81a5      	strh	r5, [r4, #12]
 8005362:	e7cf      	b.n	8005304 <__smakebuf_r+0x18>

08005364 <_fstat_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d07      	ldr	r5, [pc, #28]	@ (8005384 <_fstat_r+0x20>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	602b      	str	r3, [r5, #0]
 8005372:	f7fb fecc 	bl	800110e <_fstat>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	d102      	bne.n	8005380 <_fstat_r+0x1c>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	b103      	cbz	r3, 8005380 <_fstat_r+0x1c>
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	bd38      	pop	{r3, r4, r5, pc}
 8005382:	bf00      	nop
 8005384:	200041fc 	.word	0x200041fc

08005388 <_isatty_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d06      	ldr	r5, [pc, #24]	@ (80053a4 <_isatty_r+0x1c>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb fecb 	bl	800112e <_isatty>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_isatty_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_isatty_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200041fc 	.word	0x200041fc

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d06      	ldr	r5, [pc, #24]	@ (80053c4 <_sbrk_r+0x1c>)
 80053ac:	2300      	movs	r3, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f7fb fed4 	bl	8001160 <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	200041fc 	.word	0x200041fc

080053c8 <_init>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr

080053d4 <_fini>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr
