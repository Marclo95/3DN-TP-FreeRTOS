
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005790  08005790  00006790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005948  08005948  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005950  08005950  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00006950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005958  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  2000006c  080059c4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004218  080059c4  00007218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f28e  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c2  00000000  00000000  0001632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00018cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d2  00000000  00000000  000199e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028354  00000000  00000000  0001a3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c8d  00000000  00000000  0004270e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f20ae  00000000  00000000  0005339b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  0014548c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00148d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005778 	.word	0x08005778

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005778 	.word	0x08005778

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <__NVIC_SystemReset+0x24>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000512:	4904      	ldr	r1, [pc, #16]	@ (8000524 <__NVIC_SystemReset+0x24>)
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <__NVIC_SystemReset+0x28>)
 8000516:	4313      	orrs	r3, r2
 8000518:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800051a:	f3bf 8f4f 	dsb	sy
}
 800051e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <__NVIC_SystemReset+0x20>
 8000524:	e000ed00 	.word	0xe000ed00
 8000528:	05fa0004 	.word	0x05fa0004

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	@ (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	601a      	str	r2, [r3, #0]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000009c 	.word	0x2000009c
 800055c:	200000f0 	.word	0x200000f0

08000560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b0a4      	sub	sp, #144	@ 0x90
 8000564:	af00      	add	r7, sp, #0
  //     printf("Erreur : Queue non créée !\r\n");
  // }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000566:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <MX_FREERTOS_Init+0xc8>)
 8000568:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f8f4 	bl	800376e <osThreadCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a28      	ldr	r2, [pc, #160]	@ (800062c <MX_FREERTOS_Init+0xcc>)
 800058a:	6013      	str	r3, [r2, #0]

  osThreadDef(LEDTASK, LEDtask, osPriorityNormal, 0, 128);
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <MX_FREERTOS_Init+0xd0>)
 800058e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTASKHandle = osThreadCreate(osThread(LEDTASK), NULL);
 80005a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 f8e1 	bl	800376e <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <MX_FREERTOS_Init+0xd4>)
 80005b0:	6013      	str	r3, [r2, #0]

  osThreadDef(TaskGIVE, StartTaskGive, osPriorityBelowNormal, 0, 128);
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_FREERTOS_Init+0xd8>)
 80005b4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005b8:	461d      	mov	r5, r3
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskGIVEHandle = osThreadCreate(osThread(TaskGIVE), NULL);
 80005c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f8ce 	bl	800376e <osThreadCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a19      	ldr	r2, [pc, #100]	@ (800063c <MX_FREERTOS_Init+0xdc>)
 80005d6:	6013      	str	r3, [r2, #0]

  osThreadDef(TaskTAKE, StartTaskTake, osPriorityHigh, 0, 128);
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_FREERTOS_Init+0xe0>)
 80005da:	f107 0420 	add.w	r4, r7, #32
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTAKEHandle = osThreadCreate(osThread(TaskTAKE), NULL);
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f8bb 	bl	800376e <osThreadCreate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_FREERTOS_Init+0xe4>)
 80005fc:	6013      	str	r3, [r2, #0]

  osThreadDef(myTask, StartTask, osPriorityIdle, 0, 128);
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_FREERTOS_Init+0xe8>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskHandle = osThreadCreate(osThread(myTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f8aa 	bl	800376e <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <MX_FREERTOS_Init+0xec>)
 800061e:	6013      	str	r3, [r2, #0]
  // configASSERT(pdPASS == ret);

  // ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
  // configASSERT(pdPASS == ret);
  /* USER CODE END RTOS_THREADS */
}
 8000620:	bf00      	nop
 8000622:	3790      	adds	r7, #144	@ 0x90
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	0800579c 	.word	0x0800579c
 800062c:	20000088 	.word	0x20000088
 8000630:	080057c0 	.word	0x080057c0
 8000634:	2000008c 	.word	0x2000008c
 8000638:	080057e8 	.word	0x080057e8
 800063c:	20000090 	.word	0x20000090
 8000640:	08005810 	.word	0x08005810
 8000644:	20000094 	.word	0x20000094
 8000648:	08005834 	.word	0x08005834
 800064c:	20000098 	.word	0x20000098

08000650 <StartDefaultTask>:

/* USER CODE BEGIN Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  for(;;)
  {
    osDelay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f003 f8d4 	bl	8003806 <osDelay>
 800065e:	e7fb      	b.n	8000658 <StartDefaultTask+0x8>

08000660 <LEDtask>:
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_LEDtask */
void LEDtask(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDtask */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000668:	2102      	movs	r1, #2
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <LEDtask+0x20>)
 800066c:	f001 fa75 	bl	8001b5a <HAL_GPIO_TogglePin>
    printf("LED toggled!\r\n");
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <LEDtask+0x24>)
 8000672:	f004 fced 	bl	8005050 <puts>
    vTaskDelay(100 / portTICK_PERIOD_MS);
 8000676:	2064      	movs	r0, #100	@ 0x64
 8000678:	f003 fb2c 	bl	8003cd4 <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 800067c:	bf00      	nop
 800067e:	e7f3      	b.n	8000668 <LEDtask+0x8>
 8000680:	40022000 	.word	0x40022000
 8000684:	08005850 	.word	0x08005850

08000688 <StartTaskGive>:
  /* USER CODE END LEDtask */
}

/* USER CODE BEGIN Header_StartTaskGive */
void StartTaskGive(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGive */
  uint32_t delayMs = 100;
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    printf("taskGive : notification envoyée !\r\n");
 8000694:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <StartTaskGive+0x38>)
 8000696:	f004 fcdb 	bl	8005050 <puts>

    xTaskNotifyGive(TaskTAKEHandle);
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <StartTaskGive+0x3c>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	2202      	movs	r2, #2
 80006a2:	2100      	movs	r1, #0
 80006a4:	f003 feba 	bl	800441c <xTaskGenericNotify>

    vTaskDelay(delayMs / portTICK_PERIOD_MS);
 80006a8:	68f8      	ldr	r0, [r7, #12]
 80006aa:	f003 fb13 	bl	8003cd4 <vTaskDelay>

    if (delayMs < 2000)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006b4:	d2ee      	bcs.n	8000694 <StartTaskGive+0xc>
    {
      delayMs += 100;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3364      	adds	r3, #100	@ 0x64
 80006ba:	60fb      	str	r3, [r7, #12]
    printf("taskGive : notification envoyée !\r\n");
 80006bc:	e7ea      	b.n	8000694 <StartTaskGive+0xc>
 80006be:	bf00      	nop
 80006c0:	08005860 	.word	0x08005860
 80006c4:	20000094 	.word	0x20000094

080006c8 <StartTaskTake>:
  /* USER CODE END StartTaskGive */
}

/* USER CODE BEGIN Header_StartTaskTake */
void StartTaskTake(void const * argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTake */
  for(;;)
  {
    if (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) > 0)
 80006d0:	f04f 31ff 	mov.w	r1, #4294967295
 80006d4:	2001      	movs	r0, #1
 80006d6:	f003 fe59 	bl	800438c <ulTaskNotifyTake>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f7      	beq.n	80006d0 <StartTaskTake+0x8>
    {
      printf("taskTake : notification reçue !\r\n");
 80006e0:	4801      	ldr	r0, [pc, #4]	@ (80006e8 <StartTaskTake+0x20>)
 80006e2:	f004 fcb5 	bl	8005050 <puts>
    if (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) > 0)
 80006e6:	e7f3      	b.n	80006d0 <StartTaskTake+0x8>
 80006e8:	08005884 	.word	0x08005884

080006ec <StartTask>:
  /* USER CODE END StartTaskTake */
}

/* USER CODE BEGIN Header_StartTask */
void StartTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  for(;;)
  {
    printf("Sécurité : attente notification 1s...\r\n");
 80006f4:	480b      	ldr	r0, [pc, #44]	@ (8000724 <StartTask+0x38>)
 80006f6:	f004 fcab 	bl	8005050 <puts>

    if (ulTaskNotifyTake(pdTRUE, 1000 / portTICK_PERIOD_MS) > 0)
 80006fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006fe:	2001      	movs	r0, #1
 8000700:	f003 fe44 	bl	800438c <ulTaskNotifyTake>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <StartTask+0x26>
    {
      printf("Sécurité : notification reçue !\r\n");
 800070a:	4807      	ldr	r0, [pc, #28]	@ (8000728 <StartTask+0x3c>)
 800070c:	f004 fca0 	bl	8005050 <puts>
 8000710:	e7f0      	b.n	80006f4 <StartTask+0x8>
    }
    else
    {
      printf("ERREUR : timeout sans notification -> RESET !\r\n");
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <StartTask+0x40>)
 8000714:	f004 fc9c 	bl	8005050 <puts>
      HAL_Delay(100);
 8000718:	2064      	movs	r0, #100	@ 0x64
 800071a:	f000 ff4f 	bl	80015bc <HAL_Delay>
      NVIC_SystemReset();
 800071e:	f7ff feef 	bl	8000500 <__NVIC_SystemReset>
 8000722:	bf00      	nop
 8000724:	080058a8 	.word	0x080058a8
 8000728:	080058d4 	.word	0x080058d4
 800072c:	080058f8 	.word	0x080058f8

08000730 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b090      	sub	sp, #64	@ 0x40
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4bad      	ldr	r3, [pc, #692]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4aac      	ldr	r2, [pc, #688]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4baa      	ldr	r3, [pc, #680]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800075e:	4ba7      	ldr	r3, [pc, #668]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4aa6      	ldr	r2, [pc, #664]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4ba4      	ldr	r3, [pc, #656]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4ba1      	ldr	r3, [pc, #644]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4aa0      	ldr	r2, [pc, #640]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b9e      	ldr	r3, [pc, #632]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b9b      	ldr	r3, [pc, #620]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a9a      	ldr	r2, [pc, #616]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b98      	ldr	r3, [pc, #608]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b95      	ldr	r3, [pc, #596]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a94      	ldr	r2, [pc, #592]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b92      	ldr	r3, [pc, #584]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b8f      	ldr	r3, [pc, #572]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a8e      	ldr	r2, [pc, #568]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b8c      	ldr	r3, [pc, #560]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d6:	4b89      	ldr	r3, [pc, #548]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a88      	ldr	r2, [pc, #544]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b86      	ldr	r3, [pc, #536]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ee:	4b83      	ldr	r3, [pc, #524]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a82      	ldr	r2, [pc, #520]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b80      	ldr	r3, [pc, #512]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000806:	4b7d      	ldr	r3, [pc, #500]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a7c      	ldr	r2, [pc, #496]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800080c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b7a      	ldr	r3, [pc, #488]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081e:	4b77      	ldr	r3, [pc, #476]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a76      	ldr	r2, [pc, #472]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b74      	ldr	r3, [pc, #464]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b71      	ldr	r3, [pc, #452]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a70      	ldr	r2, [pc, #448]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b6e      	ldr	r3, [pc, #440]	@ (80009fc <MX_GPIO_Init+0x2cc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2120      	movs	r1, #32
 8000852:	486b      	ldr	r0, [pc, #428]	@ (8000a00 <MX_GPIO_Init+0x2d0>)
 8000854:	f001 f968 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f241 010e 	movw	r1, #4110	@ 0x100e
 800085e:	4869      	ldr	r0, [pc, #420]	@ (8000a04 <MX_GPIO_Init+0x2d4>)
 8000860:	f001 f962 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2108      	movs	r1, #8
 8000868:	4867      	ldr	r0, [pc, #412]	@ (8000a08 <MX_GPIO_Init+0x2d8>)
 800086a:	f001 f95d 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000874:	4865      	ldr	r0, [pc, #404]	@ (8000a0c <MX_GPIO_Init+0x2dc>)
 8000876:	f001 f957 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	21c8      	movs	r1, #200	@ 0xc8
 800087e:	4864      	ldr	r0, [pc, #400]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 8000880:	f001 f952 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000894:	230e      	movs	r3, #14
 8000896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	485d      	ldr	r0, [pc, #372]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 80008a0:	f000 ff96 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80008a4:	2308      	movs	r3, #8
 80008a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4857      	ldr	r0, [pc, #348]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 80008b8:	f000 ff8a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80008cc:	2309      	movs	r3, #9
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	484f      	ldr	r0, [pc, #316]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 80008d8:	f000 ff7a 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80008dc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ee:	230b      	movs	r3, #11
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4845      	ldr	r0, [pc, #276]	@ (8000a10 <MX_GPIO_Init+0x2e0>)
 80008fa:	f000 ff69 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80008fe:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000910:	230c      	movs	r3, #12
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <MX_GPIO_Init+0x2e4>)
 800091c:	f000 ff58 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000932:	2304      	movs	r3, #4
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	@ (8000a18 <MX_GPIO_Init+0x2e8>)
 800093e:	f000 ff47 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000942:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000954:	230a      	movs	r3, #10
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	482e      	ldr	r0, [pc, #184]	@ (8000a18 <MX_GPIO_Init+0x2e8>)
 8000960:	f000 ff36 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000974:	2302      	movs	r3, #2
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	4826      	ldr	r0, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0x2e8>)
 8000980:	f000 ff26 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000994:	2308      	movs	r3, #8
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099c:	4619      	mov	r1, r3
 800099e:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <MX_GPIO_Init+0x2d0>)
 80009a0:	f000 ff16 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80009a4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009b6:	230c      	movs	r3, #12
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <MX_GPIO_Init+0x2ec>)
 80009c2:	f000 ff05 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80009c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009d8:	2301      	movs	r3, #1
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0x2f0>)
 80009e4:	f000 fef4 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80009e8:	2360      	movs	r3, #96	@ 0x60
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009f8:	230d      	movs	r3, #13
 80009fa:	e013      	b.n	8000a24 <MX_GPIO_Init+0x2f4>
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40022000 	.word	0x40022000
 8000a08:	40022800 	.word	0x40022800
 8000a0c:	40021c00 	.word	0x40021c00
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	48bc      	ldr	r0, [pc, #752]	@ (8000d20 <MX_GPIO_Init+0x5f0>)
 8000a2e:	f000 fecf 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000a32:	2340      	movs	r3, #64	@ 0x40
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a42:	230a      	movs	r3, #10
 8000a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	48b5      	ldr	r0, [pc, #724]	@ (8000d24 <MX_GPIO_Init+0x5f4>)
 8000a4e:	f000 febf 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	48ae      	ldr	r0, [pc, #696]	@ (8000d28 <MX_GPIO_Init+0x5f8>)
 8000a70:	f000 feae 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000a74:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a86:	230e      	movs	r3, #14
 8000a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	48a6      	ldr	r0, [pc, #664]	@ (8000d2c <MX_GPIO_Init+0x5fc>)
 8000a92:	f000 fe9d 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	48a0      	ldr	r0, [pc, #640]	@ (8000d2c <MX_GPIO_Init+0x5fc>)
 8000aac:	f000 fe90 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ab0:	2340      	movs	r3, #64	@ 0x40
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	489a      	ldr	r0, [pc, #616]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000ac6:	f000 fe83 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000aca:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000adc:	230c      	movs	r3, #12
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4892      	ldr	r0, [pc, #584]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000ae8:	f000 fe72 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000aec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afe:	230a      	movs	r3, #10
 8000b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b06:	4619      	mov	r1, r3
 8000b08:	488a      	ldr	r0, [pc, #552]	@ (8000d34 <MX_GPIO_Init+0x604>)
 8000b0a:	f000 fe61 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000b0e:	23f0      	movs	r3, #240	@ 0xf0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b1e:	230a      	movs	r3, #10
 8000b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	4883      	ldr	r0, [pc, #524]	@ (8000d38 <MX_GPIO_Init+0x608>)
 8000b2a:	f000 fe51 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b2e:	23f7      	movs	r3, #247	@ 0xf7
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3e:	230e      	movs	r3, #14
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	487c      	ldr	r0, [pc, #496]	@ (8000d3c <MX_GPIO_Init+0x60c>)
 8000b4a:	f000 fe41 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b60:	2309      	movs	r3, #9
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	486f      	ldr	r0, [pc, #444]	@ (8000d28 <MX_GPIO_Init+0x5f8>)
 8000b6c:	f000 fe30 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b82:	230a      	movs	r3, #10
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4866      	ldr	r0, [pc, #408]	@ (8000d28 <MX_GPIO_Init+0x5f8>)
 8000b8e:	f000 fe1f 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b92:	2320      	movs	r3, #32
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4861      	ldr	r0, [pc, #388]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000baa:	f000 fe11 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4859      	ldr	r0, [pc, #356]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000bca:	f000 fe01 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000bce:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000be0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4854      	ldr	r0, [pc, #336]	@ (8000d38 <MX_GPIO_Init+0x608>)
 8000be8:	f000 fdf2 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	484f      	ldr	r0, [pc, #316]	@ (8000d40 <MX_GPIO_Init+0x610>)
 8000c02:	f000 fde5 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000c06:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	4848      	ldr	r0, [pc, #288]	@ (8000d44 <MX_GPIO_Init+0x614>)
 8000c24:	f000 fdd4 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000c28:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c3a:	230e      	movs	r3, #14
 8000c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	483c      	ldr	r0, [pc, #240]	@ (8000d38 <MX_GPIO_Init+0x608>)
 8000c46:	f000 fdc3 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4836      	ldr	r0, [pc, #216]	@ (8000d3c <MX_GPIO_Init+0x60c>)
 8000c62:	f000 fdb5 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c78:	230d      	movs	r3, #13
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c80:	4619      	mov	r1, r3
 8000c82:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <MX_GPIO_Init+0x5f8>)
 8000c84:	f000 fda4 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4825      	ldr	r0, [pc, #148]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000c9c:	f000 fd98 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481d      	ldr	r0, [pc, #116]	@ (8000d30 <MX_GPIO_Init+0x600>)
 8000cbc:	f000 fd88 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000cc0:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481c      	ldr	r0, [pc, #112]	@ (8000d48 <MX_GPIO_Init+0x618>)
 8000cd6:	f000 fd7b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4815      	ldr	r0, [pc, #84]	@ (8000d48 <MX_GPIO_Init+0x618>)
 8000cf4:	f000 fd6c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000cf8:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d0a:	230d      	movs	r3, #13
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <MX_GPIO_Init+0x618>)
 8000d16:	f000 fd5b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e016      	b.n	8000d4c <MX_GPIO_Init+0x61c>
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40021800 	.word	0x40021800
 8000d2c:	40022400 	.word	0x40022400
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	40022800 	.word	0x40022800
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40021400 	.word	0x40021400
 8000d48:	40021c00 	.word	0x40021c00
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	48a4      	ldr	r0, [pc, #656]	@ (8000ff8 <MX_GPIO_Init+0x8c8>)
 8000d66:	f000 fd33 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	489e      	ldr	r0, [pc, #632]	@ (8000ff8 <MX_GPIO_Init+0x8c8>)
 8000d80:	f000 fd26 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4896      	ldr	r0, [pc, #600]	@ (8000ffc <MX_GPIO_Init+0x8cc>)
 8000da2:	f000 fd15 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	488e      	ldr	r0, [pc, #568]	@ (8000ff8 <MX_GPIO_Init+0x8c8>)
 8000dbe:	f000 fd07 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000dc2:	23c0      	movs	r3, #192	@ 0xc0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4888      	ldr	r0, [pc, #544]	@ (8001000 <MX_GPIO_Init+0x8d0>)
 8000dde:	f000 fcf7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000df2:	230a      	movs	r3, #10
 8000df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4881      	ldr	r0, [pc, #516]	@ (8001004 <MX_GPIO_Init+0x8d4>)
 8000dfe:	f000 fce7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e02:	2328      	movs	r3, #40	@ 0x28
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e12:	230c      	movs	r3, #12
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4879      	ldr	r0, [pc, #484]	@ (8001004 <MX_GPIO_Init+0x8d4>)
 8000e1e:	f000 fcd7 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e22:	23c8      	movs	r3, #200	@ 0xc8
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4873      	ldr	r0, [pc, #460]	@ (8001008 <MX_GPIO_Init+0x8d8>)
 8000e3a:	f000 fcc9 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000e3e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e44:	2303      	movs	r3, #3
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	486e      	ldr	r0, [pc, #440]	@ (800100c <MX_GPIO_Init+0x8dc>)
 8000e54:	f000 fcbc 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4863      	ldr	r0, [pc, #396]	@ (8001000 <MX_GPIO_Init+0x8d0>)
 8000e74:	f000 fcac 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	485b      	ldr	r0, [pc, #364]	@ (8001000 <MX_GPIO_Init+0x8d0>)
 8000e94:	f000 fc9c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e98:	2332      	movs	r3, #50	@ 0x32
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4853      	ldr	r0, [pc, #332]	@ (8001000 <MX_GPIO_Init+0x8d0>)
 8000eb4:	f000 fc8c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	484f      	ldr	r0, [pc, #316]	@ (8001010 <MX_GPIO_Init+0x8e0>)
 8000ed4:	f000 fc7c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000ed8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000eea:	2309      	movs	r3, #9
 8000eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4847      	ldr	r0, [pc, #284]	@ (8001014 <MX_GPIO_Init+0x8e4>)
 8000ef6:	f000 fc6b 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000efa:	2304      	movs	r3, #4
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	483e      	ldr	r0, [pc, #248]	@ (8001008 <MX_GPIO_Init+0x8d8>)
 8000f0e:	f000 fc5f 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000f12:	2382      	movs	r3, #130	@ 0x82
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f22:	230b      	movs	r3, #11
 8000f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4833      	ldr	r0, [pc, #204]	@ (8000ffc <MX_GPIO_Init+0x8cc>)
 8000f2e:	f000 fc4f 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f42:	4619      	mov	r1, r3
 8000f44:	482d      	ldr	r0, [pc, #180]	@ (8000ffc <MX_GPIO_Init+0x8cc>)
 8000f46:	f000 fc43 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f4a:	2350      	movs	r3, #80	@ 0x50
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f5a:	230d      	movs	r3, #13
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4825      	ldr	r0, [pc, #148]	@ (8000ffc <MX_GPIO_Init+0x8cc>)
 8000f66:	f000 fc33 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000f6a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	481f      	ldr	r0, [pc, #124]	@ (8001004 <MX_GPIO_Init+0x8d4>)
 8000f88:	f000 fc22 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4815      	ldr	r0, [pc, #84]	@ (8000ffc <MX_GPIO_Init+0x8cc>)
 8000fa8:	f000 fc12 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000fac:	2340      	movs	r3, #64	@ 0x40
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480f      	ldr	r0, [pc, #60]	@ (8001004 <MX_GPIO_Init+0x8d4>)
 8000fc8:	f000 fc02 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000fcc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <MX_GPIO_Init+0x8e0>)
 8000fea:	f000 fbf1 	bl	80017d0 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3740      	adds	r7, #64	@ 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020800 	.word	0x40020800
 8001004:	40021c00 	.word	0x40021c00
 8001008:	40021800 	.word	0x40021800
 800100c:	40021400 	.word	0x40021400
 8001010:	40020400 	.word	0x40020400
 8001014:	40020c00 	.word	0x40020c00

08001018 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	2201      	movs	r2, #1
 8001028:	4803      	ldr	r0, [pc, #12]	@ (8001038 <__io_putchar+0x20>)
 800102a:	f001 fec9 	bl	8002dc0 <HAL_UART_Transmit>
	HAL_MAX_DELAY); return ch; }
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002f4 	.word	0x200002f4

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f000 fa5f 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001044:	f000 f80a 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001048:	f7ff fb72 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f97e 	bl	800134c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001050:	f7ff fa86 	bl	8000560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001054:	f002 fb84 	bl	8003760 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <main+0x1c>

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	@ 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	@ 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f8d0 	bl	8005210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <SystemClock_Config+0xd0>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	4a29      	ldr	r2, [pc, #164]	@ (800112c <SystemClock_Config+0xd0>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40
 800108c:	4b27      	ldr	r3, [pc, #156]	@ (800112c <SystemClock_Config+0xd0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <SystemClock_Config+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a24      	ldr	r2, [pc, #144]	@ (8001130 <SystemClock_Config+0xd4>)
 800109e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <SystemClock_Config+0xd4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b8:	2310      	movs	r3, #16
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010c8:	23d8      	movs	r3, #216	@ 0xd8
 80010ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 fda9 	bl	8001c30 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f826 	bl	8001134 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010e8:	f000 fd52 	bl	8001b90 <HAL_PWREx_EnableOverDrive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010f2:	f000 f81f 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001102:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2107      	movs	r1, #7
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f82f 	bl	8002178 <HAL_RCC_ClockConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001120:	f000 f808 	bl	8001134 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3750      	adds	r7, #80	@ 0x50
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x8>

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	4a10      	ldr	r2, [pc, #64]	@ (800118c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	@ 0x40
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	210f      	movs	r1, #15
 800117a:	f06f 0001 	mvn.w	r0, #1
 800117e:	f000 fafe 	bl	800177e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <NMI_Handler+0x4>

08001198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <MemManage_Handler+0x4>

080011a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f9d7 	bl	800157c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011ce:	f003 f8bf 	bl	8004350 <xTaskGetSchedulerState>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d001      	beq.n	80011dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011d8:	f003 fbe6 	bl	80049a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e00a      	b.n	8001208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f2:	f3af 8000 	nop.w
 80011f6:	4601      	mov	r1, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf0      	blt.n	80011f2 <_read+0x12>
  }

  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e009      	b.n	8001240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff feef 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf1      	blt.n	800122c <_write+0x12>
  }
  return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_close>:

int _close(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127a:	605a      	str	r2, [r3, #4]
  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f003 ffde 	bl	80052ac <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20050000 	.word	0x20050000
 800131c:	00000400 	.word	0x00000400
 8001320:	200002f0 	.word	0x200002f0
 8001324:	20004218 	.word	0x20004218

08001328 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001352:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <MX_USART1_UART_Init+0x5c>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_USART1_UART_Init+0x58>)
 8001390:	f001 fcc8 	bl	8002d24 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800139a:	f7ff fecb 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002f4 	.word	0x200002f4
 80013a8:	40011000 	.word	0x40011000

080013ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ac      	sub	sp, #176	@ 0xb0
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	2284      	movs	r2, #132	@ 0x84
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 ff1f 	bl	8005210 <memset>
  if(uartHandle->Instance==USART1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_UART_MspInit+0xf4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d15c      	bne.n	8001496 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013dc:	2340      	movs	r3, #64	@ 0x40
 80013de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e0:	2300      	movs	r3, #0
 80013e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f8ab 	bl	8002544 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013f4:	f7ff fe9e 	bl	8001134 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f8:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fc:	4a29      	ldr	r2, [pc, #164]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6453      	str	r3, [r2, #68]	@ 0x44
 8001404:	4b27      	ldr	r3, [pc, #156]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 8001406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	6313      	str	r3, [r2, #48]	@ 0x30
 800141c:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	@ 0x30
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <HAL_UART_MspInit+0xf8>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001462:	4619      	mov	r1, r3
 8001464:	4810      	ldr	r0, [pc, #64]	@ (80014a8 <HAL_UART_MspInit+0xfc>)
 8001466:	f000 f9b3 	bl	80017d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800146a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800148e:	4619      	mov	r1, r3
 8001490:	4806      	ldr	r0, [pc, #24]	@ (80014ac <HAL_UART_MspInit+0x100>)
 8001492:	f000 f99d 	bl	80017d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	37b0      	adds	r7, #176	@ 0xb0
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020000 	.word	0x40020000

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b4:	f7ff ff38 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014de:	f003 feeb 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fdab 	bl	800103c <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014f4:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 80014f8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014fc:	20004218 	.word	0x20004218

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>

08001502 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 f92e 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150c:	200f      	movs	r0, #15
 800150e:	f000 f805 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001512:	f7ff fe15 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f93b 	bl	80017b6 <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 f911 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	@ (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	20000008 	.word	0x20000008
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	2000037c 	.word	0x2000037c

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000037c 	.word	0x2000037c

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff ffee 	bl	80015a4 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_Delay+0x44>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008

08001604 <__NVIC_SetPriorityGrouping>:
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	4313      	orrs	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <__NVIC_SetPriorityGrouping+0x40>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	05fa0000 	.word	0x05fa0000

0800164c <__NVIC_GetPriorityGrouping>:
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_SetPriority>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff47 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff5c 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb0 	bl	8001724 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
 80017ee:	e175      	b.n	8001adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8164 	bne.w	8001ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b01      	cmp	r3, #1
 8001818:	d005      	beq.n	8001826 <HAL_GPIO_Init+0x56>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d130      	bne.n	8001888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 0201 	and.w	r2, r3, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d017      	beq.n	80018c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	69b9      	ldr	r1, [r7, #24]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80be 	beq.w	8001ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001964:	6453      	str	r3, [r2, #68]	@ 0x44
 8001966:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <HAL_GPIO_Init+0x324>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001972:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_GPIO_Init+0x32c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d037      	beq.n	8001a0e <HAL_GPIO_Init+0x23e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a57      	ldr	r2, [pc, #348]	@ (8001b00 <HAL_GPIO_Init+0x330>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0x23a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_GPIO_Init+0x334>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x236>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <HAL_GPIO_Init+0x338>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x232>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a54      	ldr	r2, [pc, #336]	@ (8001b0c <HAL_GPIO_Init+0x33c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x22e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a53      	ldr	r2, [pc, #332]	@ (8001b10 <HAL_GPIO_Init+0x340>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x22a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a52      	ldr	r2, [pc, #328]	@ (8001b14 <HAL_GPIO_Init+0x344>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x226>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a51      	ldr	r2, [pc, #324]	@ (8001b18 <HAL_GPIO_Init+0x348>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x222>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a50      	ldr	r2, [pc, #320]	@ (8001b1c <HAL_GPIO_Init+0x34c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x21e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_GPIO_Init+0x350>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x21a>
 80019e6:	2309      	movs	r3, #9
 80019e8:	e012      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ea:	230a      	movs	r3, #10
 80019ec:	e010      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019ee:	2308      	movs	r3, #8
 80019f0:	e00e      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e00c      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00a      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e008      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e004      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x240>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	f002 0203 	and.w	r2, r2, #3
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	4093      	lsls	r3, r2
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a20:	4935      	ldr	r1, [pc, #212]	@ (8001af8 <HAL_GPIO_Init+0x328>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a52:	4a34      	ldr	r2, [pc, #208]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a58:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a7c:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	@ (8001b24 <HAL_GPIO_Init+0x354>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	f67f ae86 	bls.w	80017f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3724      	adds	r7, #36	@ 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40013800 	.word	0x40013800
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020800 	.word	0x40020800
 8001b08:	40020c00 	.word	0x40020c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40021400 	.word	0x40021400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40021c00 	.word	0x40021c00
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	40022400 	.word	0x40022400
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bbe:	f7ff fcf1 	bl	80015a4 <HAL_GetTick>
 8001bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bc4:	e009      	b.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc6:	f7ff fced 	bl	80015a4 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bd4:	d901      	bls.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e022      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fcd6 	bl	80015a4 <HAL_GetTick>
 8001bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bfa:	e009      	b.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfc:	f7ff fcd2 	bl	80015a4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c0a:	d901      	bls.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e007      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e291      	b.n	800216a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b96      	ldr	r3, [pc, #600]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c60:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
 8001c6c:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x130>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e26b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x7a>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x9c>
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6b      	ldr	r2, [pc, #428]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc48 	bl	80015a4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc44 	bl	80015a4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	@ 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e21f      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b61      	ldr	r3, [pc, #388]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc34 	bl	80015a4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc30 	bl	80015a4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	@ 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e20b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b57      	ldr	r3, [pc, #348]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x110>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d069      	beq.n	8001e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b50      	ldr	r3, [pc, #320]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
 8001d86:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b47      	ldr	r3, [pc, #284]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1df      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	493d      	ldr	r1, [pc, #244]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e040      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fbe6 	bl	80015a4 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fbe2 	bl	80015a4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1bd      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4929      	ldr	r1, [pc, #164]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fbc2 	bl	80015a4 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbbe 	bl	80015a4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e199      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d038      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb9f 	bl	80015a4 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fb9b 	bl	80015a4 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e176      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x23a>
 8001e88:	e01a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8e:	4a08      	ldr	r2, [pc, #32]	@ (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb85 	bl	80015a4 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fb81 	bl	80015a4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d903      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e15c      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
 8001eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b91      	ldr	r3, [pc, #580]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a4 	beq.w	8002016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8b      	ldr	r3, [pc, #556]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a87      	ldr	r2, [pc, #540]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b85      	ldr	r3, [pc, #532]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f02:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb49 	bl	80015a4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff fb45 	bl	80015a4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	@ 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e120      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	4b75      	ldr	r3, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x31a>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f40:	4a6e      	ldr	r2, [pc, #440]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x33c>
 8001f52:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	4a69      	ldr	r2, [pc, #420]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5e:	4b67      	ldr	r3, [pc, #412]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f62:	4a66      	ldr	r2, [pc, #408]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x35e>
 8001f74:	4b61      	ldr	r3, [pc, #388]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f78:	4a60      	ldr	r2, [pc, #384]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f80:	4b5e      	ldr	r3, [pc, #376]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a5d      	ldr	r2, [pc, #372]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a5a      	ldr	r2, [pc, #360]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	4a57      	ldr	r2, [pc, #348]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff faf9 	bl	80015a4 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff faf5 	bl	80015a4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0ce      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x386>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff fae3 	bl	80015a4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fadf 	bl	80015a4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3c      	ldr	r3, [pc, #240]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	4a3b      	ldr	r2, [pc, #236]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a4 	beq.w	8002168 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d06b      	beq.n	8002104 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d149      	bne.n	80020c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fab0 	bl	80015a4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff faac 	bl	80015a4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e087      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b28      	ldr	r3, [pc, #160]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4313      	orrs	r3, r2
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800208e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002092:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fa80 	bl	80015a4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fa7c 	bl	80015a4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e057      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x478>
 80020c6:	e04f      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa66 	bl	80015a4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fa62 	bl	80015a4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03d      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x4ac>
 80020fa:	e035      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x544>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d028      	beq.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d121      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800213a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	4965      	ldr	r1, [pc, #404]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a58      	ldr	r2, [pc, #352]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a52      	ldr	r2, [pc, #328]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7ff f99a 	bl	80015a4 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff f996 	bl	80015a4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 020f 	bic.w	r2, r3, #15
 80022b2:	4922      	ldr	r1, [pc, #136]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	@ (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_ClockConfig+0x1d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f8f6 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00
 8002340:	40023800 	.word	0x40023800
 8002344:	08005930 	.word	0x08005930
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b090      	sub	sp, #64	@ 0x40
 8002356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d00d      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x40>
 8002374:	2b08      	cmp	r3, #8
 8002376:	f200 80a1 	bhi.w	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x3a>
 8002382:	e09b      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b53      	ldr	r3, [pc, #332]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002388:	e09b      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238a:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800238e:	e098      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239a:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023b8:	2100      	movs	r1, #0
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023bc:	fb03 f201 	mul.w	r2, r3, r1
 80023c0:	2300      	movs	r3, #0
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	4a43      	ldr	r2, [pc, #268]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ca:	fba0 1202 	umull	r1, r2, r0, r2
 80023ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023d0:	460a      	mov	r2, r1
 80023d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023dc:	2200      	movs	r2, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	61fa      	str	r2, [r7, #28]
 80023e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023ea:	f7fd ff11 	bl	8000210 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f6:	e053      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f8:	4b35      	ldr	r3, [pc, #212]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	2200      	movs	r2, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240a:	f04f 0b00 	mov.w	fp, #0
 800240e:	4652      	mov	r2, sl
 8002410:	465b      	mov	r3, fp
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	0159      	lsls	r1, r3, #5
 800241c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002420:	0150      	lsls	r0, r2, #5
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ebb2 080a 	subs.w	r8, r2, sl
 800242a:	eb63 090b 	sbc.w	r9, r3, fp
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800243e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002442:	ebb2 0408 	subs.w	r4, r2, r8
 8002446:	eb63 0509 	sbc.w	r5, r3, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	00eb      	lsls	r3, r5, #3
 8002454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002458:	00e2      	lsls	r2, r4, #3
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	eb14 030a 	adds.w	r3, r4, sl
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	eb45 030b 	adc.w	r3, r5, fp
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002476:	4629      	mov	r1, r5
 8002478:	028b      	lsls	r3, r1, #10
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002480:	4621      	mov	r1, r4
 8002482:	028a      	lsls	r2, r1, #10
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	2200      	movs	r2, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002494:	f7fd febc 	bl	8000210 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3740      	adds	r7, #64	@ 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	017d7840 	.word	0x017d7840

080024dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000

080024f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f8:	f7ff fff0 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	0a9b      	lsrs	r3, r3, #10
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	@ (8002518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	08005940 	.word	0x08005940

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002520:	f7ff ffdc 	bl	80024dc <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0b5b      	lsrs	r3, r3, #13
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	08005940 	.word	0x08005940

08002544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d012      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800256c:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a68      	ldr	r2, [pc, #416]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002580:	4964      	ldr	r1, [pc, #400]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d017      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800259e:	4b5d      	ldr	r3, [pc, #372]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ac:	4959      	ldr	r1, [pc, #356]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025bc:	d101      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d017      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025da:	4b4e      	ldr	r3, [pc, #312]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	494a      	ldr	r1, [pc, #296]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f8:	d101      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 808b 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	4a39      	ldr	r2, [pc, #228]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	@ 0x40
 8002634:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002640:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a34      	ldr	r2, [pc, #208]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe ffaa 	bl	80015a4 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002654:	f7fe ffa6 	bl	80015a4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	@ 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e357      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d035      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d02e      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002690:	4b20      	ldr	r3, [pc, #128]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002698:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026b8:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d114      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe ff6e 	bl	80015a4 <HAL_GetTick>
 80026c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe ff6a 	bl	80015a4 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e319      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ee      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026fa:	d111      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002708:	4b04      	ldr	r3, [pc, #16]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800270a:	400b      	ands	r3, r1
 800270c:	4901      	ldr	r1, [pc, #4]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
 8002712:	e00b      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
 800271c:	0ffffcff 	.word	0x0ffffcff
 8002720:	4baa      	ldr	r3, [pc, #680]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4aa9      	ldr	r2, [pc, #676]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800272a:	6093      	str	r3, [r2, #8]
 800272c:	4ba7      	ldr	r3, [pc, #668]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	49a4      	ldr	r1, [pc, #656]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	4313      	orrs	r3, r2
 800273c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800274a:	4ba0      	ldr	r3, [pc, #640]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002750:	4a9e      	ldr	r2, [pc, #632]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002756:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800275a:	4b9c      	ldr	r3, [pc, #624]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	4999      	ldr	r1, [pc, #612]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002778:	4b94      	ldr	r3, [pc, #592]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002786:	4991      	ldr	r1, [pc, #580]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279a:	4b8c      	ldr	r3, [pc, #560]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027a8:	4988      	ldr	r1, [pc, #544]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027bc:	4b83      	ldr	r3, [pc, #524]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	4980      	ldr	r1, [pc, #512]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027de:	4b7b      	ldr	r3, [pc, #492]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4977      	ldr	r1, [pc, #476]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002800:	4b72      	ldr	r3, [pc, #456]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f023 0203 	bic.w	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	496f      	ldr	r1, [pc, #444]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002822:	4b6a      	ldr	r3, [pc, #424]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f023 020c 	bic.w	r2, r3, #12
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	4966      	ldr	r1, [pc, #408]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002844:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	495e      	ldr	r1, [pc, #376]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002866:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002874:	4955      	ldr	r1, [pc, #340]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	494d      	ldr	r1, [pc, #308]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028aa:	4b48      	ldr	r3, [pc, #288]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4944      	ldr	r1, [pc, #272]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028cc:	4b3f      	ldr	r3, [pc, #252]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	493c      	ldr	r1, [pc, #240]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028ee:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fc:	4933      	ldr	r1, [pc, #204]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002910:	4b2e      	ldr	r3, [pc, #184]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800291e:	492b      	ldr	r1, [pc, #172]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d011      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002932:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002940:	4922      	ldr	r1, [pc, #136]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002972:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	4912      	ldr	r1, [pc, #72]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a4:	4909      	ldr	r1, [pc, #36]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d006      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80d9 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029c0:	4b02      	ldr	r3, [pc, #8]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a01      	ldr	r2, [pc, #4]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ca:	e001      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d2:	f7fe fde7 	bl	80015a4 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029da:	f7fe fde3 	bl	80015a4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e194      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	0e1b      	lsrs	r3, r3, #24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	019a      	lsls	r2, r3, #6
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	071b      	lsls	r3, r3, #28
 8002a40:	4957      	ldr	r1, [pc, #348]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a72:	d129      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7a:	0c1b      	lsrs	r3, r3, #16
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a88:	0f1b      	lsrs	r3, r3, #28
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	019a      	lsls	r2, r3, #6
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	071b      	lsls	r3, r3, #28
 8002aa8:	493d      	ldr	r1, [pc, #244]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab6:	f023 021f 	bic.w	r2, r3, #31
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01d      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ada:	0e1b      	lsrs	r3, r3, #24
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	0f1b      	lsrs	r3, r3, #28
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	019a      	lsls	r2, r3, #6
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	071b      	lsls	r3, r3, #28
 8002b08:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	019a      	lsls	r2, r3, #6
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	061b      	lsls	r3, r3, #24
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	4919      	ldr	r1, [pc, #100]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a16      	ldr	r2, [pc, #88]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fd2a 	bl	80015a4 <HAL_GetTick>
 8002b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b54:	f7fe fd26 	bl	80015a4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0d7      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f040 80cd 	bne.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe fd0d 	bl	80015a4 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b8e:	f7fe fd09 	bl	80015a4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d903      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0ba      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb0:	d0ed      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02e      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12a      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bda:	4b51      	ldr	r3, [pc, #324]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002be8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bee:	0f1b      	lsrs	r3, r3, #28
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	019a      	lsls	r2, r3, #6
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4944      	ldr	r1, [pc, #272]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c16:	4b42      	ldr	r3, [pc, #264]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	493d      	ldr	r1, [pc, #244]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d022      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c44:	d11d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c46:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4c:	0e1b      	lsrs	r3, r3, #24
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c54:	4b32      	ldr	r3, [pc, #200]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	019a      	lsls	r2, r3, #6
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	4929      	ldr	r1, [pc, #164]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	0e1b      	lsrs	r3, r3, #24
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c9c:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	019a      	lsls	r2, r3, #6
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	071b      	lsls	r3, r3, #28
 8002cc2:	4917      	ldr	r1, [pc, #92]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	4911      	ldr	r1, [pc, #68]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fc5a 	bl	80015a4 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf4:	f7fe fc56 	bl	80015a4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e007      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d12:	d1ef      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800

08002d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e040      	b.n	8002db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe fb30 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	@ 0x24
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb16 	bl	800339c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f8af 	bl	8002ed4 <UART_SetConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01b      	b.n	8002db8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fb95 	bl	80034e0 <UART_CheckIdleState>
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d177      	bne.n	8002ec8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <HAL_UART_Transmit+0x24>
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e070      	b.n	8002eca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2221      	movs	r2, #33	@ 0x21
 8002df4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7fe fbd5 	bl	80015a4 <HAL_GetTick>
 8002dfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	88fa      	ldrh	r2, [r7, #6]
 8002e00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e14:	d108      	bne.n	8002e28 <HAL_UART_Transmit+0x68>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e003      	b.n	8002e30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e30:	e02f      	b.n	8002e92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	@ 0x80
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fba6 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e03b      	b.n	8002eca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e007      	b.n	8002e80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1c9      	bne.n	8002e32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	@ 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fb70 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d004      	beq.n	8002ebe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e005      	b.n	8002eca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4ba6      	ldr	r3, [pc, #664]	@ (8003198 <UART_SetConfig+0x2c4>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6979      	ldr	r1, [r7, #20]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a94      	ldr	r2, [pc, #592]	@ (800319c <UART_SetConfig+0x2c8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d120      	bne.n	8002f92 <UART_SetConfig+0xbe>
 8002f50:	4b93      	ldr	r3, [pc, #588]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d816      	bhi.n	8002f8c <UART_SetConfig+0xb8>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <UART_SetConfig+0x90>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f81 	.word	0x08002f81
 8002f6c:	08002f7b 	.word	0x08002f7b
 8002f70:	08002f87 	.word	0x08002f87
 8002f74:	2301      	movs	r3, #1
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e150      	b.n	800321c <UART_SetConfig+0x348>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e14d      	b.n	800321c <UART_SetConfig+0x348>
 8002f80:	2304      	movs	r3, #4
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e14a      	b.n	800321c <UART_SetConfig+0x348>
 8002f86:	2308      	movs	r3, #8
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e147      	b.n	800321c <UART_SetConfig+0x348>
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	77fb      	strb	r3, [r7, #31]
 8002f90:	e144      	b.n	800321c <UART_SetConfig+0x348>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a83      	ldr	r2, [pc, #524]	@ (80031a4 <UART_SetConfig+0x2d0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d132      	bne.n	8003002 <UART_SetConfig+0x12e>
 8002f9c:	4b80      	ldr	r3, [pc, #512]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d828      	bhi.n	8002ffc <UART_SetConfig+0x128>
 8002faa:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0xdc>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002ffd 	.word	0x08002ffd
 8002fb8:	08002ffd 	.word	0x08002ffd
 8002fbc:	08002ffd 	.word	0x08002ffd
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002ffd 	.word	0x08002ffd
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	08002ffd 	.word	0x08002ffd
 8002fd0:	08002feb 	.word	0x08002feb
 8002fd4:	08002ffd 	.word	0x08002ffd
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08002ffd 	.word	0x08002ffd
 8002fe0:	08002ff7 	.word	0x08002ff7
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e118      	b.n	800321c <UART_SetConfig+0x348>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e115      	b.n	800321c <UART_SetConfig+0x348>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e112      	b.n	800321c <UART_SetConfig+0x348>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e10f      	b.n	800321c <UART_SetConfig+0x348>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e10c      	b.n	800321c <UART_SetConfig+0x348>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a68      	ldr	r2, [pc, #416]	@ (80031a8 <UART_SetConfig+0x2d4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d120      	bne.n	800304e <UART_SetConfig+0x17a>
 800300c:	4b64      	ldr	r3, [pc, #400]	@ (80031a0 <UART_SetConfig+0x2cc>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003012:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003016:	2b30      	cmp	r3, #48	@ 0x30
 8003018:	d013      	beq.n	8003042 <UART_SetConfig+0x16e>
 800301a:	2b30      	cmp	r3, #48	@ 0x30
 800301c:	d814      	bhi.n	8003048 <UART_SetConfig+0x174>
 800301e:	2b20      	cmp	r3, #32
 8003020:	d009      	beq.n	8003036 <UART_SetConfig+0x162>
 8003022:	2b20      	cmp	r3, #32
 8003024:	d810      	bhi.n	8003048 <UART_SetConfig+0x174>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <UART_SetConfig+0x15c>
 800302a:	2b10      	cmp	r3, #16
 800302c:	d006      	beq.n	800303c <UART_SetConfig+0x168>
 800302e:	e00b      	b.n	8003048 <UART_SetConfig+0x174>
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e0f2      	b.n	800321c <UART_SetConfig+0x348>
 8003036:	2302      	movs	r3, #2
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e0ef      	b.n	800321c <UART_SetConfig+0x348>
 800303c:	2304      	movs	r3, #4
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e0ec      	b.n	800321c <UART_SetConfig+0x348>
 8003042:	2308      	movs	r3, #8
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e0e9      	b.n	800321c <UART_SetConfig+0x348>
 8003048:	2310      	movs	r3, #16
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e0e6      	b.n	800321c <UART_SetConfig+0x348>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <UART_SetConfig+0x2d8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d120      	bne.n	800309a <UART_SetConfig+0x1c6>
 8003058:	4b51      	ldr	r3, [pc, #324]	@ (80031a0 <UART_SetConfig+0x2cc>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003062:	2bc0      	cmp	r3, #192	@ 0xc0
 8003064:	d013      	beq.n	800308e <UART_SetConfig+0x1ba>
 8003066:	2bc0      	cmp	r3, #192	@ 0xc0
 8003068:	d814      	bhi.n	8003094 <UART_SetConfig+0x1c0>
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d009      	beq.n	8003082 <UART_SetConfig+0x1ae>
 800306e:	2b80      	cmp	r3, #128	@ 0x80
 8003070:	d810      	bhi.n	8003094 <UART_SetConfig+0x1c0>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <UART_SetConfig+0x1a8>
 8003076:	2b40      	cmp	r3, #64	@ 0x40
 8003078:	d006      	beq.n	8003088 <UART_SetConfig+0x1b4>
 800307a:	e00b      	b.n	8003094 <UART_SetConfig+0x1c0>
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
 8003080:	e0cc      	b.n	800321c <UART_SetConfig+0x348>
 8003082:	2302      	movs	r3, #2
 8003084:	77fb      	strb	r3, [r7, #31]
 8003086:	e0c9      	b.n	800321c <UART_SetConfig+0x348>
 8003088:	2304      	movs	r3, #4
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e0c6      	b.n	800321c <UART_SetConfig+0x348>
 800308e:	2308      	movs	r3, #8
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0c3      	b.n	800321c <UART_SetConfig+0x348>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e0c0      	b.n	800321c <UART_SetConfig+0x348>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a44      	ldr	r2, [pc, #272]	@ (80031b0 <UART_SetConfig+0x2dc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d125      	bne.n	80030f0 <UART_SetConfig+0x21c>
 80030a4:	4b3e      	ldr	r3, [pc, #248]	@ (80031a0 <UART_SetConfig+0x2cc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b2:	d017      	beq.n	80030e4 <UART_SetConfig+0x210>
 80030b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b8:	d817      	bhi.n	80030ea <UART_SetConfig+0x216>
 80030ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030be:	d00b      	beq.n	80030d8 <UART_SetConfig+0x204>
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c4:	d811      	bhi.n	80030ea <UART_SetConfig+0x216>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <UART_SetConfig+0x1fe>
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ce:	d006      	beq.n	80030de <UART_SetConfig+0x20a>
 80030d0:	e00b      	b.n	80030ea <UART_SetConfig+0x216>
 80030d2:	2300      	movs	r3, #0
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e0a1      	b.n	800321c <UART_SetConfig+0x348>
 80030d8:	2302      	movs	r3, #2
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e09e      	b.n	800321c <UART_SetConfig+0x348>
 80030de:	2304      	movs	r3, #4
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e09b      	b.n	800321c <UART_SetConfig+0x348>
 80030e4:	2308      	movs	r3, #8
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e098      	b.n	800321c <UART_SetConfig+0x348>
 80030ea:	2310      	movs	r3, #16
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e095      	b.n	800321c <UART_SetConfig+0x348>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2f      	ldr	r2, [pc, #188]	@ (80031b4 <UART_SetConfig+0x2e0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d125      	bne.n	8003146 <UART_SetConfig+0x272>
 80030fa:	4b29      	ldr	r3, [pc, #164]	@ (80031a0 <UART_SetConfig+0x2cc>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003108:	d017      	beq.n	800313a <UART_SetConfig+0x266>
 800310a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800310e:	d817      	bhi.n	8003140 <UART_SetConfig+0x26c>
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003114:	d00b      	beq.n	800312e <UART_SetConfig+0x25a>
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311a:	d811      	bhi.n	8003140 <UART_SetConfig+0x26c>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <UART_SetConfig+0x254>
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003124:	d006      	beq.n	8003134 <UART_SetConfig+0x260>
 8003126:	e00b      	b.n	8003140 <UART_SetConfig+0x26c>
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e076      	b.n	800321c <UART_SetConfig+0x348>
 800312e:	2302      	movs	r3, #2
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e073      	b.n	800321c <UART_SetConfig+0x348>
 8003134:	2304      	movs	r3, #4
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e070      	b.n	800321c <UART_SetConfig+0x348>
 800313a:	2308      	movs	r3, #8
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e06d      	b.n	800321c <UART_SetConfig+0x348>
 8003140:	2310      	movs	r3, #16
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e06a      	b.n	800321c <UART_SetConfig+0x348>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <UART_SetConfig+0x2e4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d138      	bne.n	80031c2 <UART_SetConfig+0x2ee>
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800315a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800315e:	d017      	beq.n	8003190 <UART_SetConfig+0x2bc>
 8003160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003164:	d82a      	bhi.n	80031bc <UART_SetConfig+0x2e8>
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316a:	d00b      	beq.n	8003184 <UART_SetConfig+0x2b0>
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003170:	d824      	bhi.n	80031bc <UART_SetConfig+0x2e8>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <UART_SetConfig+0x2aa>
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317a:	d006      	beq.n	800318a <UART_SetConfig+0x2b6>
 800317c:	e01e      	b.n	80031bc <UART_SetConfig+0x2e8>
 800317e:	2300      	movs	r3, #0
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e04b      	b.n	800321c <UART_SetConfig+0x348>
 8003184:	2302      	movs	r3, #2
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e048      	b.n	800321c <UART_SetConfig+0x348>
 800318a:	2304      	movs	r3, #4
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e045      	b.n	800321c <UART_SetConfig+0x348>
 8003190:	2308      	movs	r3, #8
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e042      	b.n	800321c <UART_SetConfig+0x348>
 8003196:	bf00      	nop
 8003198:	efff69f3 	.word	0xefff69f3
 800319c:	40011000 	.word	0x40011000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40004800 	.word	0x40004800
 80031ac:	40004c00 	.word	0x40004c00
 80031b0:	40005000 	.word	0x40005000
 80031b4:	40011400 	.word	0x40011400
 80031b8:	40007800 	.word	0x40007800
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e02c      	b.n	800321c <UART_SetConfig+0x348>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a72      	ldr	r2, [pc, #456]	@ (8003390 <UART_SetConfig+0x4bc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d125      	bne.n	8003218 <UART_SetConfig+0x344>
 80031cc:	4b71      	ldr	r3, [pc, #452]	@ (8003394 <UART_SetConfig+0x4c0>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031da:	d017      	beq.n	800320c <UART_SetConfig+0x338>
 80031dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031e0:	d817      	bhi.n	8003212 <UART_SetConfig+0x33e>
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e6:	d00b      	beq.n	8003200 <UART_SetConfig+0x32c>
 80031e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ec:	d811      	bhi.n	8003212 <UART_SetConfig+0x33e>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <UART_SetConfig+0x326>
 80031f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031f6:	d006      	beq.n	8003206 <UART_SetConfig+0x332>
 80031f8:	e00b      	b.n	8003212 <UART_SetConfig+0x33e>
 80031fa:	2300      	movs	r3, #0
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e00d      	b.n	800321c <UART_SetConfig+0x348>
 8003200:	2302      	movs	r3, #2
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e00a      	b.n	800321c <UART_SetConfig+0x348>
 8003206:	2304      	movs	r3, #4
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e007      	b.n	800321c <UART_SetConfig+0x348>
 800320c:	2308      	movs	r3, #8
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e004      	b.n	800321c <UART_SetConfig+0x348>
 8003212:	2310      	movs	r3, #16
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e001      	b.n	800321c <UART_SetConfig+0x348>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003224:	d15b      	bne.n	80032de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d828      	bhi.n	800327e <UART_SetConfig+0x3aa>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0x360>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff f94c 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e013      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7ff f95c 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b4b      	ldr	r3, [pc, #300]	@ (8003398 <UART_SetConfig+0x4c4>)
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e00c      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7ff f86f 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8003272:	61b8      	str	r0, [r7, #24]
        break;
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e004      	b.n	8003288 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	77bb      	strb	r3, [r7, #30]
        break;
 8003286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d074      	beq.n	8003378 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	005a      	lsls	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d916      	bls.n	80032d8 <UART_SetConfig+0x404>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b0:	d212      	bcs.n	80032d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f023 030f 	bic.w	r3, r3, #15
 80032ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	89fb      	ldrh	r3, [r7, #14]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	89fa      	ldrh	r2, [r7, #14]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e04f      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77bb      	strb	r3, [r7, #30]
 80032dc:	e04c      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d828      	bhi.n	8003336 <UART_SetConfig+0x462>
 80032e4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <UART_SetConfig+0x418>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003319 	.word	0x08003319
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003337 	.word	0x08003337
 8003304:	08003337 	.word	0x08003337
 8003308:	08003337 	.word	0x08003337
 800330c:	0800332f 	.word	0x0800332f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff f8f0 	bl	80024f4 <HAL_RCC_GetPCLK1Freq>
 8003314:	61b8      	str	r0, [r7, #24]
        break;
 8003316:	e013      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7ff f900 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 800331c:	61b8      	str	r0, [r7, #24]
        break;
 800331e:	e00f      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <UART_SetConfig+0x4c4>)
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e00c      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003326:	f7ff f813 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800332a:	61b8      	str	r0, [r7, #24]
        break;
 800332c:	e008      	b.n	8003340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003332:	61bb      	str	r3, [r7, #24]
        break;
 8003334:	e004      	b.n	8003340 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	77bb      	strb	r3, [r7, #30]
        break;
 800333e:	bf00      	nop
    }

    if (pclk != 0U)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d018      	beq.n	8003378 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	085a      	lsrs	r2, r3, #1
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d909      	bls.n	8003374 <UART_SetConfig+0x4a0>
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d205      	bcs.n	8003374 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	e001      	b.n	8003378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003384:	7fbb      	ldrb	r3, [r7, #30]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40007c00 	.word	0x40007c00
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400

0800339c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800349a:	d10a      	bne.n	80034b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	@ 0x30
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034f0:	f7fe f858 	bl	80015a4 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d12e      	bne.n	8003562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f83b 	bl	800358e <UART_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	e853 3f00 	ldrex	r3, [r3]
 800352a:	60fb      	str	r3, [r7, #12]
   return(result);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	617b      	str	r3, [r7, #20]
   return(result);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e6      	bne.n	800351e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e011      	b.n	8003586 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	e04f      	b.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d04b      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fd fffc 	bl	80015a4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <UART_WaitOnFlagUntilTimeout+0x30>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04e      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d037      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b80      	cmp	r3, #128	@ 0x80
 80035d4:	d034      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d031      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d110      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2208      	movs	r2, #8
 80035f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f838 	bl	8003668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2208      	movs	r2, #8
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e029      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800361a:	d111      	bne.n	8003640 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f81e 	bl	8003668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e00f      	b.n	8003660 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	429a      	cmp	r2, r3
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	429a      	cmp	r2, r3
 800365c:	d0a0      	beq.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b095      	sub	sp, #84	@ 0x54
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e6      	bne.n	8003670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3308      	adds	r3, #8
 80036a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3308      	adds	r3, #8
 80036c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e5      	bne.n	80036a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d118      	bne.n	8003710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	613b      	str	r3, [r7, #16]
   return(result);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003724:	bf00      	nop
 8003726:	3754      	adds	r7, #84	@ 0x54
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800373e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003742:	2b84      	cmp	r3, #132	@ 0x84
 8003744:	d005      	beq.n	8003752 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003746:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4413      	add	r3, r2
 800374e:	3303      	adds	r3, #3
 8003750:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003764:	f000 faee 	bl	8003d44 <vTaskStartScheduler>
  
  return osOK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	bd80      	pop	{r7, pc}

0800376e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800376e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003770:	b089      	sub	sp, #36	@ 0x24
 8003772:	af04      	add	r7, sp, #16
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <osThreadCreate+0x54>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01c      	beq.n	80037c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685c      	ldr	r4, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691e      	ldr	r6, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffc8 	bl	8003730 <makeFreeRtosPriority>
 80037a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	9100      	str	r1, [sp, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4632      	mov	r2, r6
 80037b4:	4629      	mov	r1, r5
 80037b6:	4620      	mov	r0, r4
 80037b8:	f000 f8ed 	bl	8003996 <xTaskCreateStatic>
 80037bc:	4603      	mov	r3, r0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e01c      	b.n	80037fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685c      	ldr	r4, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ffaa 	bl	8003730 <makeFreeRtosPriority>
 80037dc:	4602      	mov	r2, r0
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	9301      	str	r3, [sp, #4]
 80037e4:	9200      	str	r2, [sp, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	4632      	mov	r2, r6
 80037ea:	4629      	mov	r1, r5
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 f938 	bl	8003a62 <xTaskCreate>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003806 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <osDelay+0x16>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	e000      	b.n	800381e <osDelay+0x18>
 800381c:	2301      	movs	r3, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fa58 	bl	8003cd4 <vTaskDelay>
  
  return osOK;
 8003824:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f103 0208 	add.w	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f04f 32ff 	mov.w	r2, #4294967295
 8003846:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0208 	add.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f103 0208 	add.w	r2, r3, #8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d103      	bne.n	80038f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e00c      	b.n	800390a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3308      	adds	r3, #8
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e002      	b.n	80038fe <vListInsert+0x2e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d2f6      	bcs.n	80038f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6852      	ldr	r2, [r2, #4]
 8003962:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d103      	bne.n	8003976 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003996:	b580      	push	{r7, lr}
 8003998:	b08e      	sub	sp, #56	@ 0x38
 800399a:	af04      	add	r7, sp, #16
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	b672      	cpsid	i
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	b662      	cpsie	i
 80039be:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <xTaskCreateStatic+0x52>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	b672      	cpsid	i
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	b662      	cpsie	i
 80039e0:	61fb      	str	r3, [r7, #28]
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039e8:	2354      	movs	r3, #84	@ 0x54
 80039ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b54      	cmp	r3, #84	@ 0x54
 80039f0:	d00d      	beq.n	8003a0e <xTaskCreateStatic+0x78>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	b672      	cpsid	i
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	b662      	cpsie	i
 8003a06:	61bb      	str	r3, [r7, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01e      	beq.n	8003a54 <xTaskCreateStatic+0xbe>
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01b      	beq.n	8003a54 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f850 	bl	8003aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a4e:	f000 f8d7 	bl	8003c00 <prvAddNewTaskToReadyList>
 8003a52:	e001      	b.n	8003a58 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a58:	697b      	ldr	r3, [r7, #20]
	}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	@ 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b08c      	sub	sp, #48	@ 0x30
 8003a66:	af04      	add	r7, sp, #16
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 ffe8 	bl	8004a4c <pvPortMalloc>
 8003a7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a84:	2054      	movs	r0, #84	@ 0x54
 8003a86:	f000 ffe1 	bl	8004a4c <pvPortMalloc>
 8003a8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a98:	e005      	b.n	8003aa6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f001 f8a4 	bl	8004be8 <vPortFree>
 8003aa0:	e001      	b.n	8003aa6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d017      	beq.n	8003adc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9303      	str	r3, [sp, #12]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f80e 	bl	8003aec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ad0:	69f8      	ldr	r0, [r7, #28]
 8003ad2:	f000 f895 	bl	8003c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e002      	b.n	8003ae2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003b04:	440b      	add	r3, r1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <prvInitialiseNewTask+0x4e>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	b672      	cpsid	i
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	b662      	cpsie	i
 8003b32:	617b      	str	r3, [r7, #20]
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01f      	beq.n	8003b80 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	e012      	b.n	8003b6c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	7819      	ldrb	r1, [r3, #0]
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	3334      	adds	r3, #52	@ 0x34
 8003b56:	460a      	mov	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b0f      	cmp	r3, #15
 8003b70:	d9e9      	bls.n	8003b46 <prvInitialiseNewTask+0x5a>
 8003b72:	e000      	b.n	8003b76 <prvInitialiseNewTask+0x8a>
			{
				break;
 8003b74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b7e:	e003      	b.n	8003b88 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d901      	bls.n	8003b92 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b8e:	2306      	movs	r3, #6
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fe60 	bl	800386e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fe5b 	bl	800386e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	f1c3 0207 	rsb	r2, r3, #7
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	69b8      	ldr	r0, [r7, #24]
 8003be2:	f000 fd3f 	bl	8004664 <pxPortInitialiseStack>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c08:	f000 fe38 	bl	800487c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a29      	ldr	r2, [pc, #164]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb8>)
 8003c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c16:	4b29      	ldr	r3, [pc, #164]	@ (8003cbc <prvAddNewTaskToReadyList+0xbc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c1e:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <prvAddNewTaskToReadyList+0xbc>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c24:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <prvAddNewTaskToReadyList+0xb8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d110      	bne.n	8003c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c2c:	f000 fad0 	bl	80041d0 <prvInitialiseTaskLists>
 8003c30:	e00d      	b.n	8003c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c32:	4b23      	ldr	r3, [pc, #140]	@ (8003cc0 <prvAddNewTaskToReadyList+0xc0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c3a:	4b20      	ldr	r3, [pc, #128]	@ (8003cbc <prvAddNewTaskToReadyList+0xbc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d802      	bhi.n	8003c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <prvAddNewTaskToReadyList+0xbc>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <prvAddNewTaskToReadyList+0xc4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <prvAddNewTaskToReadyList+0xc4>)
 8003c56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <prvAddNewTaskToReadyList+0xc8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <prvAddNewTaskToReadyList+0xc8>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4a15      	ldr	r2, [pc, #84]	@ (8003ccc <prvAddNewTaskToReadyList+0xcc>)
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7ff fe01 	bl	8003888 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c86:	f000 fe2f 	bl	80048e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <prvAddNewTaskToReadyList+0xc0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c92:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <prvAddNewTaskToReadyList+0xbc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <prvAddNewTaskToReadyList+0xd0>)
 8003ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000480 	.word	0x20000480
 8003cbc:	20000380 	.word	0x20000380
 8003cc0:	2000048c 	.word	0x2000048c
 8003cc4:	2000049c 	.word	0x2000049c
 8003cc8:	20000488 	.word	0x20000488
 8003ccc:	20000384 	.word	0x20000384
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01a      	beq.n	8003d1c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <vTaskDelay+0x68>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <vTaskDelay+0x36>
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf2:	b672      	cpsid	i
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	b662      	cpsie	i
 8003d02:	60bb      	str	r3, [r7, #8]
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003d0a:	f000 f881 	bl	8003e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fc41 	bl	8004598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d16:	f000 f889 	bl	8003e2c <xTaskResumeAll>
 8003d1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003d22:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <vTaskDelay+0x6c>)
 8003d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200004a8 	.word	0x200004a8
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	@ 0x28
 8003d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d52:	463a      	mov	r2, r7
 8003d54:	1d39      	adds	r1, r7, #4
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fbe6 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	9202      	str	r2, [sp, #8]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	460a      	mov	r2, r1
 8003d72:	4921      	ldr	r1, [pc, #132]	@ (8003df8 <vTaskStartScheduler+0xb4>)
 8003d74:	4821      	ldr	r0, [pc, #132]	@ (8003dfc <vTaskStartScheduler+0xb8>)
 8003d76:	f7ff fe0e 	bl	8003996 <xTaskCreateStatic>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <vTaskStartScheduler+0xbc>)
 8003d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d80:	4b1f      	ldr	r3, [pc, #124]	@ (8003e00 <vTaskStartScheduler+0xbc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e001      	b.n	8003d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d118      	bne.n	8003dca <vTaskStartScheduler+0x86>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	b672      	cpsid	i
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	b662      	cpsie	i
 8003dac:	613b      	str	r3, [r7, #16]
}
 8003dae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003db0:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <vTaskStartScheduler+0xc0>)
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003db8:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <vTaskStartScheduler+0xc4>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dbe:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <vTaskStartScheduler+0xc8>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dc4:	f000 fcdc 	bl	8004780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dc8:	e011      	b.n	8003dee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d10d      	bne.n	8003dee <vTaskStartScheduler+0xaa>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	b672      	cpsid	i
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	b662      	cpsie	i
 8003de6:	60fb      	str	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	e7fd      	b.n	8003dea <vTaskStartScheduler+0xa6>
}
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	08005928 	.word	0x08005928
 8003dfc:	080041a1 	.word	0x080041a1
 8003e00:	200004a4 	.word	0x200004a4
 8003e04:	200004a0 	.word	0x200004a0
 8003e08:	2000048c 	.word	0x2000048c
 8003e0c:	20000484 	.word	0x20000484

08003e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e14:	4b04      	ldr	r3, [pc, #16]	@ (8003e28 <vTaskSuspendAll+0x18>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	4a03      	ldr	r2, [pc, #12]	@ (8003e28 <vTaskSuspendAll+0x18>)
 8003e1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	200004a8 	.word	0x200004a8

08003e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e3a:	4b43      	ldr	r3, [pc, #268]	@ (8003f48 <xTaskResumeAll+0x11c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <xTaskResumeAll+0x32>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	b672      	cpsid	i
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	b662      	cpsie	i
 8003e56:	603b      	str	r3, [r7, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e5e:	f000 fd0d 	bl	800487c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <xTaskResumeAll+0x11c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	4a37      	ldr	r2, [pc, #220]	@ (8003f48 <xTaskResumeAll+0x11c>)
 8003e6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6c:	4b36      	ldr	r3, [pc, #216]	@ (8003f48 <xTaskResumeAll+0x11c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d161      	bne.n	8003f38 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e74:	4b35      	ldr	r3, [pc, #212]	@ (8003f4c <xTaskResumeAll+0x120>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05d      	beq.n	8003f38 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7c:	e02e      	b.n	8003edc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7e:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <xTaskResumeAll+0x124>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3318      	adds	r3, #24
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fd59 	bl	8003942 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fd54 	bl	8003942 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f54 <xTaskResumeAll+0x128>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f54 <xTaskResumeAll+0x128>)
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4a27      	ldr	r2, [pc, #156]	@ (8003f58 <xTaskResumeAll+0x12c>)
 8003eba:	441a      	add	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7ff fce0 	bl	8003888 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	4b23      	ldr	r3, [pc, #140]	@ (8003f5c <xTaskResumeAll+0x130>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003ed6:	4b22      	ldr	r3, [pc, #136]	@ (8003f60 <xTaskResumeAll+0x134>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003edc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f50 <xTaskResumeAll+0x124>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1cc      	bne.n	8003e7e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eea:	f000 fa11 	bl	8004310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eee:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <xTaskResumeAll+0x138>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d010      	beq.n	8003f1c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003efa:	f000 f837 	bl	8003f6c <xTaskIncrementTick>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003f04:	4b16      	ldr	r3, [pc, #88]	@ (8003f60 <xTaskResumeAll+0x134>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f1      	bne.n	8003efa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003f16:	4b13      	ldr	r3, [pc, #76]	@ (8003f64 <xTaskResumeAll+0x138>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f1c:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <xTaskResumeAll+0x134>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f28:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <xTaskResumeAll+0x13c>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f38:	f000 fcd6 	bl	80048e8 <vPortExitCritical>

	return xAlreadyYielded;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200004a8 	.word	0x200004a8
 8003f4c:	20000480 	.word	0x20000480
 8003f50:	20000440 	.word	0x20000440
 8003f54:	20000488 	.word	0x20000488
 8003f58:	20000384 	.word	0x20000384
 8003f5c:	20000380 	.word	0x20000380
 8003f60:	20000494 	.word	0x20000494
 8003f64:	20000490 	.word	0x20000490
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f76:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <xTaskIncrementTick+0x14c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 808b 	bne.w	8004096 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f80:	4b4e      	ldr	r3, [pc, #312]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f88:	4a4c      	ldr	r2, [pc, #304]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d123      	bne.n	8003fdc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f94:	4b4a      	ldr	r3, [pc, #296]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <xTaskIncrementTick+0x4e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	b672      	cpsid	i
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	b662      	cpsie	i
 8003fb2:	603b      	str	r3, [r7, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <xTaskIncrementTick+0x4a>
 8003fba:	4b41      	ldr	r3, [pc, #260]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <xTaskIncrementTick+0x158>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80040c4 <xTaskIncrementTick+0x158>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	4b3e      	ldr	r3, [pc, #248]	@ (80040c8 <xTaskIncrementTick+0x15c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80040c8 <xTaskIncrementTick+0x15c>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	f000 f99a 	bl	8004310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <xTaskIncrementTick+0x160>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d348      	bcc.n	8004078 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe6:	4b36      	ldr	r3, [pc, #216]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff0:	4b36      	ldr	r3, [pc, #216]	@ (80040cc <xTaskIncrementTick+0x160>)
 8003ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff6:	601a      	str	r2, [r3, #0]
					break;
 8003ff8:	e03e      	b.n	8004078 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffa:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d203      	bcs.n	800401a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004012:	4a2e      	ldr	r2, [pc, #184]	@ (80040cc <xTaskIncrementTick+0x160>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004018:	e02e      	b.n	8004078 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3304      	adds	r3, #4
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fc8f 	bl	8003942 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3318      	adds	r3, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fc86 	bl	8003942 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	4b24      	ldr	r3, [pc, #144]	@ (80040d0 <xTaskIncrementTick+0x164>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	4a22      	ldr	r2, [pc, #136]	@ (80040d0 <xTaskIncrementTick+0x164>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4a1f      	ldr	r2, [pc, #124]	@ (80040d4 <xTaskIncrementTick+0x168>)
 8004056:	441a      	add	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f7ff fc12 	bl	8003888 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <xTaskIncrementTick+0x16c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	429a      	cmp	r2, r3
 8004070:	d3b9      	bcc.n	8003fe6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004072:	2301      	movs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004076:	e7b6      	b.n	8003fe6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004078:	4b17      	ldr	r3, [pc, #92]	@ (80040d8 <xTaskIncrementTick+0x16c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407e:	4915      	ldr	r1, [pc, #84]	@ (80040d4 <xTaskIncrementTick+0x168>)
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d907      	bls.n	80040a0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e004      	b.n	80040a0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004096:	4b11      	ldr	r3, [pc, #68]	@ (80040dc <xTaskIncrementTick+0x170>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <xTaskIncrementTick+0x170>)
 800409e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040a0:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <xTaskIncrementTick+0x174>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040ac:	697b      	ldr	r3, [r7, #20]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200004a8 	.word	0x200004a8
 80040bc:	20000484 	.word	0x20000484
 80040c0:	20000438 	.word	0x20000438
 80040c4:	2000043c 	.word	0x2000043c
 80040c8:	20000498 	.word	0x20000498
 80040cc:	200004a0 	.word	0x200004a0
 80040d0:	20000488 	.word	0x20000488
 80040d4:	20000384 	.word	0x20000384
 80040d8:	20000380 	.word	0x20000380
 80040dc:	20000490 	.word	0x20000490
 80040e0:	20000494 	.word	0x20000494

080040e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <vTaskSwitchContext+0xa8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040f2:	4b27      	ldr	r3, [pc, #156]	@ (8004190 <vTaskSwitchContext+0xac>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040f8:	e042      	b.n	8004180 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80040fa:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <vTaskSwitchContext+0xac>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004100:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <vTaskSwitchContext+0xb0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	f1c3 031f 	rsb	r3, r3, #31
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	4920      	ldr	r1, [pc, #128]	@ (8004198 <vTaskSwitchContext+0xb4>)
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10d      	bne.n	8004146 <vTaskSwitchContext+0x62>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	b672      	cpsid	i
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	b662      	cpsie	i
 800413e:	607b      	str	r3, [r7, #4]
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	e7fd      	b.n	8004142 <vTaskSwitchContext+0x5e>
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <vTaskSwitchContext+0xb4>)
 8004152:	4413      	add	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3308      	adds	r3, #8
 8004168:	429a      	cmp	r2, r3
 800416a:	d104      	bne.n	8004176 <vTaskSwitchContext+0x92>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a07      	ldr	r2, [pc, #28]	@ (800419c <vTaskSwitchContext+0xb8>)
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	200004a8 	.word	0x200004a8
 8004190:	20000494 	.word	0x20000494
 8004194:	20000488 	.word	0x20000488
 8004198:	20000384 	.word	0x20000384
 800419c:	20000380 	.word	0x20000380

080041a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041a8:	f000 f852 	bl	8004250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <prvIdleTask+0x28>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d9f9      	bls.n	80041a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041b4:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <prvIdleTask+0x2c>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041c4:	e7f0      	b.n	80041a8 <prvIdleTask+0x8>
 80041c6:	bf00      	nop
 80041c8:	20000384 	.word	0x20000384
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041d6:	2300      	movs	r3, #0
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	e00c      	b.n	80041f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a12      	ldr	r2, [pc, #72]	@ (8004230 <prvInitialiseTaskLists+0x60>)
 80041e8:	4413      	add	r3, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fb1f 	bl	800382e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3301      	adds	r3, #1
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d9ef      	bls.n	80041dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041fc:	480d      	ldr	r0, [pc, #52]	@ (8004234 <prvInitialiseTaskLists+0x64>)
 80041fe:	f7ff fb16 	bl	800382e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004202:	480d      	ldr	r0, [pc, #52]	@ (8004238 <prvInitialiseTaskLists+0x68>)
 8004204:	f7ff fb13 	bl	800382e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004208:	480c      	ldr	r0, [pc, #48]	@ (800423c <prvInitialiseTaskLists+0x6c>)
 800420a:	f7ff fb10 	bl	800382e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800420e:	480c      	ldr	r0, [pc, #48]	@ (8004240 <prvInitialiseTaskLists+0x70>)
 8004210:	f7ff fb0d 	bl	800382e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004214:	480b      	ldr	r0, [pc, #44]	@ (8004244 <prvInitialiseTaskLists+0x74>)
 8004216:	f7ff fb0a 	bl	800382e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <prvInitialiseTaskLists+0x78>)
 800421c:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <prvInitialiseTaskLists+0x64>)
 800421e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <prvInitialiseTaskLists+0x7c>)
 8004222:	4a05      	ldr	r2, [pc, #20]	@ (8004238 <prvInitialiseTaskLists+0x68>)
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000384 	.word	0x20000384
 8004234:	20000410 	.word	0x20000410
 8004238:	20000424 	.word	0x20000424
 800423c:	20000440 	.word	0x20000440
 8004240:	20000454 	.word	0x20000454
 8004244:	2000046c 	.word	0x2000046c
 8004248:	20000438 	.word	0x20000438
 800424c:	2000043c 	.word	0x2000043c

08004250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004256:	e019      	b.n	800428c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004258:	f000 fb10 	bl	800487c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b10      	ldr	r3, [pc, #64]	@ (80042a0 <prvCheckTasksWaitingTermination+0x50>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb6a 	bl	8003942 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <prvCheckTasksWaitingTermination+0x54>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	4a0b      	ldr	r2, [pc, #44]	@ (80042a4 <prvCheckTasksWaitingTermination+0x54>)
 8004276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 8004280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004282:	f000 fb31 	bl	80048e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f810 	bl	80042ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <prvCheckTasksWaitingTermination+0x58>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e1      	bne.n	8004258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000454 	.word	0x20000454
 80042a4:	20000480 	.word	0x20000480
 80042a8:	20000468 	.word	0x20000468

080042ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fc90 	bl	8004be8 <vPortFree>
				vPortFree( pxTCB );
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fc8d 	bl	8004be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042ce:	e01b      	b.n	8004308 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d103      	bne.n	80042e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fc84 	bl	8004be8 <vPortFree>
	}
 80042e0:	e012      	b.n	8004308 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d00d      	beq.n	8004308 <prvDeleteTCB+0x5c>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	b672      	cpsid	i
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	b662      	cpsie	i
 8004300:	60fb      	str	r3, [r7, #12]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <prvDeleteTCB+0x58>
	}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004316:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <prvResetNextTaskUnblockTime+0x38>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d104      	bne.n	800432a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <prvResetNextTaskUnblockTime+0x3c>)
 8004322:	f04f 32ff 	mov.w	r2, #4294967295
 8004326:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004328:	e008      	b.n	800433c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800432a:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <prvResetNextTaskUnblockTime+0x38>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a04      	ldr	r2, [pc, #16]	@ (800434c <prvResetNextTaskUnblockTime+0x3c>)
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20000438 	.word	0x20000438
 800434c:	200004a0 	.word	0x200004a0

08004350 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <xTaskGetSchedulerState+0x34>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d102      	bne.n	8004364 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800435e:	2301      	movs	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	e008      	b.n	8004376 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004364:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <xTaskGetSchedulerState+0x38>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d102      	bne.n	8004372 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800436c:	2302      	movs	r3, #2
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	e001      	b.n	8004376 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004376:	687b      	ldr	r3, [r7, #4]
	}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	2000048c 	.word	0x2000048c
 8004388:	200004a8 	.word	0x200004a8

0800438c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004396:	f000 fa71 	bl	800487c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800439a:	4b1e      	ldr	r3, [pc, #120]	@ (8004414 <ulTaskNotifyTake+0x88>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <ulTaskNotifyTake+0x88>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b4:	2101      	movs	r1, #1
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f000 f8ee 	bl	8004598 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80043bc:	4b16      	ldr	r3, [pc, #88]	@ (8004418 <ulTaskNotifyTake+0x8c>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80043cc:	f000 fa8c 	bl	80048e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80043d0:	f000 fa54 	bl	800487c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <ulTaskNotifyTake+0x88>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043da:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <ulTaskNotifyTake+0x88>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043f0:	e004      	b.n	80043fc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80043f2:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <ulTaskNotifyTake+0x88>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	3a01      	subs	r2, #1
 80043fa:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <ulTaskNotifyTake+0x88>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8004406:	f000 fa6f 	bl	80048e8 <vPortExitCritical>

		return ulReturn;
 800440a:	68fb      	ldr	r3, [r7, #12]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000380 	.word	0x20000380
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	@ 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10d      	bne.n	8004452 <xTaskGenericNotify+0x36>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	b672      	cpsid	i
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	b662      	cpsie	i
 800444a:	61bb      	str	r3, [r7, #24]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004456:	f000 fa11 	bl	800487c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800446e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d827      	bhi.n	80044ce <xTaskGenericNotify+0xb2>
 800447e:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <xTaskGenericNotify+0x68>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044f5 	.word	0x080044f5
 8004488:	08004499 	.word	0x08004499
 800448c:	080044a7 	.word	0x080044a7
 8004490:	080044b3 	.word	0x080044b3
 8004494:	080044bb 	.word	0x080044bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	431a      	orrs	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80044a4:	e029      	b.n	80044fa <xTaskGenericNotify+0xde>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80044b0:	e023      	b.n	80044fa <xTaskGenericNotify+0xde>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80044b8:	e01f      	b.n	80044fa <xTaskGenericNotify+0xde>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d003      	beq.n	80044c8 <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80044c6:	e018      	b.n	80044fa <xTaskGenericNotify+0xde>
						xReturn = pdFAIL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80044cc:	e015      	b.n	80044fa <xTaskGenericNotify+0xde>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d00f      	beq.n	80044f8 <xTaskGenericNotify+0xdc>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	b672      	cpsid	i
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	b662      	cpsie	i
 80044ec:	617b      	str	r3, [r7, #20]
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <xTaskGenericNotify+0xd4>
					break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <xTaskGenericNotify+0xde>

					break;
 80044f8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80044fa:	7ffb      	ldrb	r3, [r7, #31]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d13c      	bne.n	800457a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fa1c 	bl	8003942 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	2201      	movs	r2, #1
 8004510:	409a      	lsls	r2, r3
 8004512:	4b1d      	ldr	r3, [pc, #116]	@ (8004588 <xTaskGenericNotify+0x16c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <xTaskGenericNotify+0x16c>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4a18      	ldr	r2, [pc, #96]	@ (800458c <xTaskGenericNotify+0x170>)
 800452a:	441a      	add	r2, r3
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff f9a8 	bl	8003888 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <xTaskGenericNotify+0x140>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	b672      	cpsid	i
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	b662      	cpsie	i
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <xTaskGenericNotify+0x174>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	429a      	cmp	r2, r3
 8004568:	d907      	bls.n	800457a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <xTaskGenericNotify+0x178>)
 800456c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800457a:	f000 f9b5 	bl	80048e8 <vPortExitCritical>

		return xReturn;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004580:	4618      	mov	r0, r3
 8004582:	3728      	adds	r7, #40	@ 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000488 	.word	0x20000488
 800458c:	20000384 	.word	0x20000384
 8004590:	20000380 	.word	0x20000380
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045a2:	4b29      	ldr	r3, [pc, #164]	@ (8004648 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045a8:	4b28      	ldr	r3, [pc, #160]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f9c7 	bl	8003942 <uxListRemove>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045ba:	4b24      	ldr	r3, [pc, #144]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	2201      	movs	r2, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	4b21      	ldr	r3, [pc, #132]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4013      	ands	r3, r2
 80045ce:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d8:	d10a      	bne.n	80045f0 <prvAddCurrentTaskToDelayedList+0x58>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	481a      	ldr	r0, [pc, #104]	@ (8004654 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045ea:	f7ff f94d 	bl	8003888 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ee:	e026      	b.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045f8:	4b14      	ldr	r3, [pc, #80]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d209      	bcs.n	800461c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004608:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <prvAddCurrentTaskToDelayedList+0xc0>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7ff f95b 	bl	80038d0 <vListInsert>
}
 800461a:	e010      	b.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <prvAddCurrentTaskToDelayedList+0xc4>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7ff f951 	bl	80038d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d202      	bcs.n	800463e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <prvAddCurrentTaskToDelayedList+0xc8>)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6013      	str	r3, [r2, #0]
}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000484 	.word	0x20000484
 800464c:	20000380 	.word	0x20000380
 8004650:	20000488 	.word	0x20000488
 8004654:	2000046c 	.word	0x2000046c
 8004658:	2000043c 	.word	0x2000043c
 800465c:	20000438 	.word	0x20000438
 8004660:	200004a0 	.word	0x200004a0

08004664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b04      	subs	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800467c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b04      	subs	r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f023 0201 	bic.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3b04      	subs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004694:	4a0c      	ldr	r2, [pc, #48]	@ (80046c8 <pxPortInitialiseStack+0x64>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b14      	subs	r3, #20
 800469e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f06f 0202 	mvn.w	r2, #2
 80046b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b20      	subs	r3, #32
 80046b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	080046cd 	.word	0x080046cd

080046cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <prvTaskExitError+0x60>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d00d      	beq.n	80046fc <prvTaskExitError+0x30>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e4:	b672      	cpsid	i
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	b662      	cpsie	i
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <prvTaskExitError+0x2c>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	b672      	cpsid	i
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	b662      	cpsie	i
 8004710:	60bb      	str	r3, [r7, #8]
}
 8004712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004714:	bf00      	nop
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0fc      	beq.n	8004716 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004758:	4808      	ldr	r0, [pc, #32]	@ (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800477a:	bf00      	nop
 800477c:	e000ed08 	.word	0xe000ed08

08004780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004786:	4b37      	ldr	r3, [pc, #220]	@ (8004864 <xPortStartScheduler+0xe4>)
 8004788:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	22ff      	movs	r2, #255	@ 0xff
 8004796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004868 <xPortStartScheduler+0xe8>)
 80047ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ae:	4b2f      	ldr	r3, [pc, #188]	@ (800486c <xPortStartScheduler+0xec>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b4:	e009      	b.n	80047ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047b6:	4b2d      	ldr	r3, [pc, #180]	@ (800486c <xPortStartScheduler+0xec>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <xPortStartScheduler+0xec>)
 80047be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b80      	cmp	r3, #128	@ 0x80
 80047d4:	d0ef      	beq.n	80047b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047d6:	4b25      	ldr	r3, [pc, #148]	@ (800486c <xPortStartScheduler+0xec>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1c3 0307 	rsb	r3, r3, #7
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d00d      	beq.n	80047fe <xPortStartScheduler+0x7e>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	b672      	cpsid	i
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	b662      	cpsie	i
 80047f6:	60bb      	str	r3, [r7, #8]
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	e7fd      	b.n	80047fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <xPortStartScheduler+0xec>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <xPortStartScheduler+0xec>)
 8004806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <xPortStartScheduler+0xec>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004810:	4a16      	ldr	r2, [pc, #88]	@ (800486c <xPortStartScheduler+0xec>)
 8004812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800481c:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <xPortStartScheduler+0xf0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a13      	ldr	r2, [pc, #76]	@ (8004870 <xPortStartScheduler+0xf0>)
 8004822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004828:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <xPortStartScheduler+0xf0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a10      	ldr	r2, [pc, #64]	@ (8004870 <xPortStartScheduler+0xf0>)
 800482e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004834:	f000 f8dc 	bl	80049f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004838:	4b0e      	ldr	r3, [pc, #56]	@ (8004874 <xPortStartScheduler+0xf4>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800483e:	f000 f8fb 	bl	8004a38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <xPortStartScheduler+0xf8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0c      	ldr	r2, [pc, #48]	@ (8004878 <xPortStartScheduler+0xf8>)
 8004848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800484c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800484e:	f7ff ff83 	bl	8004758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004852:	f7ff fc47 	bl	80040e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004856:	f7ff ff39 	bl	80046cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	e000e400 	.word	0xe000e400
 8004868:	200004ac 	.word	0x200004ac
 800486c:	200004b0 	.word	0x200004b0
 8004870:	e000ed20 	.word	0xe000ed20
 8004874:	2000000c 	.word	0x2000000c
 8004878:	e000ef34 	.word	0xe000ef34

0800487c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	b672      	cpsid	i
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	b662      	cpsie	i
 8004896:	607b      	str	r3, [r7, #4]
}
 8004898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800489a:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <vPortEnterCritical+0x64>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <vPortEnterCritical+0x64>)
 80048a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <vPortEnterCritical+0x64>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d112      	bne.n	80048d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048ac:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <vPortEnterCritical+0x68>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <vPortEnterCritical+0x56>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ba:	b672      	cpsid	i
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	b662      	cpsie	i
 80048ca:	603b      	str	r3, [r7, #0]
}
 80048cc:	bf00      	nop
 80048ce:	bf00      	nop
 80048d0:	e7fd      	b.n	80048ce <vPortEnterCritical+0x52>
	}
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ee:	4b13      	ldr	r3, [pc, #76]	@ (800493c <vPortExitCritical+0x54>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <vPortExitCritical+0x2a>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	b672      	cpsid	i
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	b662      	cpsie	i
 800490a:	607b      	str	r3, [r7, #4]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004912:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <vPortExitCritical+0x54>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3b01      	subs	r3, #1
 8004918:	4a08      	ldr	r2, [pc, #32]	@ (800493c <vPortExitCritical+0x54>)
 800491a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vPortExitCritical+0x54>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <vPortExitCritical+0x48>
 8004924:	2300      	movs	r3, #0
 8004926:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800492e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	2000000c 	.word	0x2000000c

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b15      	ldr	r3, [pc, #84]	@ (80049a0 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f01e 0f10 	tst.w	lr, #16
 8004950:	bf08      	it	eq
 8004952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004964:	b672      	cpsid	i
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	b662      	cpsie	i
 8004974:	f7ff fbb6 	bl	80040e4 <vTaskSwitchContext>
 8004978:	f04f 0000 	mov.w	r0, #0
 800497c:	f380 8811 	msr	BASEPRI, r0
 8004980:	bc09      	pop	{r0, r3}
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f01e 0f10 	tst.w	lr, #16
 800498e:	bf08      	it	eq
 8004990:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004994:	f380 8809 	msr	PSP, r0
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop

080049a0 <pxCurrentTCBConst>:
 80049a0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	607b      	str	r3, [r7, #4]
}
 80049c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049c6:	f7ff fad1 	bl	8003f6c <xTaskIncrementTick>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <xPortSysTickHandler+0x44>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f383 8811 	msr	BASEPRI, r3
}
 80049e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <vPortSetupTimerInterrupt+0x34>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <vPortSetupTimerInterrupt+0x38>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <vPortSetupTimerInterrupt+0x3c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <vPortSetupTimerInterrupt+0x40>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <vPortSetupTimerInterrupt+0x44>)
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a12:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <vPortSetupTimerInterrupt+0x34>)
 8004a14:	2207      	movs	r2, #7
 8004a16:	601a      	str	r2, [r3, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	e000e010 	.word	0xe000e010
 8004a28:	e000e018 	.word	0xe000e018
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	10624dd3 	.word	0x10624dd3
 8004a34:	e000e014 	.word	0xe000e014

08004a38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a48 <vPortEnableVFP+0x10>
 8004a3c:	6801      	ldr	r1, [r0, #0]
 8004a3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a42:	6001      	str	r1, [r0, #0]
 8004a44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a46:	bf00      	nop
 8004a48:	e000ed88 	.word	0xe000ed88

08004a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a58:	f7ff f9da 	bl	8003e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a64:	f000 f920 	bl	8004ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a68:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f040 8094 	bne.w	8004b9e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d017      	beq.n	8004abe <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <pvPortMalloc+0x72>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	b672      	cpsid	i
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	b662      	cpsie	i
 8004ab6:	617b      	str	r3, [r7, #20]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d06c      	beq.n	8004b9e <pvPortMalloc+0x152>
 8004ac4:	4b45      	ldr	r3, [pc, #276]	@ (8004bdc <pvPortMalloc+0x190>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d867      	bhi.n	8004b9e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ace:	4b44      	ldr	r3, [pc, #272]	@ (8004be0 <pvPortMalloc+0x194>)
 8004ad0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad2:	4b43      	ldr	r3, [pc, #268]	@ (8004be0 <pvPortMalloc+0x194>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ad8:	e004      	b.n	8004ae4 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d903      	bls.n	8004af6 <pvPortMalloc+0xaa>
 8004aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f1      	bne.n	8004ada <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004af6:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <pvPortMalloc+0x188>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d04e      	beq.n	8004b9e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2208      	movs	r2, #8
 8004b06:	4413      	add	r3, r2
 8004b08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	1ad2      	subs	r2, r2, r3
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d922      	bls.n	8004b68 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <pvPortMalloc+0x104>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	b672      	cpsid	i
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	b662      	cpsie	i
 8004b48:	613b      	str	r3, [r7, #16]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f902 	bl	8004d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1c      	ldr	r3, [pc, #112]	@ (8004bdc <pvPortMalloc+0x190>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1a      	ldr	r2, [pc, #104]	@ (8004bdc <pvPortMalloc+0x190>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <pvPortMalloc+0x190>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <pvPortMalloc+0x198>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <pvPortMalloc+0x190>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <pvPortMalloc+0x198>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b12      	ldr	r3, [pc, #72]	@ (8004bd8 <pvPortMalloc+0x18c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b9e:	f7ff f945 	bl	8003e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <pvPortMalloc+0x17c>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	b672      	cpsid	i
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	b662      	cpsie	i
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <pvPortMalloc+0x178>
	return pvReturn;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	@ 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200040bc 	.word	0x200040bc
 8004bd8:	200040c8 	.word	0x200040c8
 8004bdc:	200040c0 	.word	0x200040c0
 8004be0:	200040b4 	.word	0x200040b4
 8004be4:	200040c4 	.word	0x200040c4

08004be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04e      	beq.n	8004c98 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	425b      	negs	r3, r3
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4413      	add	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <vPortFree+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <vPortFree+0x4a>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	b672      	cpsid	i
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	b662      	cpsie	i
 8004c2a:	60fb      	str	r3, [r7, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <vPortFree+0x6e>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	b672      	cpsid	i
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	b662      	cpsie	i
 8004c4e:	60bb      	str	r3, [r7, #8]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <vPortFree+0xb8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d019      	beq.n	8004c98 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <vPortFree+0xb8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c7c:	f7ff f8c8 	bl	8003e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b07      	ldr	r3, [pc, #28]	@ (8004ca4 <vPortFree+0xbc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	4a06      	ldr	r2, [pc, #24]	@ (8004ca4 <vPortFree+0xbc>)
 8004c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f000 f86c 	bl	8004d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c94:	f7ff f8ca 	bl	8003e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200040c8 	.word	0x200040c8
 8004ca4:	200040c0 	.word	0x200040c0

08004ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb4:	4b27      	ldr	r3, [pc, #156]	@ (8004d54 <prvHeapInit+0xac>)
 8004cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <prvHeapInit+0xac>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <prvHeapInit+0xb0>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d58 <prvHeapInit+0xb0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <prvHeapInit+0xb4>)
 8004d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <prvHeapInit+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <prvHeapInit+0xb4>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a0a      	ldr	r2, [pc, #40]	@ (8004d60 <prvHeapInit+0xb8>)
 8004d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a09      	ldr	r2, [pc, #36]	@ (8004d64 <prvHeapInit+0xbc>)
 8004d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d40:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <prvHeapInit+0xc0>)
 8004d42:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d46:	601a      	str	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	200004b4 	.word	0x200004b4
 8004d58:	200040b4 	.word	0x200040b4
 8004d5c:	200040bc 	.word	0x200040bc
 8004d60:	200040c4 	.word	0x200040c4
 8004d64:	200040c0 	.word	0x200040c0
 8004d68:	200040c8 	.word	0x200040c8

08004d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d74:	4b28      	ldr	r3, [pc, #160]	@ (8004e18 <prvInsertBlockIntoFreeList+0xac>)
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e002      	b.n	8004d80 <prvInsertBlockIntoFreeList+0x14>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d8f7      	bhi.n	8004d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d108      	bne.n	8004dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	441a      	add	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d118      	bne.n	8004df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <prvInsertBlockIntoFreeList+0xb0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d00d      	beq.n	8004dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e008      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dea:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <prvInsertBlockIntoFreeList+0xb0>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e003      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d002      	beq.n	8004e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	200040b4 	.word	0x200040b4
 8004e1c:	200040bc 	.word	0x200040bc

08004e20 <std>:
 8004e20:	2300      	movs	r3, #0
 8004e22:	b510      	push	{r4, lr}
 8004e24:	4604      	mov	r4, r0
 8004e26:	e9c0 3300 	strd	r3, r3, [r0]
 8004e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e2e:	6083      	str	r3, [r0, #8]
 8004e30:	8181      	strh	r1, [r0, #12]
 8004e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e34:	81c2      	strh	r2, [r0, #14]
 8004e36:	6183      	str	r3, [r0, #24]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	305c      	adds	r0, #92	@ 0x5c
 8004e3e:	f000 f9e7 	bl	8005210 <memset>
 8004e42:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <std+0x58>)
 8004e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x5c>)
 8004e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <std+0x60>)
 8004e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <std+0x64>)
 8004e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <std+0x68>)
 8004e54:	6224      	str	r4, [r4, #32]
 8004e56:	429c      	cmp	r4, r3
 8004e58:	d006      	beq.n	8004e68 <std+0x48>
 8004e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e5e:	4294      	cmp	r4, r2
 8004e60:	d002      	beq.n	8004e68 <std+0x48>
 8004e62:	33d0      	adds	r3, #208	@ 0xd0
 8004e64:	429c      	cmp	r4, r3
 8004e66:	d105      	bne.n	8004e74 <std+0x54>
 8004e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e70:	f000 ba46 	b.w	8005300 <__retarget_lock_init_recursive>
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	08005061 	.word	0x08005061
 8004e7c:	08005083 	.word	0x08005083
 8004e80:	080050bb 	.word	0x080050bb
 8004e84:	080050df 	.word	0x080050df
 8004e88:	200040cc 	.word	0x200040cc

08004e8c <stdio_exit_handler>:
 8004e8c:	4a02      	ldr	r2, [pc, #8]	@ (8004e98 <stdio_exit_handler+0xc>)
 8004e8e:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <stdio_exit_handler+0x10>)
 8004e90:	4803      	ldr	r0, [pc, #12]	@ (8004ea0 <stdio_exit_handler+0x14>)
 8004e92:	f000 b869 	b.w	8004f68 <_fwalk_sglue>
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010
 8004e9c:	08005601 	.word	0x08005601
 8004ea0:	20000020 	.word	0x20000020

08004ea4 <cleanup_stdio>:
 8004ea4:	6841      	ldr	r1, [r0, #4]
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <cleanup_stdio+0x34>)
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	b510      	push	{r4, lr}
 8004eac:	4604      	mov	r4, r0
 8004eae:	d001      	beq.n	8004eb4 <cleanup_stdio+0x10>
 8004eb0:	f000 fba6 	bl	8005600 <_fflush_r>
 8004eb4:	68a1      	ldr	r1, [r4, #8]
 8004eb6:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <cleanup_stdio+0x38>)
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d002      	beq.n	8004ec2 <cleanup_stdio+0x1e>
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 fb9f 	bl	8005600 <_fflush_r>
 8004ec2:	68e1      	ldr	r1, [r4, #12]
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <cleanup_stdio+0x3c>)
 8004ec6:	4299      	cmp	r1, r3
 8004ec8:	d004      	beq.n	8004ed4 <cleanup_stdio+0x30>
 8004eca:	4620      	mov	r0, r4
 8004ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed0:	f000 bb96 	b.w	8005600 <_fflush_r>
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200040cc 	.word	0x200040cc
 8004edc:	20004134 	.word	0x20004134
 8004ee0:	2000419c 	.word	0x2000419c

08004ee4 <global_stdio_init.part.0>:
 8004ee4:	b510      	push	{r4, lr}
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <global_stdio_init.part.0+0x30>)
 8004ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8004f18 <global_stdio_init.part.0+0x34>)
 8004eea:	4a0c      	ldr	r2, [pc, #48]	@ (8004f1c <global_stdio_init.part.0+0x38>)
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	f7ff ff94 	bl	8004e20 <std>
 8004ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004efc:	2201      	movs	r2, #1
 8004efe:	2109      	movs	r1, #9
 8004f00:	f7ff ff8e 	bl	8004e20 <std>
 8004f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f08:	2202      	movs	r2, #2
 8004f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0e:	2112      	movs	r1, #18
 8004f10:	f7ff bf86 	b.w	8004e20 <std>
 8004f14:	20004204 	.word	0x20004204
 8004f18:	200040cc 	.word	0x200040cc
 8004f1c:	08004e8d 	.word	0x08004e8d

08004f20 <__sfp_lock_acquire>:
 8004f20:	4801      	ldr	r0, [pc, #4]	@ (8004f28 <__sfp_lock_acquire+0x8>)
 8004f22:	f000 b9ee 	b.w	8005302 <__retarget_lock_acquire_recursive>
 8004f26:	bf00      	nop
 8004f28:	2000420d 	.word	0x2000420d

08004f2c <__sfp_lock_release>:
 8004f2c:	4801      	ldr	r0, [pc, #4]	@ (8004f34 <__sfp_lock_release+0x8>)
 8004f2e:	f000 b9e9 	b.w	8005304 <__retarget_lock_release_recursive>
 8004f32:	bf00      	nop
 8004f34:	2000420d 	.word	0x2000420d

08004f38 <__sinit>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	f7ff fff0 	bl	8004f20 <__sfp_lock_acquire>
 8004f40:	6a23      	ldr	r3, [r4, #32]
 8004f42:	b11b      	cbz	r3, 8004f4c <__sinit+0x14>
 8004f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f48:	f7ff bff0 	b.w	8004f2c <__sfp_lock_release>
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <__sinit+0x28>)
 8004f4e:	6223      	str	r3, [r4, #32]
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <__sinit+0x2c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f5      	bne.n	8004f44 <__sinit+0xc>
 8004f58:	f7ff ffc4 	bl	8004ee4 <global_stdio_init.part.0>
 8004f5c:	e7f2      	b.n	8004f44 <__sinit+0xc>
 8004f5e:	bf00      	nop
 8004f60:	08004ea5 	.word	0x08004ea5
 8004f64:	20004204 	.word	0x20004204

08004f68 <_fwalk_sglue>:
 8004f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	4688      	mov	r8, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	2600      	movs	r6, #0
 8004f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f78:	f1b9 0901 	subs.w	r9, r9, #1
 8004f7c:	d505      	bpl.n	8004f8a <_fwalk_sglue+0x22>
 8004f7e:	6824      	ldr	r4, [r4, #0]
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d1f7      	bne.n	8004f74 <_fwalk_sglue+0xc>
 8004f84:	4630      	mov	r0, r6
 8004f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d907      	bls.n	8004fa0 <_fwalk_sglue+0x38>
 8004f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f94:	3301      	adds	r3, #1
 8004f96:	d003      	beq.n	8004fa0 <_fwalk_sglue+0x38>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	47c0      	blx	r8
 8004f9e:	4306      	orrs	r6, r0
 8004fa0:	3568      	adds	r5, #104	@ 0x68
 8004fa2:	e7e9      	b.n	8004f78 <_fwalk_sglue+0x10>

08004fa4 <_puts_r>:
 8004fa4:	6a03      	ldr	r3, [r0, #32]
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	6884      	ldr	r4, [r0, #8]
 8004faa:	4605      	mov	r5, r0
 8004fac:	460e      	mov	r6, r1
 8004fae:	b90b      	cbnz	r3, 8004fb4 <_puts_r+0x10>
 8004fb0:	f7ff ffc2 	bl	8004f38 <__sinit>
 8004fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fb6:	07db      	lsls	r3, r3, #31
 8004fb8:	d405      	bmi.n	8004fc6 <_puts_r+0x22>
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	0598      	lsls	r0, r3, #22
 8004fbe:	d402      	bmi.n	8004fc6 <_puts_r+0x22>
 8004fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fc2:	f000 f99e 	bl	8005302 <__retarget_lock_acquire_recursive>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	0719      	lsls	r1, r3, #28
 8004fca:	d502      	bpl.n	8004fd2 <_puts_r+0x2e>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d135      	bne.n	800503e <_puts_r+0x9a>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 f8c5 	bl	8005164 <__swsetup_r>
 8004fda:	b380      	cbz	r0, 800503e <_puts_r+0x9a>
 8004fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8004fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fe2:	07da      	lsls	r2, r3, #31
 8004fe4:	d405      	bmi.n	8004ff2 <_puts_r+0x4e>
 8004fe6:	89a3      	ldrh	r3, [r4, #12]
 8004fe8:	059b      	lsls	r3, r3, #22
 8004fea:	d402      	bmi.n	8004ff2 <_puts_r+0x4e>
 8004fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fee:	f000 f989 	bl	8005304 <__retarget_lock_release_recursive>
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da04      	bge.n	8005004 <_puts_r+0x60>
 8004ffa:	69a2      	ldr	r2, [r4, #24]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	dc17      	bgt.n	8005030 <_puts_r+0x8c>
 8005000:	290a      	cmp	r1, #10
 8005002:	d015      	beq.n	8005030 <_puts_r+0x8c>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	7019      	strb	r1, [r3, #0]
 800500c:	68a3      	ldr	r3, [r4, #8]
 800500e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005012:	3b01      	subs	r3, #1
 8005014:	60a3      	str	r3, [r4, #8]
 8005016:	2900      	cmp	r1, #0
 8005018:	d1ed      	bne.n	8004ff6 <_puts_r+0x52>
 800501a:	2b00      	cmp	r3, #0
 800501c:	da11      	bge.n	8005042 <_puts_r+0x9e>
 800501e:	4622      	mov	r2, r4
 8005020:	210a      	movs	r1, #10
 8005022:	4628      	mov	r0, r5
 8005024:	f000 f85f 	bl	80050e6 <__swbuf_r>
 8005028:	3001      	adds	r0, #1
 800502a:	d0d7      	beq.n	8004fdc <_puts_r+0x38>
 800502c:	250a      	movs	r5, #10
 800502e:	e7d7      	b.n	8004fe0 <_puts_r+0x3c>
 8005030:	4622      	mov	r2, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f857 	bl	80050e6 <__swbuf_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d1e7      	bne.n	800500c <_puts_r+0x68>
 800503c:	e7ce      	b.n	8004fdc <_puts_r+0x38>
 800503e:	3e01      	subs	r6, #1
 8005040:	e7e4      	b.n	800500c <_puts_r+0x68>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	6022      	str	r2, [r4, #0]
 8005048:	220a      	movs	r2, #10
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e7ee      	b.n	800502c <_puts_r+0x88>
	...

08005050 <puts>:
 8005050:	4b02      	ldr	r3, [pc, #8]	@ (800505c <puts+0xc>)
 8005052:	4601      	mov	r1, r0
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	f7ff bfa5 	b.w	8004fa4 <_puts_r>
 800505a:	bf00      	nop
 800505c:	2000001c 	.word	0x2000001c

08005060 <__sread>:
 8005060:	b510      	push	{r4, lr}
 8005062:	460c      	mov	r4, r1
 8005064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005068:	f000 f8fc 	bl	8005264 <_read_r>
 800506c:	2800      	cmp	r0, #0
 800506e:	bfab      	itete	ge
 8005070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005072:	89a3      	ldrhlt	r3, [r4, #12]
 8005074:	181b      	addge	r3, r3, r0
 8005076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800507a:	bfac      	ite	ge
 800507c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800507e:	81a3      	strhlt	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__swrite>:
 8005082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	461f      	mov	r7, r3
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	05db      	lsls	r3, r3, #23
 800508c:	4605      	mov	r5, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4616      	mov	r6, r2
 8005092:	d505      	bpl.n	80050a0 <__swrite+0x1e>
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	2302      	movs	r3, #2
 800509a:	2200      	movs	r2, #0
 800509c:	f000 f8d0 	bl	8005240 <_lseek_r>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	4628      	mov	r0, r5
 80050b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	f000 b8e7 	b.w	8005288 <_write_r>

080050ba <__sseek>:
 80050ba:	b510      	push	{r4, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c2:	f000 f8bd 	bl	8005240 <_lseek_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	bf15      	itete	ne
 80050cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050d6:	81a3      	strheq	r3, [r4, #12]
 80050d8:	bf18      	it	ne
 80050da:	81a3      	strhne	r3, [r4, #12]
 80050dc:	bd10      	pop	{r4, pc}

080050de <__sclose>:
 80050de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e2:	f000 b89d 	b.w	8005220 <_close_r>

080050e6 <__swbuf_r>:
 80050e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e8:	460e      	mov	r6, r1
 80050ea:	4614      	mov	r4, r2
 80050ec:	4605      	mov	r5, r0
 80050ee:	b118      	cbz	r0, 80050f8 <__swbuf_r+0x12>
 80050f0:	6a03      	ldr	r3, [r0, #32]
 80050f2:	b90b      	cbnz	r3, 80050f8 <__swbuf_r+0x12>
 80050f4:	f7ff ff20 	bl	8004f38 <__sinit>
 80050f8:	69a3      	ldr	r3, [r4, #24]
 80050fa:	60a3      	str	r3, [r4, #8]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	071a      	lsls	r2, r3, #28
 8005100:	d501      	bpl.n	8005106 <__swbuf_r+0x20>
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	b943      	cbnz	r3, 8005118 <__swbuf_r+0x32>
 8005106:	4621      	mov	r1, r4
 8005108:	4628      	mov	r0, r5
 800510a:	f000 f82b 	bl	8005164 <__swsetup_r>
 800510e:	b118      	cbz	r0, 8005118 <__swbuf_r+0x32>
 8005110:	f04f 37ff 	mov.w	r7, #4294967295
 8005114:	4638      	mov	r0, r7
 8005116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	6922      	ldr	r2, [r4, #16]
 800511c:	1a98      	subs	r0, r3, r2
 800511e:	6963      	ldr	r3, [r4, #20]
 8005120:	b2f6      	uxtb	r6, r6
 8005122:	4283      	cmp	r3, r0
 8005124:	4637      	mov	r7, r6
 8005126:	dc05      	bgt.n	8005134 <__swbuf_r+0x4e>
 8005128:	4621      	mov	r1, r4
 800512a:	4628      	mov	r0, r5
 800512c:	f000 fa68 	bl	8005600 <_fflush_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d1ed      	bne.n	8005110 <__swbuf_r+0x2a>
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	60a3      	str	r3, [r4, #8]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	6022      	str	r2, [r4, #0]
 8005140:	701e      	strb	r6, [r3, #0]
 8005142:	6962      	ldr	r2, [r4, #20]
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	429a      	cmp	r2, r3
 8005148:	d004      	beq.n	8005154 <__swbuf_r+0x6e>
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	07db      	lsls	r3, r3, #31
 800514e:	d5e1      	bpl.n	8005114 <__swbuf_r+0x2e>
 8005150:	2e0a      	cmp	r6, #10
 8005152:	d1df      	bne.n	8005114 <__swbuf_r+0x2e>
 8005154:	4621      	mov	r1, r4
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fa52 	bl	8005600 <_fflush_r>
 800515c:	2800      	cmp	r0, #0
 800515e:	d0d9      	beq.n	8005114 <__swbuf_r+0x2e>
 8005160:	e7d6      	b.n	8005110 <__swbuf_r+0x2a>
	...

08005164 <__swsetup_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <__swsetup_r+0xa8>)
 8005168:	4605      	mov	r5, r0
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	460c      	mov	r4, r1
 800516e:	b118      	cbz	r0, 8005178 <__swsetup_r+0x14>
 8005170:	6a03      	ldr	r3, [r0, #32]
 8005172:	b90b      	cbnz	r3, 8005178 <__swsetup_r+0x14>
 8005174:	f7ff fee0 	bl	8004f38 <__sinit>
 8005178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517c:	0719      	lsls	r1, r3, #28
 800517e:	d422      	bmi.n	80051c6 <__swsetup_r+0x62>
 8005180:	06da      	lsls	r2, r3, #27
 8005182:	d407      	bmi.n	8005194 <__swsetup_r+0x30>
 8005184:	2209      	movs	r2, #9
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	f04f 30ff 	mov.w	r0, #4294967295
 8005192:	e033      	b.n	80051fc <__swsetup_r+0x98>
 8005194:	0758      	lsls	r0, r3, #29
 8005196:	d512      	bpl.n	80051be <__swsetup_r+0x5a>
 8005198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800519a:	b141      	cbz	r1, 80051ae <__swsetup_r+0x4a>
 800519c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051a0:	4299      	cmp	r1, r3
 80051a2:	d002      	beq.n	80051aa <__swsetup_r+0x46>
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f8af 	bl	8005308 <_free_r>
 80051aa:	2300      	movs	r3, #0
 80051ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	2300      	movs	r3, #0
 80051b8:	6063      	str	r3, [r4, #4]
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	81a3      	strh	r3, [r4, #12]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	b94b      	cbnz	r3, 80051de <__swsetup_r+0x7a>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d4:	d003      	beq.n	80051de <__swsetup_r+0x7a>
 80051d6:	4621      	mov	r1, r4
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 fa5f 	bl	800569c <__smakebuf_r>
 80051de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e2:	f013 0201 	ands.w	r2, r3, #1
 80051e6:	d00a      	beq.n	80051fe <__swsetup_r+0x9a>
 80051e8:	2200      	movs	r2, #0
 80051ea:	60a2      	str	r2, [r4, #8]
 80051ec:	6962      	ldr	r2, [r4, #20]
 80051ee:	4252      	negs	r2, r2
 80051f0:	61a2      	str	r2, [r4, #24]
 80051f2:	6922      	ldr	r2, [r4, #16]
 80051f4:	b942      	cbnz	r2, 8005208 <__swsetup_r+0xa4>
 80051f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051fa:	d1c5      	bne.n	8005188 <__swsetup_r+0x24>
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	0799      	lsls	r1, r3, #30
 8005200:	bf58      	it	pl
 8005202:	6962      	ldrpl	r2, [r4, #20]
 8005204:	60a2      	str	r2, [r4, #8]
 8005206:	e7f4      	b.n	80051f2 <__swsetup_r+0x8e>
 8005208:	2000      	movs	r0, #0
 800520a:	e7f7      	b.n	80051fc <__swsetup_r+0x98>
 800520c:	2000001c 	.word	0x2000001c

08005210 <memset>:
 8005210:	4402      	add	r2, r0
 8005212:	4603      	mov	r3, r0
 8005214:	4293      	cmp	r3, r2
 8005216:	d100      	bne.n	800521a <memset+0xa>
 8005218:	4770      	bx	lr
 800521a:	f803 1b01 	strb.w	r1, [r3], #1
 800521e:	e7f9      	b.n	8005214 <memset+0x4>

08005220 <_close_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d06      	ldr	r5, [pc, #24]	@ (800523c <_close_r+0x1c>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f7fc f811 	bl	8001252 <_close>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_close_r+0x1a>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_close_r+0x1a>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	20004208 	.word	0x20004208

08005240 <_lseek_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	@ (8005260 <_lseek_r+0x20>)
 8005244:	4604      	mov	r4, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	2200      	movs	r2, #0
 800524c:	602a      	str	r2, [r5, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fc f826 	bl	80012a0 <_lseek>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_lseek_r+0x1e>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_lseek_r+0x1e>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	20004208 	.word	0x20004208

08005264 <_read_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d07      	ldr	r5, [pc, #28]	@ (8005284 <_read_r+0x20>)
 8005268:	4604      	mov	r4, r0
 800526a:	4608      	mov	r0, r1
 800526c:	4611      	mov	r1, r2
 800526e:	2200      	movs	r2, #0
 8005270:	602a      	str	r2, [r5, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f7fb ffb4 	bl	80011e0 <_read>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_read_r+0x1e>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b103      	cbz	r3, 8005282 <_read_r+0x1e>
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	20004208 	.word	0x20004208

08005288 <_write_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d07      	ldr	r5, [pc, #28]	@ (80052a8 <_write_r+0x20>)
 800528c:	4604      	mov	r4, r0
 800528e:	4608      	mov	r0, r1
 8005290:	4611      	mov	r1, r2
 8005292:	2200      	movs	r2, #0
 8005294:	602a      	str	r2, [r5, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	f7fb ffbf 	bl	800121a <_write>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_write_r+0x1e>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_write_r+0x1e>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	20004208 	.word	0x20004208

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	@ (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000001c 	.word	0x2000001c

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	4d0d      	ldr	r5, [pc, #52]	@ (80052f0 <__libc_init_array+0x38>)
 80052bc:	4c0d      	ldr	r4, [pc, #52]	@ (80052f4 <__libc_init_array+0x3c>)
 80052be:	1b64      	subs	r4, r4, r5
 80052c0:	10a4      	asrs	r4, r4, #2
 80052c2:	2600      	movs	r6, #0
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	4d0b      	ldr	r5, [pc, #44]	@ (80052f8 <__libc_init_array+0x40>)
 80052ca:	4c0c      	ldr	r4, [pc, #48]	@ (80052fc <__libc_init_array+0x44>)
 80052cc:	f000 fa54 	bl	8005778 <_init>
 80052d0:	1b64      	subs	r4, r4, r5
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	2600      	movs	r6, #0
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	08005950 	.word	0x08005950
 80052f4:	08005950 	.word	0x08005950
 80052f8:	08005950 	.word	0x08005950
 80052fc:	08005954 	.word	0x08005954

08005300 <__retarget_lock_init_recursive>:
 8005300:	4770      	bx	lr

08005302 <__retarget_lock_acquire_recursive>:
 8005302:	4770      	bx	lr

08005304 <__retarget_lock_release_recursive>:
 8005304:	4770      	bx	lr
	...

08005308 <_free_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4605      	mov	r5, r0
 800530c:	2900      	cmp	r1, #0
 800530e:	d041      	beq.n	8005394 <_free_r+0x8c>
 8005310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005314:	1f0c      	subs	r4, r1, #4
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfb8      	it	lt
 800531a:	18e4      	addlt	r4, r4, r3
 800531c:	f000 f8e0 	bl	80054e0 <__malloc_lock>
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <_free_r+0x90>)
 8005322:	6813      	ldr	r3, [r2, #0]
 8005324:	b933      	cbnz	r3, 8005334 <_free_r+0x2c>
 8005326:	6063      	str	r3, [r4, #4]
 8005328:	6014      	str	r4, [r2, #0]
 800532a:	4628      	mov	r0, r5
 800532c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005330:	f000 b8dc 	b.w	80054ec <__malloc_unlock>
 8005334:	42a3      	cmp	r3, r4
 8005336:	d908      	bls.n	800534a <_free_r+0x42>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	1821      	adds	r1, r4, r0
 800533c:	428b      	cmp	r3, r1
 800533e:	bf01      	itttt	eq
 8005340:	6819      	ldreq	r1, [r3, #0]
 8005342:	685b      	ldreq	r3, [r3, #4]
 8005344:	1809      	addeq	r1, r1, r0
 8005346:	6021      	streq	r1, [r4, #0]
 8005348:	e7ed      	b.n	8005326 <_free_r+0x1e>
 800534a:	461a      	mov	r2, r3
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	b10b      	cbz	r3, 8005354 <_free_r+0x4c>
 8005350:	42a3      	cmp	r3, r4
 8005352:	d9fa      	bls.n	800534a <_free_r+0x42>
 8005354:	6811      	ldr	r1, [r2, #0]
 8005356:	1850      	adds	r0, r2, r1
 8005358:	42a0      	cmp	r0, r4
 800535a:	d10b      	bne.n	8005374 <_free_r+0x6c>
 800535c:	6820      	ldr	r0, [r4, #0]
 800535e:	4401      	add	r1, r0
 8005360:	1850      	adds	r0, r2, r1
 8005362:	4283      	cmp	r3, r0
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	d1e0      	bne.n	800532a <_free_r+0x22>
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	6053      	str	r3, [r2, #4]
 800536e:	4408      	add	r0, r1
 8005370:	6010      	str	r0, [r2, #0]
 8005372:	e7da      	b.n	800532a <_free_r+0x22>
 8005374:	d902      	bls.n	800537c <_free_r+0x74>
 8005376:	230c      	movs	r3, #12
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	e7d6      	b.n	800532a <_free_r+0x22>
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	1821      	adds	r1, r4, r0
 8005380:	428b      	cmp	r3, r1
 8005382:	bf04      	itt	eq
 8005384:	6819      	ldreq	r1, [r3, #0]
 8005386:	685b      	ldreq	r3, [r3, #4]
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	bf04      	itt	eq
 800538c:	1809      	addeq	r1, r1, r0
 800538e:	6021      	streq	r1, [r4, #0]
 8005390:	6054      	str	r4, [r2, #4]
 8005392:	e7ca      	b.n	800532a <_free_r+0x22>
 8005394:	bd38      	pop	{r3, r4, r5, pc}
 8005396:	bf00      	nop
 8005398:	20004214 	.word	0x20004214

0800539c <sbrk_aligned>:
 800539c:	b570      	push	{r4, r5, r6, lr}
 800539e:	4e0f      	ldr	r6, [pc, #60]	@ (80053dc <sbrk_aligned+0x40>)
 80053a0:	460c      	mov	r4, r1
 80053a2:	6831      	ldr	r1, [r6, #0]
 80053a4:	4605      	mov	r5, r0
 80053a6:	b911      	cbnz	r1, 80053ae <sbrk_aligned+0x12>
 80053a8:	f000 f9d6 	bl	8005758 <_sbrk_r>
 80053ac:	6030      	str	r0, [r6, #0]
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f9d1 	bl	8005758 <_sbrk_r>
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	d103      	bne.n	80053c2 <sbrk_aligned+0x26>
 80053ba:	f04f 34ff 	mov.w	r4, #4294967295
 80053be:	4620      	mov	r0, r4
 80053c0:	bd70      	pop	{r4, r5, r6, pc}
 80053c2:	1cc4      	adds	r4, r0, #3
 80053c4:	f024 0403 	bic.w	r4, r4, #3
 80053c8:	42a0      	cmp	r0, r4
 80053ca:	d0f8      	beq.n	80053be <sbrk_aligned+0x22>
 80053cc:	1a21      	subs	r1, r4, r0
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f9c2 	bl	8005758 <_sbrk_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d1f2      	bne.n	80053be <sbrk_aligned+0x22>
 80053d8:	e7ef      	b.n	80053ba <sbrk_aligned+0x1e>
 80053da:	bf00      	nop
 80053dc:	20004210 	.word	0x20004210

080053e0 <_malloc_r>:
 80053e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e4:	1ccd      	adds	r5, r1, #3
 80053e6:	f025 0503 	bic.w	r5, r5, #3
 80053ea:	3508      	adds	r5, #8
 80053ec:	2d0c      	cmp	r5, #12
 80053ee:	bf38      	it	cc
 80053f0:	250c      	movcc	r5, #12
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	4606      	mov	r6, r0
 80053f6:	db01      	blt.n	80053fc <_malloc_r+0x1c>
 80053f8:	42a9      	cmp	r1, r5
 80053fa:	d904      	bls.n	8005406 <_malloc_r+0x26>
 80053fc:	230c      	movs	r3, #12
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	2000      	movs	r0, #0
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054dc <_malloc_r+0xfc>
 800540a:	f000 f869 	bl	80054e0 <__malloc_lock>
 800540e:	f8d8 3000 	ldr.w	r3, [r8]
 8005412:	461c      	mov	r4, r3
 8005414:	bb44      	cbnz	r4, 8005468 <_malloc_r+0x88>
 8005416:	4629      	mov	r1, r5
 8005418:	4630      	mov	r0, r6
 800541a:	f7ff ffbf 	bl	800539c <sbrk_aligned>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	4604      	mov	r4, r0
 8005422:	d158      	bne.n	80054d6 <_malloc_r+0xf6>
 8005424:	f8d8 4000 	ldr.w	r4, [r8]
 8005428:	4627      	mov	r7, r4
 800542a:	2f00      	cmp	r7, #0
 800542c:	d143      	bne.n	80054b6 <_malloc_r+0xd6>
 800542e:	2c00      	cmp	r4, #0
 8005430:	d04b      	beq.n	80054ca <_malloc_r+0xea>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	eb04 0903 	add.w	r9, r4, r3
 800543c:	f000 f98c 	bl	8005758 <_sbrk_r>
 8005440:	4581      	cmp	r9, r0
 8005442:	d142      	bne.n	80054ca <_malloc_r+0xea>
 8005444:	6821      	ldr	r1, [r4, #0]
 8005446:	1a6d      	subs	r5, r5, r1
 8005448:	4629      	mov	r1, r5
 800544a:	4630      	mov	r0, r6
 800544c:	f7ff ffa6 	bl	800539c <sbrk_aligned>
 8005450:	3001      	adds	r0, #1
 8005452:	d03a      	beq.n	80054ca <_malloc_r+0xea>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	442b      	add	r3, r5
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	f8d8 3000 	ldr.w	r3, [r8]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	bb62      	cbnz	r2, 80054bc <_malloc_r+0xdc>
 8005462:	f8c8 7000 	str.w	r7, [r8]
 8005466:	e00f      	b.n	8005488 <_malloc_r+0xa8>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	1b52      	subs	r2, r2, r5
 800546c:	d420      	bmi.n	80054b0 <_malloc_r+0xd0>
 800546e:	2a0b      	cmp	r2, #11
 8005470:	d917      	bls.n	80054a2 <_malloc_r+0xc2>
 8005472:	1961      	adds	r1, r4, r5
 8005474:	42a3      	cmp	r3, r4
 8005476:	6025      	str	r5, [r4, #0]
 8005478:	bf18      	it	ne
 800547a:	6059      	strne	r1, [r3, #4]
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	bf08      	it	eq
 8005480:	f8c8 1000 	streq.w	r1, [r8]
 8005484:	5162      	str	r2, [r4, r5]
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f82f 	bl	80054ec <__malloc_unlock>
 800548e:	f104 000b 	add.w	r0, r4, #11
 8005492:	1d23      	adds	r3, r4, #4
 8005494:	f020 0007 	bic.w	r0, r0, #7
 8005498:	1ac2      	subs	r2, r0, r3
 800549a:	bf1c      	itt	ne
 800549c:	1a1b      	subne	r3, r3, r0
 800549e:	50a3      	strne	r3, [r4, r2]
 80054a0:	e7af      	b.n	8005402 <_malloc_r+0x22>
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	bf0c      	ite	eq
 80054a8:	f8c8 2000 	streq.w	r2, [r8]
 80054ac:	605a      	strne	r2, [r3, #4]
 80054ae:	e7eb      	b.n	8005488 <_malloc_r+0xa8>
 80054b0:	4623      	mov	r3, r4
 80054b2:	6864      	ldr	r4, [r4, #4]
 80054b4:	e7ae      	b.n	8005414 <_malloc_r+0x34>
 80054b6:	463c      	mov	r4, r7
 80054b8:	687f      	ldr	r7, [r7, #4]
 80054ba:	e7b6      	b.n	800542a <_malloc_r+0x4a>
 80054bc:	461a      	mov	r2, r3
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d1fb      	bne.n	80054bc <_malloc_r+0xdc>
 80054c4:	2300      	movs	r3, #0
 80054c6:	6053      	str	r3, [r2, #4]
 80054c8:	e7de      	b.n	8005488 <_malloc_r+0xa8>
 80054ca:	230c      	movs	r3, #12
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f80c 	bl	80054ec <__malloc_unlock>
 80054d4:	e794      	b.n	8005400 <_malloc_r+0x20>
 80054d6:	6005      	str	r5, [r0, #0]
 80054d8:	e7d6      	b.n	8005488 <_malloc_r+0xa8>
 80054da:	bf00      	nop
 80054dc:	20004214 	.word	0x20004214

080054e0 <__malloc_lock>:
 80054e0:	4801      	ldr	r0, [pc, #4]	@ (80054e8 <__malloc_lock+0x8>)
 80054e2:	f7ff bf0e 	b.w	8005302 <__retarget_lock_acquire_recursive>
 80054e6:	bf00      	nop
 80054e8:	2000420c 	.word	0x2000420c

080054ec <__malloc_unlock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	@ (80054f4 <__malloc_unlock+0x8>)
 80054ee:	f7ff bf09 	b.w	8005304 <__retarget_lock_release_recursive>
 80054f2:	bf00      	nop
 80054f4:	2000420c 	.word	0x2000420c

080054f8 <__sflush_r>:
 80054f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005500:	0716      	lsls	r6, r2, #28
 8005502:	4605      	mov	r5, r0
 8005504:	460c      	mov	r4, r1
 8005506:	d454      	bmi.n	80055b2 <__sflush_r+0xba>
 8005508:	684b      	ldr	r3, [r1, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	dc02      	bgt.n	8005514 <__sflush_r+0x1c>
 800550e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	dd48      	ble.n	80055a6 <__sflush_r+0xae>
 8005514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005516:	2e00      	cmp	r6, #0
 8005518:	d045      	beq.n	80055a6 <__sflush_r+0xae>
 800551a:	2300      	movs	r3, #0
 800551c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005520:	682f      	ldr	r7, [r5, #0]
 8005522:	6a21      	ldr	r1, [r4, #32]
 8005524:	602b      	str	r3, [r5, #0]
 8005526:	d030      	beq.n	800558a <__sflush_r+0x92>
 8005528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	0759      	lsls	r1, r3, #29
 800552e:	d505      	bpl.n	800553c <__sflush_r+0x44>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005536:	b10b      	cbz	r3, 800553c <__sflush_r+0x44>
 8005538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	2300      	movs	r3, #0
 800553e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005540:	6a21      	ldr	r1, [r4, #32]
 8005542:	4628      	mov	r0, r5
 8005544:	47b0      	blx	r6
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	d106      	bne.n	800555a <__sflush_r+0x62>
 800554c:	6829      	ldr	r1, [r5, #0]
 800554e:	291d      	cmp	r1, #29
 8005550:	d82b      	bhi.n	80055aa <__sflush_r+0xb2>
 8005552:	4a2a      	ldr	r2, [pc, #168]	@ (80055fc <__sflush_r+0x104>)
 8005554:	410a      	asrs	r2, r1
 8005556:	07d6      	lsls	r6, r2, #31
 8005558:	d427      	bmi.n	80055aa <__sflush_r+0xb2>
 800555a:	2200      	movs	r2, #0
 800555c:	6062      	str	r2, [r4, #4]
 800555e:	04d9      	lsls	r1, r3, #19
 8005560:	6922      	ldr	r2, [r4, #16]
 8005562:	6022      	str	r2, [r4, #0]
 8005564:	d504      	bpl.n	8005570 <__sflush_r+0x78>
 8005566:	1c42      	adds	r2, r0, #1
 8005568:	d101      	bne.n	800556e <__sflush_r+0x76>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	b903      	cbnz	r3, 8005570 <__sflush_r+0x78>
 800556e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005572:	602f      	str	r7, [r5, #0]
 8005574:	b1b9      	cbz	r1, 80055a6 <__sflush_r+0xae>
 8005576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800557a:	4299      	cmp	r1, r3
 800557c:	d002      	beq.n	8005584 <__sflush_r+0x8c>
 800557e:	4628      	mov	r0, r5
 8005580:	f7ff fec2 	bl	8005308 <_free_r>
 8005584:	2300      	movs	r3, #0
 8005586:	6363      	str	r3, [r4, #52]	@ 0x34
 8005588:	e00d      	b.n	80055a6 <__sflush_r+0xae>
 800558a:	2301      	movs	r3, #1
 800558c:	4628      	mov	r0, r5
 800558e:	47b0      	blx	r6
 8005590:	4602      	mov	r2, r0
 8005592:	1c50      	adds	r0, r2, #1
 8005594:	d1c9      	bne.n	800552a <__sflush_r+0x32>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0c6      	beq.n	800552a <__sflush_r+0x32>
 800559c:	2b1d      	cmp	r3, #29
 800559e:	d001      	beq.n	80055a4 <__sflush_r+0xac>
 80055a0:	2b16      	cmp	r3, #22
 80055a2:	d11e      	bne.n	80055e2 <__sflush_r+0xea>
 80055a4:	602f      	str	r7, [r5, #0]
 80055a6:	2000      	movs	r0, #0
 80055a8:	e022      	b.n	80055f0 <__sflush_r+0xf8>
 80055aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	e01b      	b.n	80055ea <__sflush_r+0xf2>
 80055b2:	690f      	ldr	r7, [r1, #16]
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	d0f6      	beq.n	80055a6 <__sflush_r+0xae>
 80055b8:	0793      	lsls	r3, r2, #30
 80055ba:	680e      	ldr	r6, [r1, #0]
 80055bc:	bf08      	it	eq
 80055be:	694b      	ldreq	r3, [r1, #20]
 80055c0:	600f      	str	r7, [r1, #0]
 80055c2:	bf18      	it	ne
 80055c4:	2300      	movne	r3, #0
 80055c6:	eba6 0807 	sub.w	r8, r6, r7
 80055ca:	608b      	str	r3, [r1, #8]
 80055cc:	f1b8 0f00 	cmp.w	r8, #0
 80055d0:	dde9      	ble.n	80055a6 <__sflush_r+0xae>
 80055d2:	6a21      	ldr	r1, [r4, #32]
 80055d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055d6:	4643      	mov	r3, r8
 80055d8:	463a      	mov	r2, r7
 80055da:	4628      	mov	r0, r5
 80055dc:	47b0      	blx	r6
 80055de:	2800      	cmp	r0, #0
 80055e0:	dc08      	bgt.n	80055f4 <__sflush_r+0xfc>
 80055e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f4:	4407      	add	r7, r0
 80055f6:	eba8 0800 	sub.w	r8, r8, r0
 80055fa:	e7e7      	b.n	80055cc <__sflush_r+0xd4>
 80055fc:	dfbffffe 	.word	0xdfbffffe

08005600 <_fflush_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	690b      	ldr	r3, [r1, #16]
 8005604:	4605      	mov	r5, r0
 8005606:	460c      	mov	r4, r1
 8005608:	b913      	cbnz	r3, 8005610 <_fflush_r+0x10>
 800560a:	2500      	movs	r5, #0
 800560c:	4628      	mov	r0, r5
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	b118      	cbz	r0, 800561a <_fflush_r+0x1a>
 8005612:	6a03      	ldr	r3, [r0, #32]
 8005614:	b90b      	cbnz	r3, 800561a <_fflush_r+0x1a>
 8005616:	f7ff fc8f 	bl	8004f38 <__sinit>
 800561a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f3      	beq.n	800560a <_fflush_r+0xa>
 8005622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005624:	07d0      	lsls	r0, r2, #31
 8005626:	d404      	bmi.n	8005632 <_fflush_r+0x32>
 8005628:	0599      	lsls	r1, r3, #22
 800562a:	d402      	bmi.n	8005632 <_fflush_r+0x32>
 800562c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800562e:	f7ff fe68 	bl	8005302 <__retarget_lock_acquire_recursive>
 8005632:	4628      	mov	r0, r5
 8005634:	4621      	mov	r1, r4
 8005636:	f7ff ff5f 	bl	80054f8 <__sflush_r>
 800563a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800563c:	07da      	lsls	r2, r3, #31
 800563e:	4605      	mov	r5, r0
 8005640:	d4e4      	bmi.n	800560c <_fflush_r+0xc>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	059b      	lsls	r3, r3, #22
 8005646:	d4e1      	bmi.n	800560c <_fflush_r+0xc>
 8005648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800564a:	f7ff fe5b 	bl	8005304 <__retarget_lock_release_recursive>
 800564e:	e7dd      	b.n	800560c <_fflush_r+0xc>

08005650 <__swhatbuf_r>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	460c      	mov	r4, r1
 8005654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005658:	2900      	cmp	r1, #0
 800565a:	b096      	sub	sp, #88	@ 0x58
 800565c:	4615      	mov	r5, r2
 800565e:	461e      	mov	r6, r3
 8005660:	da0d      	bge.n	800567e <__swhatbuf_r+0x2e>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005668:	f04f 0100 	mov.w	r1, #0
 800566c:	bf14      	ite	ne
 800566e:	2340      	movne	r3, #64	@ 0x40
 8005670:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005674:	2000      	movs	r0, #0
 8005676:	6031      	str	r1, [r6, #0]
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	b016      	add	sp, #88	@ 0x58
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	466a      	mov	r2, sp
 8005680:	f000 f848 	bl	8005714 <_fstat_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	dbec      	blt.n	8005662 <__swhatbuf_r+0x12>
 8005688:	9901      	ldr	r1, [sp, #4]
 800568a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800568e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005692:	4259      	negs	r1, r3
 8005694:	4159      	adcs	r1, r3
 8005696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800569a:	e7eb      	b.n	8005674 <__swhatbuf_r+0x24>

0800569c <__smakebuf_r>:
 800569c:	898b      	ldrh	r3, [r1, #12]
 800569e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a0:	079d      	lsls	r5, r3, #30
 80056a2:	4606      	mov	r6, r0
 80056a4:	460c      	mov	r4, r1
 80056a6:	d507      	bpl.n	80056b8 <__smakebuf_r+0x1c>
 80056a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	2301      	movs	r3, #1
 80056b2:	6163      	str	r3, [r4, #20]
 80056b4:	b003      	add	sp, #12
 80056b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b8:	ab01      	add	r3, sp, #4
 80056ba:	466a      	mov	r2, sp
 80056bc:	f7ff ffc8 	bl	8005650 <__swhatbuf_r>
 80056c0:	9f00      	ldr	r7, [sp, #0]
 80056c2:	4605      	mov	r5, r0
 80056c4:	4639      	mov	r1, r7
 80056c6:	4630      	mov	r0, r6
 80056c8:	f7ff fe8a 	bl	80053e0 <_malloc_r>
 80056cc:	b948      	cbnz	r0, 80056e2 <__smakebuf_r+0x46>
 80056ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d2:	059a      	lsls	r2, r3, #22
 80056d4:	d4ee      	bmi.n	80056b4 <__smakebuf_r+0x18>
 80056d6:	f023 0303 	bic.w	r3, r3, #3
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	e7e2      	b.n	80056a8 <__smakebuf_r+0xc>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	6020      	str	r0, [r4, #0]
 80056e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	9b01      	ldr	r3, [sp, #4]
 80056ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056f2:	b15b      	cbz	r3, 800570c <__smakebuf_r+0x70>
 80056f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 f81d 	bl	8005738 <_isatty_r>
 80056fe:	b128      	cbz	r0, 800570c <__smakebuf_r+0x70>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	431d      	orrs	r5, r3
 8005710:	81a5      	strh	r5, [r4, #12]
 8005712:	e7cf      	b.n	80056b4 <__smakebuf_r+0x18>

08005714 <_fstat_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4d07      	ldr	r5, [pc, #28]	@ (8005734 <_fstat_r+0x20>)
 8005718:	2300      	movs	r3, #0
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	f7fb fda2 	bl	800126a <_fstat>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d102      	bne.n	8005730 <_fstat_r+0x1c>
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	b103      	cbz	r3, 8005730 <_fstat_r+0x1c>
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	bd38      	pop	{r3, r4, r5, pc}
 8005732:	bf00      	nop
 8005734:	20004208 	.word	0x20004208

08005738 <_isatty_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d06      	ldr	r5, [pc, #24]	@ (8005754 <_isatty_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb fda1 	bl	800128a <_isatty>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_isatty_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_isatty_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20004208 	.word	0x20004208

08005758 <_sbrk_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	@ (8005774 <_sbrk_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fdaa 	bl	80012bc <_sbrk>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_sbrk_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_sbrk_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20004208 	.word	0x20004208

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr
