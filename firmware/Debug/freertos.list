
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080032bc  080032bc  000042bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d4  080032d4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032dc  080032dc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032dc  080032dc  000042dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080032f0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080032f0  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aa0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001875  00000000  00000000  0000eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00010358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000593  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dff  00000000  00000000  00011043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac73  00000000  00000000  00035e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4059  00000000  00000000  00040ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124b0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c24  00000000  00000000  00124b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00126778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080032a4 	.word	0x080032a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080032a4 	.word	0x080032a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b090      	sub	sp, #64	@ 0x40
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050e:	4bad      	ldr	r3, [pc, #692]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4aac      	ldr	r2, [pc, #688]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4baa      	ldr	r3, [pc, #680]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0310 	and.w	r3, r3, #16
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000526:	4ba7      	ldr	r3, [pc, #668]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4aa6      	ldr	r2, [pc, #664]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800052c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4ba4      	ldr	r3, [pc, #656]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
 800053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4ba1      	ldr	r3, [pc, #644]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4aa0      	ldr	r2, [pc, #640]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b9e      	ldr	r3, [pc, #632]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	623b      	str	r3, [r7, #32]
 8000554:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b9b      	ldr	r3, [pc, #620]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a9a      	ldr	r2, [pc, #616]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b98      	ldr	r3, [pc, #608]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b95      	ldr	r3, [pc, #596]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a94      	ldr	r2, [pc, #592]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b92      	ldr	r3, [pc, #584]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b8f      	ldr	r3, [pc, #572]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a8e      	ldr	r2, [pc, #568]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b8c      	ldr	r3, [pc, #560]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800059e:	4b89      	ldr	r3, [pc, #548]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a88      	ldr	r2, [pc, #544]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b86      	ldr	r3, [pc, #536]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005b6:	4b83      	ldr	r3, [pc, #524]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a82      	ldr	r2, [pc, #520]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b80      	ldr	r3, [pc, #512]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005ce:	4b7d      	ldr	r3, [pc, #500]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a7c      	ldr	r2, [pc, #496]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b7a      	ldr	r3, [pc, #488]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b77      	ldr	r3, [pc, #476]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a76      	ldr	r2, [pc, #472]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b74      	ldr	r3, [pc, #464]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b71      	ldr	r3, [pc, #452]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a70      	ldr	r2, [pc, #448]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b6e      	ldr	r3, [pc, #440]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	486b      	ldr	r0, [pc, #428]	@ (80007c8 <MX_GPIO_Init+0x2d0>)
 800061c:	f001 f8b6 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000626:	4869      	ldr	r0, [pc, #420]	@ (80007cc <MX_GPIO_Init+0x2d4>)
 8000628:	f001 f8b0 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	4867      	ldr	r0, [pc, #412]	@ (80007d0 <MX_GPIO_Init+0x2d8>)
 8000632:	f001 f8ab 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063c:	4865      	ldr	r0, [pc, #404]	@ (80007d4 <MX_GPIO_Init+0x2dc>)
 800063e:	f001 f8a5 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	21c8      	movs	r1, #200	@ 0xc8
 8000646:	4864      	ldr	r0, [pc, #400]	@ (80007d8 <MX_GPIO_Init+0x2e0>)
 8000648:	f001 f8a0 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800065c:	230e      	movs	r3, #14
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000664:	4619      	mov	r1, r3
 8000666:	485d      	ldr	r0, [pc, #372]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 8000668:	f000 fecc 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800066c:	2308      	movs	r3, #8
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800067c:	4619      	mov	r1, r3
 800067e:	4857      	ldr	r0, [pc, #348]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 8000680:	f000 fec0 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000684:	2304      	movs	r3, #4
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000694:	2309      	movs	r3, #9
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800069c:	4619      	mov	r1, r3
 800069e:	484f      	ldr	r0, [pc, #316]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 80006a0:	f000 feb0 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006a4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b6:	230b      	movs	r3, #11
 80006b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006be:	4619      	mov	r1, r3
 80006c0:	4845      	ldr	r0, [pc, #276]	@ (80007d8 <MX_GPIO_Init+0x2e0>)
 80006c2:	f000 fe9f 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006c6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006d8:	230c      	movs	r3, #12
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006e0:	4619      	mov	r1, r3
 80006e2:	483e      	ldr	r0, [pc, #248]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 80006e4:	f000 fe8e 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80006e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ee:	2312      	movs	r3, #18
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fa:	2304      	movs	r3, #4
 80006fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000702:	4619      	mov	r1, r3
 8000704:	4836      	ldr	r0, [pc, #216]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 8000706:	f000 fe7d 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800070a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800071c:	230a      	movs	r3, #10
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000724:	4619      	mov	r1, r3
 8000726:	482e      	ldr	r0, [pc, #184]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 8000728:	f000 fe6c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800072c:	2310      	movs	r3, #16
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800073c:	2302      	movs	r3, #2
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000744:	4619      	mov	r1, r3
 8000746:	4826      	ldr	r0, [pc, #152]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 8000748:	f000 fe5c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800075c:	2308      	movs	r3, #8
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	@ (80007c8 <MX_GPIO_Init+0x2d0>)
 8000768:	f000 fe4c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800076c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800077e:	230c      	movs	r3, #12
 8000780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000786:	4619      	mov	r1, r3
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <MX_GPIO_Init+0x2ec>)
 800078a:	f000 fe3b 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800078e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007a0:	2301      	movs	r3, #1
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a8:	4619      	mov	r1, r3
 80007aa:	480f      	ldr	r0, [pc, #60]	@ (80007e8 <MX_GPIO_Init+0x2f0>)
 80007ac:	f000 fe2a 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007b0:	2360      	movs	r3, #96	@ 0x60
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c0:	230d      	movs	r3, #13
 80007c2:	e013      	b.n	80007ec <MX_GPIO_Init+0x2f4>
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40022000 	.word	0x40022000
 80007d0:	40022800 	.word	0x40022800
 80007d4:	40021c00 	.word	0x40021c00
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	48bc      	ldr	r0, [pc, #752]	@ (8000ae8 <MX_GPIO_Init+0x5f0>)
 80007f6:	f000 fe05 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007fa:	2380      	movs	r3, #128	@ 0x80
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800080a:	2307      	movs	r3, #7
 800080c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	48b5      	ldr	r0, [pc, #724]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000816:	f000 fdf5 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800082a:	230a      	movs	r3, #10
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	48ad      	ldr	r0, [pc, #692]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000836:	f000 fde5 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800083a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084c:	230c      	movs	r3, #12
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000854:	4619      	mov	r1, r3
 8000856:	48a6      	ldr	r0, [pc, #664]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 8000858:	f000 fdd4 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800085c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800086e:	230e      	movs	r3, #14
 8000870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	489e      	ldr	r0, [pc, #632]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 800087a:	f000 fdc3 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000890:	4619      	mov	r1, r3
 8000892:	4898      	ldr	r0, [pc, #608]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000894:	f000 fdb6 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000898:	2340      	movs	r3, #64	@ 0x40
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4892      	ldr	r0, [pc, #584]	@ (8000af8 <MX_GPIO_Init+0x600>)
 80008ae:	f000 fda9 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008b2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c4:	230c      	movs	r3, #12
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	488a      	ldr	r0, [pc, #552]	@ (8000af8 <MX_GPIO_Init+0x600>)
 80008d0:	f000 fd98 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008d4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e6:	230a      	movs	r3, #10
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	4882      	ldr	r0, [pc, #520]	@ (8000afc <MX_GPIO_Init+0x604>)
 80008f2:	f000 fd87 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008f6:	23f0      	movs	r3, #240	@ 0xf0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000906:	230a      	movs	r3, #10
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800090a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800090e:	4619      	mov	r1, r3
 8000910:	487b      	ldr	r0, [pc, #492]	@ (8000b00 <MX_GPIO_Init+0x608>)
 8000912:	f000 fd77 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000916:	23f7      	movs	r3, #247	@ 0xf7
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000926:	230e      	movs	r3, #14
 8000928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800092a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800092e:	4619      	mov	r1, r3
 8000930:	4874      	ldr	r0, [pc, #464]	@ (8000b04 <MX_GPIO_Init+0x60c>)
 8000932:	f000 fd67 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000948:	2309      	movs	r3, #9
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	4867      	ldr	r0, [pc, #412]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 8000954:	f000 fd56 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800096a:	230a      	movs	r3, #10
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	485e      	ldr	r0, [pc, #376]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 8000976:	f000 fd45 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	4859      	ldr	r0, [pc, #356]	@ (8000af8 <MX_GPIO_Init+0x600>)
 8000992:	f000 fd37 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009a6:	230d      	movs	r3, #13
 80009a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4851      	ldr	r0, [pc, #324]	@ (8000af8 <MX_GPIO_Init+0x600>)
 80009b2:	f000 fd27 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80009b6:	f241 030e 	movw	r3, #4110	@ 0x100e
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009cc:	4619      	mov	r1, r3
 80009ce:	484c      	ldr	r0, [pc, #304]	@ (8000b00 <MX_GPIO_Init+0x608>)
 80009d0:	f000 fd18 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e6:	4619      	mov	r1, r3
 80009e8:	4847      	ldr	r0, [pc, #284]	@ (8000b08 <MX_GPIO_Init+0x610>)
 80009ea:	f000 fd0b 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a00:	230c      	movs	r3, #12
 8000a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4840      	ldr	r0, [pc, #256]	@ (8000b0c <MX_GPIO_Init+0x614>)
 8000a0c:	f000 fcfa 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a10:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a22:	230e      	movs	r3, #14
 8000a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4834      	ldr	r0, [pc, #208]	@ (8000b00 <MX_GPIO_Init+0x608>)
 8000a2e:	f000 fce9 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a32:	2308      	movs	r3, #8
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	482e      	ldr	r0, [pc, #184]	@ (8000b04 <MX_GPIO_Init+0x60c>)
 8000a4a:	f000 fcdb 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a60:	230d      	movs	r3, #13
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4821      	ldr	r0, [pc, #132]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 8000a6c:	f000 fcca 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a70:	2310      	movs	r3, #16
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	481d      	ldr	r0, [pc, #116]	@ (8000af8 <MX_GPIO_Init+0x600>)
 8000a84:	f000 fcbe 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <MX_GPIO_Init+0x600>)
 8000aa4:	f000 fcae 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000aa8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aba:	4619      	mov	r1, r3
 8000abc:	4814      	ldr	r0, [pc, #80]	@ (8000b10 <MX_GPIO_Init+0x618>)
 8000abe:	f000 fca1 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_GPIO_Init+0x618>)
 8000adc:	f000 fc92 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ae0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ae4:	e016      	b.n	8000b14 <MX_GPIO_Init+0x61c>
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40022400 	.word	0x40022400
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40022000 	.word	0x40022000
 8000b04:	40022800 	.word	0x40022800
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b22:	230d      	movs	r3, #13
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	48b4      	ldr	r0, [pc, #720]	@ (8000e00 <MX_GPIO_Init+0x908>)
 8000b2e:	f000 fc69 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b42:	2302      	movs	r3, #2
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	48ad      	ldr	r0, [pc, #692]	@ (8000e04 <MX_GPIO_Init+0x90c>)
 8000b4e:	f000 fc59 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b64:	2307      	movs	r3, #7
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	48a6      	ldr	r0, [pc, #664]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000b70:	f000 fc48 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	489e      	ldr	r0, [pc, #632]	@ (8000e04 <MX_GPIO_Init+0x90c>)
 8000b8a:	f000 fc3b 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4897      	ldr	r0, [pc, #604]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000bac:	f000 fc2a 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	488f      	ldr	r0, [pc, #572]	@ (8000e04 <MX_GPIO_Init+0x90c>)
 8000bc8:	f000 fc1c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000bcc:	23c0      	movs	r3, #192	@ 0xc0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be4:	4619      	mov	r1, r3
 8000be6:	4889      	ldr	r0, [pc, #548]	@ (8000e0c <MX_GPIO_Init+0x914>)
 8000be8:	f000 fc0c 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000bec:	2310      	movs	r3, #16
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	487e      	ldr	r0, [pc, #504]	@ (8000e00 <MX_GPIO_Init+0x908>)
 8000c08:	f000 fbfc 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c0c:	2328      	movs	r3, #40	@ 0x28
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4876      	ldr	r0, [pc, #472]	@ (8000e00 <MX_GPIO_Init+0x908>)
 8000c28:	f000 fbec 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c2c:	23c8      	movs	r3, #200	@ 0xc8
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	4873      	ldr	r0, [pc, #460]	@ (8000e10 <MX_GPIO_Init+0x918>)
 8000c44:	f000 fbde 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c48:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	486d      	ldr	r0, [pc, #436]	@ (8000e14 <MX_GPIO_Init+0x91c>)
 8000c5e:	f000 fbd1 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c62:	2308      	movs	r3, #8
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4863      	ldr	r0, [pc, #396]	@ (8000e0c <MX_GPIO_Init+0x914>)
 8000c7e:	f000 fbc1 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c82:	2305      	movs	r3, #5
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c92:	230a      	movs	r3, #10
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	485b      	ldr	r0, [pc, #364]	@ (8000e0c <MX_GPIO_Init+0x914>)
 8000c9e:	f000 fbb1 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca2:	2332      	movs	r3, #50	@ 0x32
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb2:	230b      	movs	r3, #11
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4853      	ldr	r0, [pc, #332]	@ (8000e0c <MX_GPIO_Init+0x914>)
 8000cbe:	f000 fba1 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cd2:	2309      	movs	r3, #9
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484e      	ldr	r0, [pc, #312]	@ (8000e18 <MX_GPIO_Init+0x920>)
 8000cde:	f000 fb91 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000ce2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4847      	ldr	r0, [pc, #284]	@ (8000e1c <MX_GPIO_Init+0x924>)
 8000d00:	f000 fb80 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d04:	2304      	movs	r3, #4
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	483e      	ldr	r0, [pc, #248]	@ (8000e10 <MX_GPIO_Init+0x918>)
 8000d18:	f000 fb74 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d1c:	2382      	movs	r3, #130	@ 0x82
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	4834      	ldr	r0, [pc, #208]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000d38:	f000 fb64 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	482e      	ldr	r0, [pc, #184]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000d50:	f000 fb58 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000d54:	2350      	movs	r3, #80	@ 0x50
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d64:	230d      	movs	r3, #13
 8000d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4826      	ldr	r0, [pc, #152]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000d70:	f000 fb48 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d74:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d86:	2304      	movs	r3, #4
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481b      	ldr	r0, [pc, #108]	@ (8000e00 <MX_GPIO_Init+0x908>)
 8000d92:	f000 fb37 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <MX_GPIO_Init+0x910>)
 8000db2:	f000 fb27 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000db6:	2340      	movs	r3, #64	@ 0x40
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000dc6:	2309      	movs	r3, #9
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <MX_GPIO_Init+0x908>)
 8000dd2:	f000 fb17 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000dd6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000de8:	2305      	movs	r3, #5
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <MX_GPIO_Init+0x920>)
 8000df4:	f000 fb06 	bl	8001404 <HAL_GPIO_Init>

}
 8000df8:	bf00      	nop
 8000dfa:	3740      	adds	r7, #64	@ 0x40
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021c00 	.word	0x40021c00
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f000 f9ab 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f81a 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f7ff fb64 	bl	80004f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e30:	f000 f8ee 	bl	8001010 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_RESET) {
 8000e34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e38:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <main+0x3c>)
 8000e3a:	f000 fc8f 	bl	800175c <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <main+0x30>
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2102      	movs	r1, #2
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <main+0x3c>)
 8000e4a:	f000 fc9f 	bl	800178c <HAL_GPIO_WritePin>
 8000e4e:	e7f1      	b.n	8000e34 <main+0x14>
	  } else {
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2102      	movs	r1, #2
 8000e54:	4801      	ldr	r0, [pc, #4]	@ (8000e5c <main+0x3c>)
 8000e56:	f000 fc99 	bl	800178c <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11) == GPIO_PIN_RESET) {
 8000e5a:	e7eb      	b.n	8000e34 <main+0x14>
 8000e5c:	40022000 	.word	0x40022000

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	@ 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 f9ec 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <SystemClock_Config+0xd0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	4a29      	ldr	r2, [pc, #164]	@ (8000f30 <SystemClock_Config+0xd0>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <SystemClock_Config+0xd0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	4b25      	ldr	r3, [pc, #148]	@ (8000f34 <SystemClock_Config+0xd4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a24      	ldr	r2, [pc, #144]	@ (8000f34 <SystemClock_Config+0xd4>)
 8000ea2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <SystemClock_Config+0xd4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ecc:	23d8      	movs	r3, #216	@ 0xd8
 8000ece:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fcbf 	bl	8001860 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f826 	bl	8000f38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eec:	f000 fc68 	bl	80017c0 <HAL_PWREx_EnableOverDrive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ef6:	f000 f81f 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2107      	movs	r1, #7
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 ff45 	bl	8001da8 <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f24:	f000 f808 	bl	8000f38 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	@ 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <Error_Handler+0x8>

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x44>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f909 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <MX_USART2_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_USART2_UART_Init+0x58>)
 8001054:	f001 fc7e 	bl	8002954 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f7ff ff6b 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000028 	.word	0x20000028
 800106c:	40004400 	.word	0x40004400

08001070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0aa      	sub	sp, #168	@ 0xa8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2284      	movs	r2, #132	@ 0x84
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f8db 	bl	800324c <memset>
  if(uartHandle->Instance==USART2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <HAL_UART_MspInit+0xb0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d13a      	bne.n	8001116 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 f861 	bl	8002174 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff ff3e 	bl	8000f38 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <HAL_UART_MspInit+0xb4>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010ec:	230c      	movs	r3, #12
 80010ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001104:	2307      	movs	r3, #7
 8001106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <HAL_UART_MspInit+0xb8>)
 8001112:	f000 f977 	bl	8001404 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	37a8      	adds	r7, #168	@ 0xa8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001130:	f7ff ff5c 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 f87f 	bl	800325c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fe5f 	bl	8000e20 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001170:	080032e4 	.word	0x080032e4
  ldr r2, =_sbss
 8001174:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001178:	200000b4 	.word	0x200000b4

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>

0800117e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f90a 	bl	800139c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f805 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f7ff fed9 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f917 	bl	80013ea <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f8ed 	bl	80013b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	200000b0 	.word	0x200000b0

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	200000b0 	.word	0x200000b0

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	4313      	orrs	r3, r2
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	05fa0000 	.word	0x05fa0000

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001368:	d301      	bcc.n	800136e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136a:	2301      	movs	r3, #1
 800136c:	e00f      	b.n	800138e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <SysTick_Config+0x40>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3b01      	subs	r3, #1
 8001374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001376:	210f      	movs	r1, #15
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f7ff ff8e 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x40>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x40>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff47 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
 80013be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c4:	f7ff ff5c 	bl	8001280 <__NVIC_GetPriorityGrouping>
 80013c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff ff8e 	bl	80012f0 <NVIC_EncodePriority>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffb0 	bl	8001358 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e175      	b.n	8001710 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8164 	bne.w	800170a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d005      	beq.n	800145a <HAL_GPIO_Init+0x56>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d130      	bne.n	80014bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80be 	beq.w	800170a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b66      	ldr	r3, [pc, #408]	@ (8001728 <HAL_GPIO_Init+0x324>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a65      	ldr	r2, [pc, #404]	@ (8001728 <HAL_GPIO_Init+0x324>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b63      	ldr	r3, [pc, #396]	@ (8001728 <HAL_GPIO_Init+0x324>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015a6:	4a61      	ldr	r2, [pc, #388]	@ (800172c <HAL_GPIO_Init+0x328>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <HAL_GPIO_Init+0x32c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d037      	beq.n	8001642 <HAL_GPIO_Init+0x23e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a57      	ldr	r2, [pc, #348]	@ (8001734 <HAL_GPIO_Init+0x330>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d031      	beq.n	800163e <HAL_GPIO_Init+0x23a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a56      	ldr	r2, [pc, #344]	@ (8001738 <HAL_GPIO_Init+0x334>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02b      	beq.n	800163a <HAL_GPIO_Init+0x236>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a55      	ldr	r2, [pc, #340]	@ (800173c <HAL_GPIO_Init+0x338>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x232>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a54      	ldr	r2, [pc, #336]	@ (8001740 <HAL_GPIO_Init+0x33c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x22e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a53      	ldr	r2, [pc, #332]	@ (8001744 <HAL_GPIO_Init+0x340>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x22a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	@ (8001748 <HAL_GPIO_Init+0x344>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x226>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a51      	ldr	r2, [pc, #324]	@ (800174c <HAL_GPIO_Init+0x348>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x222>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a50      	ldr	r2, [pc, #320]	@ (8001750 <HAL_GPIO_Init+0x34c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x21e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	@ (8001754 <HAL_GPIO_Init+0x350>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x21a>
 800161a:	2309      	movs	r3, #9
 800161c:	e012      	b.n	8001644 <HAL_GPIO_Init+0x240>
 800161e:	230a      	movs	r3, #10
 8001620:	e010      	b.n	8001644 <HAL_GPIO_Init+0x240>
 8001622:	2308      	movs	r3, #8
 8001624:	e00e      	b.n	8001644 <HAL_GPIO_Init+0x240>
 8001626:	2307      	movs	r3, #7
 8001628:	e00c      	b.n	8001644 <HAL_GPIO_Init+0x240>
 800162a:	2306      	movs	r3, #6
 800162c:	e00a      	b.n	8001644 <HAL_GPIO_Init+0x240>
 800162e:	2305      	movs	r3, #5
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x240>
 8001632:	2304      	movs	r3, #4
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x240>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x240>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x240>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x240>
 8001642:	2300      	movs	r3, #0
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001654:	4935      	ldr	r1, [pc, #212]	@ (800172c <HAL_GPIO_Init+0x328>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	4b3d      	ldr	r3, [pc, #244]	@ (8001758 <HAL_GPIO_Init+0x354>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001686:	4a34      	ldr	r2, [pc, #208]	@ (8001758 <HAL_GPIO_Init+0x354>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_GPIO_Init+0x354>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b0:	4a29      	ldr	r2, [pc, #164]	@ (8001758 <HAL_GPIO_Init+0x354>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <HAL_GPIO_Init+0x354>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016da:	4a1f      	ldr	r2, [pc, #124]	@ (8001758 <HAL_GPIO_Init+0x354>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_GPIO_Init+0x354>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_GPIO_Init+0x354>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f67f ae86 	bls.w	8001424 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40021400 	.word	0x40021400
 8001748:	40021800 	.word	0x40021800
 800174c:	40021c00 	.word	0x40021c00
 8001750:	40022000 	.word	0x40022000
 8001754:	40022400 	.word	0x40022400
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_PWREx_EnableOverDrive+0x98>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1d      	ldr	r2, [pc, #116]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ee:	f7ff fd17 	bl	8001220 <HAL_GetTick>
 80017f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f4:	e009      	b.n	800180a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f6:	f7ff fd13 	bl	8001220 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001804:	d901      	bls.n	800180a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e022      	b.n	8001850 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001816:	d1ee      	bne.n	80017f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 800181e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001822:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001824:	f7ff fcfc 	bl	8001220 <HAL_GetTick>
 8001828:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800182a:	e009      	b.n	8001840 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800182c:	f7ff fcf8 	bl	8001220 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800183a:	d901      	bls.n	8001840 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e007      	b.n	8001850 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800184c:	d1ee      	bne.n	800182c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e291      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001884:	4b96      	ldr	r3, [pc, #600]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d00c      	beq.n	80018aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001890:	4b93      	ldr	r3, [pc, #588]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
 800189c:	4b90      	ldr	r3, [pc, #576]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a8:	d10b      	bne.n	80018c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	4b8d      	ldr	r3, [pc, #564]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06c      	beq.n	8001990 <HAL_RCC_OscConfig+0x130>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d168      	bne.n	8001990 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e26b      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x7a>
 80018cc:	4b84      	ldr	r3, [pc, #528]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a83      	ldr	r2, [pc, #524]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e02e      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x9c>
 80018e2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0xc0>
 8001906:	4b76      	ldr	r3, [pc, #472]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a75      	ldr	r2, [pc, #468]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a72      	ldr	r2, [pc, #456]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xd8>
 8001920:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6b      	ldr	r2, [pc, #428]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fc6e 	bl	8001220 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fc6a 	bl	8001220 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	@ 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e21f      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b61      	ldr	r3, [pc, #388]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xe8>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff fc5a 	bl	8001220 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc56 	bl	8001220 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e20b      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b57      	ldr	r3, [pc, #348]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x110>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d069      	beq.n	8001a72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x190>
 80019b6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x17a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1df      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b41      	ldr	r3, [pc, #260]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	493d      	ldr	r1, [pc, #244]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e040      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a38      	ldr	r2, [pc, #224]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc0c 	bl	8001220 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc08 	bl	8001220 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1bd      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4929      	ldr	r1, [pc, #164]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fbe8 	bl	8001220 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fbe4 	bl	8001220 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e199      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff fbc5 	bl	8001220 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fbc1 	bl	8001220 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e176      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x23a>
 8001ab8:	e01a      	b.n	8001af0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbab 	bl	8001220 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fba7 	bl	8001220 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d903      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e15c      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
 8001ae0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b91      	ldr	r3, [pc, #580]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80a4 	beq.w	8001c46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afe:	4b8b      	ldr	r3, [pc, #556]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a87      	ldr	r2, [pc, #540]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	2301      	movs	r3, #1
 8001b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b26:	4b82      	ldr	r3, [pc, #520]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b32:	4b7f      	ldr	r3, [pc, #508]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7e      	ldr	r2, [pc, #504]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fb6f 	bl	8001220 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b46:	f7ff fb6b 	bl	8001220 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	@ 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e120      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b58:	4b75      	ldr	r3, [pc, #468]	@ (8001d30 <HAL_RCC_OscConfig+0x4d0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x31a>
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b70:	4a6e      	ldr	r2, [pc, #440]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x33c>
 8001b82:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a69      	ldr	r2, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	4b67      	ldr	r3, [pc, #412]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b92:	4a66      	ldr	r2, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b9a:	e01c      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x35e>
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a60      	ldr	r2, [pc, #384]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bbc:	e00b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x376>
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bca:	4b58      	ldr	r3, [pc, #352]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff fb1f 	bl	8001220 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff fb1b 	bl	8001220 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0ce      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ee      	beq.n	8001be6 <HAL_RCC_OscConfig+0x386>
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb09 	bl	8001220 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fb05 	bl	8001220 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a4 	beq.w	8001d98 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d06b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d149      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fad6 	bl	8001220 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fad2 	bl	8001220 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e087      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	019b      	lsls	r3, r3, #6
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	085b      	lsrs	r3, r3, #1
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001cc2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a18      	ldr	r2, [pc, #96]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff faa6 	bl	8001220 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff faa2 	bl	8001220 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e057      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x478>
 8001cf6:	e04f      	b.n	8001d98 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fa8c 	bl	8001220 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff fa88 	bl	8001220 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e03d      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4ac>
 8001d2a:	e035      	b.n	8001d98 <HAL_RCC_OscConfig+0x538>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x544>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d028      	beq.n	8001d94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d121      	bne.n	8001d94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0d0      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d910      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 020f 	bic.w	r2, r3, #15
 8001dd6:	4965      	ldr	r1, [pc, #404]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b63      	ldr	r3, [pc, #396]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b8      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e08:	4b59      	ldr	r3, [pc, #356]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e20:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b50      	ldr	r3, [pc, #320]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	494d      	ldr	r1, [pc, #308]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d040      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e07f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e073      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06b      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4936      	ldr	r1, [pc, #216]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9c:	f7ff f9c0 	bl	8001220 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f9bc 	bl	8001220 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e053      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d210      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 020f 	bic.w	r2, r3, #15
 8001ee2:	4922      	ldr	r1, [pc, #136]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e032      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4916      	ldr	r1, [pc, #88]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	490e      	ldr	r1, [pc, #56]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f3a:	f000 f821 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	490a      	ldr	r1, [pc, #40]	@ (8001f74 <HAL_RCC_ClockConfig+0x1cc>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_RCC_ClockConfig+0x1d0>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_ClockConfig+0x1d4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f91c 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	080032bc 	.word	0x080032bc
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b090      	sub	sp, #64	@ 0x40
 8001f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f98:	4b59      	ldr	r3, [pc, #356]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f200 80a1 	bhi.w	80020ec <HAL_RCC_GetSysClockFreq+0x16c>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x3a>
 8001fb2:	e09b      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fb8:	e09b      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fba:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fbe:	e098      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fca:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d028      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	2200      	movs	r2, #0
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fec:	fb03 f201 	mul.w	r2, r3, r1
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	fb00 f303 	mul.w	r3, r0, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a43      	ldr	r2, [pc, #268]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ffa:	fba0 1202 	umull	r1, r2, r0, r2
 8001ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002000:	460a      	mov	r2, r1
 8002002:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002006:	4413      	add	r3, r2
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800200a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200c:	2200      	movs	r2, #0
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	61fa      	str	r2, [r7, #28]
 8002012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800201a:	f7fe f8f5 	bl	8000208 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4613      	mov	r3, r2
 8002024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002026:	e053      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	4b35      	ldr	r3, [pc, #212]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	2200      	movs	r2, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	617a      	str	r2, [r7, #20]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800203a:	f04f 0b00 	mov.w	fp, #0
 800203e:	4652      	mov	r2, sl
 8002040:	465b      	mov	r3, fp
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	ebb2 080a 	subs.w	r8, r2, sl
 800205a:	eb63 090b 	sbc.w	r9, r3, fp
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800206a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800206e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002072:	ebb2 0408 	subs.w	r4, r2, r8
 8002076:	eb63 0509 	sbc.w	r5, r3, r9
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	00eb      	lsls	r3, r5, #3
 8002084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002088:	00e2      	lsls	r2, r4, #3
 800208a:	4614      	mov	r4, r2
 800208c:	461d      	mov	r5, r3
 800208e:	eb14 030a 	adds.w	r3, r4, sl
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	eb45 030b 	adc.w	r3, r5, fp
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a6:	4629      	mov	r1, r5
 80020a8:	028b      	lsls	r3, r1, #10
 80020aa:	4621      	mov	r1, r4
 80020ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b0:	4621      	mov	r1, r4
 80020b2:	028a      	lsls	r2, r1, #10
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ba:	2200      	movs	r2, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	60fa      	str	r2, [r7, #12]
 80020c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c4:	f7fe f8a0 	bl	8000208 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80020e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3740      	adds	r7, #64	@ 0x40
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	00f42400 	.word	0x00f42400
 8002108:	017d7840 	.word	0x017d7840

0800210c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <HAL_RCC_GetHCLKFreq+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002128:	f7ff fff0 	bl	800210c <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0a9b      	lsrs	r3, r3, #10
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4903      	ldr	r1, [pc, #12]	@ (8002148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	080032cc 	.word	0x080032cc

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002150:	f7ff ffdc 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	0b5b      	lsrs	r3, r3, #13
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	@ (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	080032cc 	.word	0x080032cc

08002174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800219c:	4b69      	ldr	r3, [pc, #420]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a68      	ldr	r2, [pc, #416]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	4b66      	ldr	r3, [pc, #408]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b0:	4964      	ldr	r1, [pc, #400]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021be:	2301      	movs	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	4959      	ldr	r1, [pc, #356]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ec:	d101      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d017      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800220a:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002210:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	494a      	ldr	r1, [pc, #296]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 808b 	beq.w	800236e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	4a39      	ldr	r2, [pc, #228]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	@ 0x40
 8002264:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002270:	4b35      	ldr	r3, [pc, #212]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a34      	ldr	r2, [pc, #208]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227c:	f7fe ffd0 	bl	8001220 <HAL_GetTick>
 8002280:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002284:	f7fe ffcc 	bl	8001220 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	@ 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e357      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a2:	4b28      	ldr	r3, [pc, #160]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d035      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d02e      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c0:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022e2:	4a18      	ldr	r2, [pc, #96]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d114      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff94 	bl	8001220 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe ff90 	bl	8001220 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e319      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ee      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800232a:	d111      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800233a:	400b      	ands	r3, r1
 800233c:	4901      	ldr	r1, [pc, #4]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
 8002342:	e00b      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000
 800234c:	0ffffcff 	.word	0x0ffffcff
 8002350:	4baa      	ldr	r3, [pc, #680]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4aa9      	ldr	r2, [pc, #676]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002356:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	4ba7      	ldr	r3, [pc, #668]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800235e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	49a4      	ldr	r1, [pc, #656]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236a:	4313      	orrs	r3, r2
 800236c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800237a:	4ba0      	ldr	r3, [pc, #640]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002380:	4a9e      	ldr	r2, [pc, #632]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002386:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800238a:	4b9c      	ldr	r3, [pc, #624]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800238c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	4999      	ldr	r1, [pc, #612]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a8:	4b94      	ldr	r3, [pc, #592]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b6:	4991      	ldr	r1, [pc, #580]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ca:	4b8c      	ldr	r3, [pc, #560]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023d8:	4988      	ldr	r1, [pc, #544]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ec:	4b83      	ldr	r3, [pc, #524]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fa:	4980      	ldr	r1, [pc, #512]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800240e:	4b7b      	ldr	r3, [pc, #492]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002414:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4977      	ldr	r1, [pc, #476]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002430:	4b72      	ldr	r3, [pc, #456]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	496f      	ldr	r1, [pc, #444]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002452:	4b6a      	ldr	r3, [pc, #424]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	f023 020c 	bic.w	r2, r3, #12
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	4966      	ldr	r1, [pc, #408]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002474:	4b61      	ldr	r3, [pc, #388]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	495e      	ldr	r1, [pc, #376]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002496:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a4:	4955      	ldr	r1, [pc, #340]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024b8:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	494d      	ldr	r1, [pc, #308]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024da:	4b48      	ldr	r3, [pc, #288]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	4944      	ldr	r1, [pc, #272]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024fc:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800250a:	493c      	ldr	r1, [pc, #240]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800251e:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002524:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252c:	4933      	ldr	r1, [pc, #204]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002540:	4b2e      	ldr	r3, [pc, #184]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800254e:	492b      	ldr	r1, [pc, #172]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002562:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002568:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002570:	4922      	ldr	r1, [pc, #136]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800257c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002580:	d101      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002592:	2301      	movs	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b0:	4912      	ldr	r1, [pc, #72]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00b      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025c4:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025d4:	4909      	ldr	r1, [pc, #36]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d006      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80d9 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025f0:	4b02      	ldr	r3, [pc, #8]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a01      	ldr	r2, [pc, #4]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025fa:	e001      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80025fc:	40023800 	.word	0x40023800
 8002600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002602:	f7fe fe0d 	bl	8001220 <HAL_GetTick>
 8002606:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800260a:	f7fe fe09 	bl	8001220 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	@ 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e194      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800261c:	4b6c      	ldr	r3, [pc, #432]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d021      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002638:	2b00      	cmp	r3, #0
 800263a:	d11d      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800263c:	4b64      	ldr	r3, [pc, #400]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800263e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800264a:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002650:	0e1b      	lsrs	r3, r3, #24
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	019a      	lsls	r2, r3, #6
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	071b      	lsls	r3, r3, #28
 8002670:	4957      	ldr	r1, [pc, #348]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a2:	d129      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026a4:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026aa:	0c1b      	lsrs	r3, r3, #16
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b8:	0f1b      	lsrs	r3, r3, #28
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	019a      	lsls	r2, r3, #6
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	071b      	lsls	r3, r3, #28
 80026d8:	493d      	ldr	r1, [pc, #244]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e6:	f023 021f 	bic.w	r2, r3, #31
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	3b01      	subs	r3, #1
 80026f0:	4937      	ldr	r1, [pc, #220]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002712:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002718:	0f1b      	lsrs	r3, r3, #28
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	019a      	lsls	r2, r3, #6
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	041b      	lsls	r3, r3, #16
 800272c:	431a      	orrs	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	071b      	lsls	r3, r3, #28
 8002738:	4925      	ldr	r1, [pc, #148]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d011      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	019a      	lsls	r2, r3, #6
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	071b      	lsls	r3, r3, #28
 8002768:	4919      	ldr	r1, [pc, #100]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002770:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a16      	ldr	r2, [pc, #88]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002776:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fd50 	bl	8001220 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002784:	f7fe fd4c 	bl	8001220 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0d7      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f040 80cd 	bne.w	8002944 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fd33 	bl	8001220 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027be:	f7fe fd2f 	bl	8001220 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d903      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0ba      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80027d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027e0:	d0ed      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d02e      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d12a      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800280a:	4b51      	ldr	r3, [pc, #324]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002818:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	0f1b      	lsrs	r3, r3, #28
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	019a      	lsls	r2, r3, #6
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	431a      	orrs	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	071b      	lsls	r3, r3, #28
 800283e:	4944      	ldr	r1, [pc, #272]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002846:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800284c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	493d      	ldr	r1, [pc, #244]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d022      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002874:	d11d      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002876:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	0e1b      	lsrs	r3, r3, #24
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	0f1b      	lsrs	r3, r3, #28
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	019a      	lsls	r2, r3, #6
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	071b      	lsls	r3, r3, #28
 80028aa:	4929      	ldr	r1, [pc, #164]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d028      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	0e1b      	lsrs	r3, r3, #24
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028cc:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	019a      	lsls	r2, r3, #6
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	4917      	ldr	r1, [pc, #92]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002900:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4911      	ldr	r1, [pc, #68]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002910:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fe fc80 	bl	8001220 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002924:	f7fe fc7c 	bl	8001220 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e007      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002942:	d1ef      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e040      	b.n	80029e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb7a 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa8c 	bl	8002eb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f825 	bl	80029f0 <UART_SetConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01b      	b.n	80029e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fb0b 	bl	8002ffc <UART_CheckIdleState>
 80029e6:	4603      	mov	r3, r0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4ba6      	ldr	r3, [pc, #664]	@ (8002cb4 <UART_SetConfig+0x2c4>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6979      	ldr	r1, [r7, #20]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a94      	ldr	r2, [pc, #592]	@ (8002cb8 <UART_SetConfig+0x2c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d120      	bne.n	8002aae <UART_SetConfig+0xbe>
 8002a6c:	4b93      	ldr	r3, [pc, #588]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d816      	bhi.n	8002aa8 <UART_SetConfig+0xb8>
 8002a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a80 <UART_SetConfig+0x90>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002a9d 	.word	0x08002a9d
 8002a88:	08002a97 	.word	0x08002a97
 8002a8c:	08002aa3 	.word	0x08002aa3
 8002a90:	2301      	movs	r3, #1
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e150      	b.n	8002d38 <UART_SetConfig+0x348>
 8002a96:	2302      	movs	r3, #2
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e14d      	b.n	8002d38 <UART_SetConfig+0x348>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e14a      	b.n	8002d38 <UART_SetConfig+0x348>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	e147      	b.n	8002d38 <UART_SetConfig+0x348>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	e144      	b.n	8002d38 <UART_SetConfig+0x348>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a83      	ldr	r2, [pc, #524]	@ (8002cc0 <UART_SetConfig+0x2d0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d132      	bne.n	8002b1e <UART_SetConfig+0x12e>
 8002ab8:	4b80      	ldr	r3, [pc, #512]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d828      	bhi.n	8002b18 <UART_SetConfig+0x128>
 8002ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8002acc <UART_SetConfig+0xdc>)
 8002ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002acc:	08002b01 	.word	0x08002b01
 8002ad0:	08002b19 	.word	0x08002b19
 8002ad4:	08002b19 	.word	0x08002b19
 8002ad8:	08002b19 	.word	0x08002b19
 8002adc:	08002b0d 	.word	0x08002b0d
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b07 	.word	0x08002b07
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002b19 	.word	0x08002b19
 8002afc:	08002b13 	.word	0x08002b13
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e118      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b06:	2302      	movs	r3, #2
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e115      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e112      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b12:	2308      	movs	r3, #8
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e10f      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	e10c      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a68      	ldr	r2, [pc, #416]	@ (8002cc4 <UART_SetConfig+0x2d4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d120      	bne.n	8002b6a <UART_SetConfig+0x17a>
 8002b28:	4b64      	ldr	r3, [pc, #400]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b32:	2b30      	cmp	r3, #48	@ 0x30
 8002b34:	d013      	beq.n	8002b5e <UART_SetConfig+0x16e>
 8002b36:	2b30      	cmp	r3, #48	@ 0x30
 8002b38:	d814      	bhi.n	8002b64 <UART_SetConfig+0x174>
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d009      	beq.n	8002b52 <UART_SetConfig+0x162>
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d810      	bhi.n	8002b64 <UART_SetConfig+0x174>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <UART_SetConfig+0x15c>
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d006      	beq.n	8002b58 <UART_SetConfig+0x168>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x174>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e0f2      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b52:	2302      	movs	r3, #2
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e0ef      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e0ec      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e0e9      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b64:	2310      	movs	r3, #16
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e0e6      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a56      	ldr	r2, [pc, #344]	@ (8002cc8 <UART_SetConfig+0x2d8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d120      	bne.n	8002bb6 <UART_SetConfig+0x1c6>
 8002b74:	4b51      	ldr	r3, [pc, #324]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b80:	d013      	beq.n	8002baa <UART_SetConfig+0x1ba>
 8002b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b84:	d814      	bhi.n	8002bb0 <UART_SetConfig+0x1c0>
 8002b86:	2b80      	cmp	r3, #128	@ 0x80
 8002b88:	d009      	beq.n	8002b9e <UART_SetConfig+0x1ae>
 8002b8a:	2b80      	cmp	r3, #128	@ 0x80
 8002b8c:	d810      	bhi.n	8002bb0 <UART_SetConfig+0x1c0>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <UART_SetConfig+0x1a8>
 8002b92:	2b40      	cmp	r3, #64	@ 0x40
 8002b94:	d006      	beq.n	8002ba4 <UART_SetConfig+0x1b4>
 8002b96:	e00b      	b.n	8002bb0 <UART_SetConfig+0x1c0>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e0cc      	b.n	8002d38 <UART_SetConfig+0x348>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	77fb      	strb	r3, [r7, #31]
 8002ba2:	e0c9      	b.n	8002d38 <UART_SetConfig+0x348>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e0c6      	b.n	8002d38 <UART_SetConfig+0x348>
 8002baa:	2308      	movs	r3, #8
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e0c3      	b.n	8002d38 <UART_SetConfig+0x348>
 8002bb0:	2310      	movs	r3, #16
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e0c0      	b.n	8002d38 <UART_SetConfig+0x348>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a44      	ldr	r2, [pc, #272]	@ (8002ccc <UART_SetConfig+0x2dc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d125      	bne.n	8002c0c <UART_SetConfig+0x21c>
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bce:	d017      	beq.n	8002c00 <UART_SetConfig+0x210>
 8002bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bd4:	d817      	bhi.n	8002c06 <UART_SetConfig+0x216>
 8002bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bda:	d00b      	beq.n	8002bf4 <UART_SetConfig+0x204>
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be0:	d811      	bhi.n	8002c06 <UART_SetConfig+0x216>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <UART_SetConfig+0x1fe>
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bea:	d006      	beq.n	8002bfa <UART_SetConfig+0x20a>
 8002bec:	e00b      	b.n	8002c06 <UART_SetConfig+0x216>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e0a1      	b.n	8002d38 <UART_SetConfig+0x348>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e09e      	b.n	8002d38 <UART_SetConfig+0x348>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e09b      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c00:	2308      	movs	r3, #8
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e098      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c06:	2310      	movs	r3, #16
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e095      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd0 <UART_SetConfig+0x2e0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d125      	bne.n	8002c62 <UART_SetConfig+0x272>
 8002c16:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c24:	d017      	beq.n	8002c56 <UART_SetConfig+0x266>
 8002c26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c2a:	d817      	bhi.n	8002c5c <UART_SetConfig+0x26c>
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c30:	d00b      	beq.n	8002c4a <UART_SetConfig+0x25a>
 8002c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c36:	d811      	bhi.n	8002c5c <UART_SetConfig+0x26c>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <UART_SetConfig+0x254>
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c40:	d006      	beq.n	8002c50 <UART_SetConfig+0x260>
 8002c42:	e00b      	b.n	8002c5c <UART_SetConfig+0x26c>
 8002c44:	2301      	movs	r3, #1
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e076      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	77fb      	strb	r3, [r7, #31]
 8002c4e:	e073      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c50:	2304      	movs	r3, #4
 8002c52:	77fb      	strb	r3, [r7, #31]
 8002c54:	e070      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c56:	2308      	movs	r3, #8
 8002c58:	77fb      	strb	r3, [r7, #31]
 8002c5a:	e06d      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e06a      	b.n	8002d38 <UART_SetConfig+0x348>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <UART_SetConfig+0x2e4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d138      	bne.n	8002cde <UART_SetConfig+0x2ee>
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <UART_SetConfig+0x2cc>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c7a:	d017      	beq.n	8002cac <UART_SetConfig+0x2bc>
 8002c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c80:	d82a      	bhi.n	8002cd8 <UART_SetConfig+0x2e8>
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c86:	d00b      	beq.n	8002ca0 <UART_SetConfig+0x2b0>
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8c:	d824      	bhi.n	8002cd8 <UART_SetConfig+0x2e8>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <UART_SetConfig+0x2aa>
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c96:	d006      	beq.n	8002ca6 <UART_SetConfig+0x2b6>
 8002c98:	e01e      	b.n	8002cd8 <UART_SetConfig+0x2e8>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e04b      	b.n	8002d38 <UART_SetConfig+0x348>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e048      	b.n	8002d38 <UART_SetConfig+0x348>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e045      	b.n	8002d38 <UART_SetConfig+0x348>
 8002cac:	2308      	movs	r3, #8
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e042      	b.n	8002d38 <UART_SetConfig+0x348>
 8002cb2:	bf00      	nop
 8002cb4:	efff69f3 	.word	0xefff69f3
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	40004800 	.word	0x40004800
 8002cc8:	40004c00 	.word	0x40004c00
 8002ccc:	40005000 	.word	0x40005000
 8002cd0:	40011400 	.word	0x40011400
 8002cd4:	40007800 	.word	0x40007800
 8002cd8:	2310      	movs	r3, #16
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	e02c      	b.n	8002d38 <UART_SetConfig+0x348>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a72      	ldr	r2, [pc, #456]	@ (8002eac <UART_SetConfig+0x4bc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d125      	bne.n	8002d34 <UART_SetConfig+0x344>
 8002ce8:	4b71      	ldr	r3, [pc, #452]	@ (8002eb0 <UART_SetConfig+0x4c0>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cf2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cf6:	d017      	beq.n	8002d28 <UART_SetConfig+0x338>
 8002cf8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002cfc:	d817      	bhi.n	8002d2e <UART_SetConfig+0x33e>
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d02:	d00b      	beq.n	8002d1c <UART_SetConfig+0x32c>
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d08:	d811      	bhi.n	8002d2e <UART_SetConfig+0x33e>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <UART_SetConfig+0x326>
 8002d0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d12:	d006      	beq.n	8002d22 <UART_SetConfig+0x332>
 8002d14:	e00b      	b.n	8002d2e <UART_SetConfig+0x33e>
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e00d      	b.n	8002d38 <UART_SetConfig+0x348>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e00a      	b.n	8002d38 <UART_SetConfig+0x348>
 8002d22:	2304      	movs	r3, #4
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	e007      	b.n	8002d38 <UART_SetConfig+0x348>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e004      	b.n	8002d38 <UART_SetConfig+0x348>
 8002d2e:	2310      	movs	r3, #16
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e001      	b.n	8002d38 <UART_SetConfig+0x348>
 8002d34:	2310      	movs	r3, #16
 8002d36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d40:	d15b      	bne.n	8002dfa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d828      	bhi.n	8002d9a <UART_SetConfig+0x3aa>
 8002d48:	a201      	add	r2, pc, #4	@ (adr r2, 8002d50 <UART_SetConfig+0x360>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d75 	.word	0x08002d75
 8002d54:	08002d7d 	.word	0x08002d7d
 8002d58:	08002d85 	.word	0x08002d85
 8002d5c:	08002d9b 	.word	0x08002d9b
 8002d60:	08002d8b 	.word	0x08002d8b
 8002d64:	08002d9b 	.word	0x08002d9b
 8002d68:	08002d9b 	.word	0x08002d9b
 8002d6c:	08002d9b 	.word	0x08002d9b
 8002d70:	08002d93 	.word	0x08002d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d74:	f7ff f9d6 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002d78:	61b8      	str	r0, [r7, #24]
        break;
 8002d7a:	e013      	b.n	8002da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d7c:	f7ff f9e6 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002d80:	61b8      	str	r0, [r7, #24]
        break;
 8002d82:	e00f      	b.n	8002da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d84:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <UART_SetConfig+0x4c4>)
 8002d86:	61bb      	str	r3, [r7, #24]
        break;
 8002d88:	e00c      	b.n	8002da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8a:	f7ff f8f9 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8002d8e:	61b8      	str	r0, [r7, #24]
        break;
 8002d90:	e008      	b.n	8002da4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d96:	61bb      	str	r3, [r7, #24]
        break;
 8002d98:	e004      	b.n	8002da4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	77bb      	strb	r3, [r7, #30]
        break;
 8002da2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d074      	beq.n	8002e94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	005a      	lsls	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	d916      	bls.n	8002df4 <UART_SetConfig+0x404>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d212      	bcs.n	8002df4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f023 030f 	bic.w	r3, r3, #15
 8002dd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	89fb      	ldrh	r3, [r7, #14]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	89fa      	ldrh	r2, [r7, #14]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e04f      	b.n	8002e94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77bb      	strb	r3, [r7, #30]
 8002df8:	e04c      	b.n	8002e94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d828      	bhi.n	8002e52 <UART_SetConfig+0x462>
 8002e00:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <UART_SetConfig+0x418>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e35 	.word	0x08002e35
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e53 	.word	0x08002e53
 8002e18:	08002e43 	.word	0x08002e43
 8002e1c:	08002e53 	.word	0x08002e53
 8002e20:	08002e53 	.word	0x08002e53
 8002e24:	08002e53 	.word	0x08002e53
 8002e28:	08002e4b 	.word	0x08002e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2c:	f7ff f97a 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002e30:	61b8      	str	r0, [r7, #24]
        break;
 8002e32:	e013      	b.n	8002e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e34:	f7ff f98a 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002e38:	61b8      	str	r0, [r7, #24]
        break;
 8002e3a:	e00f      	b.n	8002e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <UART_SetConfig+0x4c4>)
 8002e3e:	61bb      	str	r3, [r7, #24]
        break;
 8002e40:	e00c      	b.n	8002e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e42:	f7ff f89d 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8002e46:	61b8      	str	r0, [r7, #24]
        break;
 8002e48:	e008      	b.n	8002e5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e4e:	61bb      	str	r3, [r7, #24]
        break;
 8002e50:	e004      	b.n	8002e5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	77bb      	strb	r3, [r7, #30]
        break;
 8002e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	085a      	lsrs	r2, r3, #1
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d909      	bls.n	8002e90 <UART_SetConfig+0x4a0>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e82:	d205      	bcs.n	8002e90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	e001      	b.n	8002e94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002ea0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40007c00 	.word	0x40007c00
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400

08002eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01a      	beq.n	8002fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb6:	d10a      	bne.n	8002fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	605a      	str	r2, [r3, #4]
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	@ 0x30
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800300c:	f7fe f908 	bl	8001220 <HAL_GetTick>
 8003010:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d12e      	bne.n	800307e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003020:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f83b 	bl	80030aa <UART_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d021      	beq.n	800307e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	60fb      	str	r3, [r7, #12]
   return(result);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	69b9      	ldr	r1, [r7, #24]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	617b      	str	r3, [r7, #20]
   return(result);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e6      	bne.n	800303a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e011      	b.n	80030a2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3728      	adds	r7, #40	@ 0x28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ba:	e04f      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d04b      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7fe f8ac 	bl	8001220 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <UART_WaitOnFlagUntilTimeout+0x30>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04e      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d037      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b80      	cmp	r3, #128	@ 0x80
 80030f0:	d034      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b40      	cmp	r3, #64	@ 0x40
 80030f6:	d031      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d110      	bne.n	8003128 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2208      	movs	r2, #8
 800310c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f838 	bl	8003184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2208      	movs	r2, #8
 8003118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e029      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003136:	d111      	bne.n	800315c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003140:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f81e 	bl	8003184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e00f      	b.n	800317c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	429a      	cmp	r2, r3
 8003178:	d0a0      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b095      	sub	sp, #84	@ 0x54
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e6      	bne.n	800318c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3308      	adds	r3, #8
 80031dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d118      	bne.n	800322c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	60bb      	str	r3, [r7, #8]
   return(result);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f023 0310 	bic.w	r3, r3, #16
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6979      	ldr	r1, [r7, #20]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	613b      	str	r3, [r7, #16]
   return(result);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e6      	bne.n	80031fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003240:	bf00      	nop
 8003242:	3754      	adds	r7, #84	@ 0x54
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <memset>:
 800324c:	4402      	add	r2, r0
 800324e:	4603      	mov	r3, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <__libc_init_array>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	4d0d      	ldr	r5, [pc, #52]	@ (8003294 <__libc_init_array+0x38>)
 8003260:	4c0d      	ldr	r4, [pc, #52]	@ (8003298 <__libc_init_array+0x3c>)
 8003262:	1b64      	subs	r4, r4, r5
 8003264:	10a4      	asrs	r4, r4, #2
 8003266:	2600      	movs	r6, #0
 8003268:	42a6      	cmp	r6, r4
 800326a:	d109      	bne.n	8003280 <__libc_init_array+0x24>
 800326c:	4d0b      	ldr	r5, [pc, #44]	@ (800329c <__libc_init_array+0x40>)
 800326e:	4c0c      	ldr	r4, [pc, #48]	@ (80032a0 <__libc_init_array+0x44>)
 8003270:	f000 f818 	bl	80032a4 <_init>
 8003274:	1b64      	subs	r4, r4, r5
 8003276:	10a4      	asrs	r4, r4, #2
 8003278:	2600      	movs	r6, #0
 800327a:	42a6      	cmp	r6, r4
 800327c:	d105      	bne.n	800328a <__libc_init_array+0x2e>
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	f855 3b04 	ldr.w	r3, [r5], #4
 8003284:	4798      	blx	r3
 8003286:	3601      	adds	r6, #1
 8003288:	e7ee      	b.n	8003268 <__libc_init_array+0xc>
 800328a:	f855 3b04 	ldr.w	r3, [r5], #4
 800328e:	4798      	blx	r3
 8003290:	3601      	adds	r6, #1
 8003292:	e7f2      	b.n	800327a <__libc_init_array+0x1e>
 8003294:	080032dc 	.word	0x080032dc
 8003298:	080032dc 	.word	0x080032dc
 800329c:	080032dc 	.word	0x080032dc
 80032a0:	080032e0 	.word	0x080032e0

080032a4 <_init>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	bf00      	nop
 80032a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032aa:	bc08      	pop	{r3}
 80032ac:	469e      	mov	lr, r3
 80032ae:	4770      	bx	lr

080032b0 <_fini>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr
