
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c8  080067c8  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080067c8  080067c8  000077c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d0  080067d0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067d4  080067d4  000077d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080067d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000419c  2000006c  08006844  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004208  08006844  00008208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045d  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d28  00000000  00000000  000184f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a82  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285de  00000000  00000000  0001ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120ec  00000000  00000000  00045060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f260a  00000000  00000000  0005714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149756  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e28  00000000  00000000  0014979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800672c 	.word	0x0800672c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800672c 	.word	0x0800672c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
// void StartTask(void * argument);
/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN Application */
void MX_FREERTOS_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* USER CODE BEGIN RTOS_MUTEX */
    xMutex = xSemaphoreCreateMutex();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f003 fa02 	bl	80039b0 <xQueueCreateMutex>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a29      	ldr	r2, [pc, #164]	@ (8000654 <MX_FREERTOS_Init+0xb4>)
 80005b0:	6013      	str	r3, [r2, #0]
    configASSERT(xMutex != NULL);
 80005b2:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <MX_FREERTOS_Init+0xb4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10d      	bne.n	80005d6 <MX_FREERTOS_Init+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005be:	b672      	cpsid	i
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	b662      	cpsie	i
 80005ce:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	e7fd      	b.n	80005d2 <MX_FREERTOS_Init+0x32>
    ret = xTaskCreate(StartTask, "SafetyTask", 128, NULL, 1, &myTaskHandle);
    configASSERT(ret == pdPASS);
    */

    /* USER CODE BEGIN RTOS_THREADS */
    ret = xTaskCreate(task_bug, "Tache1", STACK_SIZE, (void *) TASK1_DELAY, TASK1_PRIORITY, NULL);
 80005d6:	2300      	movs	r3, #0
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e4:	491c      	ldr	r1, [pc, #112]	@ (8000658 <MX_FREERTOS_Init+0xb8>)
 80005e6:	481d      	ldr	r0, [pc, #116]	@ (800065c <MX_FREERTOS_Init+0xbc>)
 80005e8:	f003 fd84 	bl	80040f4 <xTaskCreate>
 80005ec:	60f8      	str	r0, [r7, #12]
    configASSERT(ret == pdPASS);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00d      	beq.n	8000610 <MX_FREERTOS_Init+0x70>
	__asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f8:	b672      	cpsid	i
 80005fa:	f383 8811 	msr	BASEPRI, r3
 80005fe:	f3bf 8f6f 	isb	sy
 8000602:	f3bf 8f4f 	dsb	sy
 8000606:	b662      	cpsie	i
 8000608:	607b      	str	r3, [r7, #4]
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <MX_FREERTOS_Init+0x6c>

    ret = xTaskCreate(task_bug, "Tache2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
 8000610:	2300      	movs	r3, #0
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800061e:	4910      	ldr	r1, [pc, #64]	@ (8000660 <MX_FREERTOS_Init+0xc0>)
 8000620:	480e      	ldr	r0, [pc, #56]	@ (800065c <MX_FREERTOS_Init+0xbc>)
 8000622:	f003 fd67 	bl	80040f4 <xTaskCreate>
 8000626:	60f8      	str	r0, [r7, #12]
    configASSERT(ret == pdPASS);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00d      	beq.n	800064a <MX_FREERTOS_Init+0xaa>
	__asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000632:	b672      	cpsid	i
 8000634:	f383 8811 	msr	BASEPRI, r3
 8000638:	f3bf 8f6f 	isb	sy
 800063c:	f3bf 8f4f 	dsb	sy
 8000640:	b662      	cpsie	i
 8000642:	603b      	str	r3, [r7, #0]
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <MX_FREERTOS_Init+0xa6>
    /* USER CODE END RTOS_THREADS */
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088
 8000658:	08006744 	.word	0x08006744
 800065c:	08000665 	.word	0x08000665
 8000660:	0800674c 	.word	0x0800674c

08000664 <task_bug>:
  * @param  argument: delay in ticks
  * @retval None
  */
/* USER CODE END Header_task_bug */
void task_bug(void * pvParameters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN task_bug */
	TickType_t delay = (TickType_t) pvParameters;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	60fb      	str	r3, [r7, #12]

	    for(;;)
	    {
	        xSemaphoreTake(xMutex, portMAX_DELAY);
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <task_bug+0x44>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f04f 31ff 	mov.w	r1, #4294967295
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fabb 	bl	8003bf4 <xQueueSemaphoreTake>
	        printf("Je suis %s, je dors %lu ticks\r\n", pcTaskGetName(NULL), delay);
 800067e:	2000      	movs	r0, #0
 8000680:	f003 ffbe 	bl	8004600 <pcTaskGetName>
 8000684:	4603      	mov	r3, r0
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4619      	mov	r1, r3
 800068a:	4808      	ldr	r0, [pc, #32]	@ (80006ac <task_bug+0x48>)
 800068c:	f005 f9d2 	bl	8005a34 <iprintf>
	        xSemaphoreGive(xMutex);
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <task_bug+0x44>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	f003 f9a1 	bl	80039e0 <xQueueGenericSend>
	        vTaskDelay(delay);
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	f003 fe62 	bl	8004368 <vTaskDelay>
	        xSemaphoreTake(xMutex, portMAX_DELAY);
 80006a4:	bf00      	nop
 80006a6:	e7e3      	b.n	8000670 <task_bug+0xc>
 80006a8:	20000088 	.word	0x20000088
 80006ac:	08006754 	.word	0x08006754

080006b0 <vApplicationGetIdleTaskMemory>:
static StackType_t IdleTaskStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
                                   StackType_t **ppxIdleTaskStackBuffer,
                                   uint32_t *pulIdleTaskStackSize)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &IdleTaskTCB;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4a07      	ldr	r2, [pc, #28]	@ (80006dc <vApplicationGetIdleTaskMemory+0x2c>)
 80006c0:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = IdleTaskStack;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4a06      	ldr	r2, [pc, #24]	@ (80006e0 <vApplicationGetIdleTaskMemory+0x30>)
 80006c6:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	200000e0 	.word	0x200000e0

080006e4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b090      	sub	sp, #64	@ 0x40
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fa:	4bad      	ldr	r3, [pc, #692]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4aac      	ldr	r2, [pc, #688]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4baa      	ldr	r3, [pc, #680]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	4ba7      	ldr	r3, [pc, #668]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4aa6      	ldr	r2, [pc, #664]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4ba4      	ldr	r3, [pc, #656]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
 8000728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4ba1      	ldr	r3, [pc, #644]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4aa0      	ldr	r2, [pc, #640]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b9e      	ldr	r3, [pc, #632]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4b9b      	ldr	r3, [pc, #620]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a9a      	ldr	r2, [pc, #616]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b98      	ldr	r3, [pc, #608]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	4b95      	ldr	r3, [pc, #596]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a94      	ldr	r2, [pc, #592]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b92      	ldr	r3, [pc, #584]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b8f      	ldr	r3, [pc, #572]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a8e      	ldr	r2, [pc, #568]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b8c      	ldr	r3, [pc, #560]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800078a:	4b89      	ldr	r3, [pc, #548]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a88      	ldr	r2, [pc, #544]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000790:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b86      	ldr	r3, [pc, #536]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007a2:	4b83      	ldr	r3, [pc, #524]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a82      	ldr	r2, [pc, #520]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b80      	ldr	r3, [pc, #512]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007ba:	4b7d      	ldr	r3, [pc, #500]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a7c      	ldr	r2, [pc, #496]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b7a      	ldr	r3, [pc, #488]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b77      	ldr	r3, [pc, #476]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a76      	ldr	r2, [pc, #472]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b74      	ldr	r3, [pc, #464]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b71      	ldr	r3, [pc, #452]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a70      	ldr	r2, [pc, #448]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b6e      	ldr	r3, [pc, #440]	@ (80009b0 <MX_GPIO_Init+0x2cc>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2120      	movs	r1, #32
 8000806:	486b      	ldr	r0, [pc, #428]	@ (80009b4 <MX_GPIO_Init+0x2d0>)
 8000808:	f001 f944 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000812:	4869      	ldr	r0, [pc, #420]	@ (80009b8 <MX_GPIO_Init+0x2d4>)
 8000814:	f001 f93e 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2108      	movs	r1, #8
 800081c:	4867      	ldr	r0, [pc, #412]	@ (80009bc <MX_GPIO_Init+0x2d8>)
 800081e:	f001 f939 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000828:	4865      	ldr	r0, [pc, #404]	@ (80009c0 <MX_GPIO_Init+0x2dc>)
 800082a:	f001 f933 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	21c8      	movs	r1, #200	@ 0xc8
 8000832:	4864      	ldr	r0, [pc, #400]	@ (80009c4 <MX_GPIO_Init+0x2e0>)
 8000834:	f001 f92e 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000838:	2310      	movs	r3, #16
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000848:	230e      	movs	r3, #14
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	485d      	ldr	r0, [pc, #372]	@ (80009c8 <MX_GPIO_Init+0x2e4>)
 8000854:	f000 ff72 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000858:	2308      	movs	r3, #8
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000868:	4619      	mov	r1, r3
 800086a:	4857      	ldr	r0, [pc, #348]	@ (80009c8 <MX_GPIO_Init+0x2e4>)
 800086c:	f000 ff66 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000870:	2304      	movs	r3, #4
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000880:	2309      	movs	r3, #9
 8000882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000888:	4619      	mov	r1, r3
 800088a:	484f      	ldr	r0, [pc, #316]	@ (80009c8 <MX_GPIO_Init+0x2e4>)
 800088c:	f000 ff56 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000890:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a2:	230b      	movs	r3, #11
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4845      	ldr	r0, [pc, #276]	@ (80009c4 <MX_GPIO_Init+0x2e0>)
 80008ae:	f000 ff45 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80008b2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008c4:	230c      	movs	r3, #12
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	483e      	ldr	r0, [pc, #248]	@ (80009c8 <MX_GPIO_Init+0x2e4>)
 80008d0:	f000 ff34 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80008d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e6:	2304      	movs	r3, #4
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	4836      	ldr	r0, [pc, #216]	@ (80009cc <MX_GPIO_Init+0x2e8>)
 80008f2:	f000 ff23 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80008f6:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000908:	230a      	movs	r3, #10
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000910:	4619      	mov	r1, r3
 8000912:	482e      	ldr	r0, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x2e8>)
 8000914:	f000 ff12 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000928:	2302      	movs	r3, #2
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	4826      	ldr	r0, [pc, #152]	@ (80009cc <MX_GPIO_Init+0x2e8>)
 8000934:	f000 ff02 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000948:	2308      	movs	r3, #8
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000950:	4619      	mov	r1, r3
 8000952:	4818      	ldr	r0, [pc, #96]	@ (80009b4 <MX_GPIO_Init+0x2d0>)
 8000954:	f000 fef2 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000958:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800096a:	230c      	movs	r3, #12
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <MX_GPIO_Init+0x2ec>)
 8000976:	f000 fee1 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800097a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800097e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800098c:	2301      	movs	r3, #1
 800098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <MX_GPIO_Init+0x2f0>)
 8000998:	f000 fed0 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800099c:	2360      	movs	r3, #96	@ 0x60
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009ac:	230d      	movs	r3, #13
 80009ae:	e013      	b.n	80009d8 <MX_GPIO_Init+0x2f4>
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40022000 	.word	0x40022000
 80009bc:	40022800 	.word	0x40022800
 80009c0:	40021c00 	.word	0x40021c00
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009de:	4619      	mov	r1, r3
 80009e0:	48bc      	ldr	r0, [pc, #752]	@ (8000cd4 <MX_GPIO_Init+0x5f0>)
 80009e2:	f000 feab 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80009e6:	2340      	movs	r3, #64	@ 0x40
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009f6:	230a      	movs	r3, #10
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	48b5      	ldr	r0, [pc, #724]	@ (8000cd8 <MX_GPIO_Init+0x5f4>)
 8000a02:	f000 fe9b 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a06:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	48ae      	ldr	r0, [pc, #696]	@ (8000cdc <MX_GPIO_Init+0x5f8>)
 8000a24:	f000 fe8a 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000a28:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a3a:	230e      	movs	r3, #14
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	48a6      	ldr	r0, [pc, #664]	@ (8000ce0 <MX_GPIO_Init+0x5fc>)
 8000a46:	f000 fe79 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	48a0      	ldr	r0, [pc, #640]	@ (8000ce0 <MX_GPIO_Init+0x5fc>)
 8000a60:	f000 fe6c 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000a64:	2340      	movs	r3, #64	@ 0x40
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a68:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a76:	4619      	mov	r1, r3
 8000a78:	489a      	ldr	r0, [pc, #616]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000a7a:	f000 fe5f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a7e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a90:	230c      	movs	r3, #12
 8000a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4892      	ldr	r0, [pc, #584]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000a9c:	f000 fe4e 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000aa0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aba:	4619      	mov	r1, r3
 8000abc:	488a      	ldr	r0, [pc, #552]	@ (8000ce8 <MX_GPIO_Init+0x604>)
 8000abe:	f000 fe3d 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ac2:	23f0      	movs	r3, #240	@ 0xf0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	4883      	ldr	r0, [pc, #524]	@ (8000cec <MX_GPIO_Init+0x608>)
 8000ade:	f000 fe2d 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000ae2:	23f7      	movs	r3, #247	@ 0xf7
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af2:	230e      	movs	r3, #14
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	487c      	ldr	r0, [pc, #496]	@ (8000cf0 <MX_GPIO_Init+0x60c>)
 8000afe:	f000 fe1d 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b14:	2309      	movs	r3, #9
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	486f      	ldr	r0, [pc, #444]	@ (8000cdc <MX_GPIO_Init+0x5f8>)
 8000b20:	f000 fe0c 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000b36:	230a      	movs	r3, #10
 8000b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4866      	ldr	r0, [pc, #408]	@ (8000cdc <MX_GPIO_Init+0x5f8>)
 8000b42:	f000 fdfb 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b46:	2320      	movs	r3, #32
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4861      	ldr	r0, [pc, #388]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000b5e:	f000 fded 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000b62:	2308      	movs	r3, #8
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b72:	230d      	movs	r3, #13
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4859      	ldr	r0, [pc, #356]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000b7e:	f000 fddd 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000b82:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4854      	ldr	r0, [pc, #336]	@ (8000cec <MX_GPIO_Init+0x608>)
 8000b9c:	f000 fdce 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	484f      	ldr	r0, [pc, #316]	@ (8000cf4 <MX_GPIO_Init+0x610>)
 8000bb6:	f000 fdc1 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000bba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4848      	ldr	r0, [pc, #288]	@ (8000cf8 <MX_GPIO_Init+0x614>)
 8000bd8:	f000 fdb0 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000bdc:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bee:	230e      	movs	r3, #14
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	483c      	ldr	r0, [pc, #240]	@ (8000cec <MX_GPIO_Init+0x608>)
 8000bfa:	f000 fd9f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4836      	ldr	r0, [pc, #216]	@ (8000cf0 <MX_GPIO_Init+0x60c>)
 8000c16:	f000 fd91 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c2c:	230d      	movs	r3, #13
 8000c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4829      	ldr	r0, [pc, #164]	@ (8000cdc <MX_GPIO_Init+0x5f8>)
 8000c38:	f000 fd80 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4825      	ldr	r0, [pc, #148]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000c50:	f000 fd74 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000c54:	2304      	movs	r3, #4
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c64:	230c      	movs	r3, #12
 8000c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481d      	ldr	r0, [pc, #116]	@ (8000ce4 <MX_GPIO_Init+0x600>)
 8000c70:	f000 fd64 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000c74:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c86:	4619      	mov	r1, r3
 8000c88:	481c      	ldr	r0, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0x618>)
 8000c8a:	f000 fd57 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4815      	ldr	r0, [pc, #84]	@ (8000cfc <MX_GPIO_Init+0x618>)
 8000ca8:	f000 fd48 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000cac:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cbe:	230d      	movs	r3, #13
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <MX_GPIO_Init+0x618>)
 8000cca:	f000 fd37 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e016      	b.n	8000d00 <MX_GPIO_Init+0x61c>
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40022400 	.word	0x40022400
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	40022800 	.word	0x40022800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40021400 	.word	0x40021400
 8000cfc:	40021c00 	.word	0x40021c00
 8000d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d16:	4619      	mov	r1, r3
 8000d18:	48a4      	ldr	r0, [pc, #656]	@ (8000fac <MX_GPIO_Init+0x8c8>)
 8000d1a:	f000 fd0f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	489e      	ldr	r0, [pc, #632]	@ (8000fac <MX_GPIO_Init+0x8c8>)
 8000d34:	f000 fd02 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4896      	ldr	r0, [pc, #600]	@ (8000fb0 <MX_GPIO_Init+0x8cc>)
 8000d56:	f000 fcf1 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	488e      	ldr	r0, [pc, #568]	@ (8000fac <MX_GPIO_Init+0x8c8>)
 8000d72:	f000 fce3 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d86:	2308      	movs	r3, #8
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4888      	ldr	r0, [pc, #544]	@ (8000fb4 <MX_GPIO_Init+0x8d0>)
 8000d92:	f000 fcd3 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d96:	2310      	movs	r3, #16
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000da6:	230a      	movs	r3, #10
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4881      	ldr	r0, [pc, #516]	@ (8000fb8 <MX_GPIO_Init+0x8d4>)
 8000db2:	f000 fcc3 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000db6:	2328      	movs	r3, #40	@ 0x28
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4879      	ldr	r0, [pc, #484]	@ (8000fb8 <MX_GPIO_Init+0x8d4>)
 8000dd2:	f000 fcb3 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000dd6:	23c8      	movs	r3, #200	@ 0xc8
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4873      	ldr	r0, [pc, #460]	@ (8000fbc <MX_GPIO_Init+0x8d8>)
 8000dee:	f000 fca5 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000df2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	486e      	ldr	r0, [pc, #440]	@ (8000fc0 <MX_GPIO_Init+0x8dc>)
 8000e08:	f000 fc98 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4863      	ldr	r0, [pc, #396]	@ (8000fb4 <MX_GPIO_Init+0x8d0>)
 8000e28:	f000 fc88 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e44:	4619      	mov	r1, r3
 8000e46:	485b      	ldr	r0, [pc, #364]	@ (8000fb4 <MX_GPIO_Init+0x8d0>)
 8000e48:	f000 fc78 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e4c:	2332      	movs	r3, #50	@ 0x32
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e64:	4619      	mov	r1, r3
 8000e66:	4853      	ldr	r0, [pc, #332]	@ (8000fb4 <MX_GPIO_Init+0x8d0>)
 8000e68:	f000 fc68 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	484f      	ldr	r0, [pc, #316]	@ (8000fc4 <MX_GPIO_Init+0x8e0>)
 8000e88:	f000 fc58 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e8c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4847      	ldr	r0, [pc, #284]	@ (8000fc8 <MX_GPIO_Init+0x8e4>)
 8000eaa:	f000 fc47 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483e      	ldr	r0, [pc, #248]	@ (8000fbc <MX_GPIO_Init+0x8d8>)
 8000ec2:	f000 fc3b 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000ec6:	2382      	movs	r3, #130	@ 0x82
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4833      	ldr	r0, [pc, #204]	@ (8000fb0 <MX_GPIO_Init+0x8cc>)
 8000ee2:	f000 fc2b 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482d      	ldr	r0, [pc, #180]	@ (8000fb0 <MX_GPIO_Init+0x8cc>)
 8000efa:	f000 fc1f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000efe:	2350      	movs	r3, #80	@ 0x50
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f0e:	230d      	movs	r3, #13
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <MX_GPIO_Init+0x8cc>)
 8000f1a:	f000 fc0f 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000f1e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f30:	2304      	movs	r3, #4
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481f      	ldr	r0, [pc, #124]	@ (8000fb8 <MX_GPIO_Init+0x8d4>)
 8000f3c:	f000 fbfe 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000f40:	2320      	movs	r3, #32
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <MX_GPIO_Init+0x8cc>)
 8000f5c:	f000 fbee 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f60:	2340      	movs	r3, #64	@ 0x40
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f70:	2309      	movs	r3, #9
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <MX_GPIO_Init+0x8d4>)
 8000f7c:	f000 fbde 	bl	800173c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f80:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f92:	2305      	movs	r3, #5
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <MX_GPIO_Init+0x8e0>)
 8000f9e:	f000 fbcd 	bl	800173c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3740      	adds	r7, #64	@ 0x40
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40021c00 	.word	0x40021c00
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020c00 	.word	0x40020c00

08000fcc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,
 8000fd4:	1d39      	adds	r1, r7, #4
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <__io_putchar+0x20>)
 8000fde:	f001 fe8b 	bl	8002cf8 <HAL_UART_Transmit>
	HAL_MAX_DELAY); return ch; }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002e4 	.word	0x200002e4

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 fa5f 	bl	80014b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f80a 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f7ff fb72 	bl	80006e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001000:	f000 f97e 	bl	8001300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001004:	f7ff facc 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001008:	f002 fb2e 	bl	8003668 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <main+0x1c>

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	@ 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fd5d 	bl	8005ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <SystemClock_Config+0xd0>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <SystemClock_Config+0xd0>)
 800103a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <SystemClock_Config+0xd0>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <SystemClock_Config+0xd4>)
 8001052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <SystemClock_Config+0xd4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	2301      	movs	r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106c:	2310      	movs	r3, #16
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	2302      	movs	r3, #2
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001078:	2308      	movs	r3, #8
 800107a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800107c:	23d8      	movs	r3, #216	@ 0xd8
 800107e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fd6b 	bl	8001b68 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001098:	f000 f826 	bl	80010e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109c:	f000 fd14 	bl	8001ac8 <HAL_PWREx_EnableOverDrive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010a6:	f000 f81f 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2302      	movs	r3, #2
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2107      	movs	r1, #7
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fff1 	bl	80020b0 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010d4:	f000 f808 	bl	80010e8 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3750      	adds	r7, #80	@ 0x50
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <Error_Handler+0x8>

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a10      	ldr	r2, [pc, #64]	@ (8001140 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	210f      	movs	r1, #15
 800112e:	f06f 0001 	mvn.w	r0, #1
 8001132:	f000 fada 	bl	80016ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <NMI_Handler+0x4>

0800114c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <MemManage_Handler+0x4>

0800115c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <UsageFault_Handler+0x4>

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f9d7 	bl	8001530 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001182:	f003 fd6f 	bl	8004c64 <xTaskGetSchedulerState>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d001      	beq.n	8001190 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800118c:	f004 f954 	bl	8005438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
  }

  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff feef 	bl	8000fcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
  }
  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122e:	605a      	str	r2, [r3, #4]
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f004 fc6c 	bl	8005b7c <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20050000 	.word	0x20050000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200002e0 	.word	0x200002e0
 80012d8:	20004208 	.word	0x20004208

080012dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	@ (800135c <MX_USART1_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001344:	f001 fc8a 	bl	8002c5c <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f7ff fecb 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002e4 	.word	0x200002e4
 800135c:	40011000 	.word	0x40011000

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ac      	sub	sp, #176	@ 0xb0
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	2284      	movs	r2, #132	@ 0x84
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fbac 	bl	8005ade <memset>
  if(uartHandle->Instance==USART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a32      	ldr	r2, [pc, #200]	@ (8001454 <HAL_UART_MspInit+0xf4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d15c      	bne.n	800144a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001390:	2340      	movs	r3, #64	@ 0x40
 8001392:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001394:	2300      	movs	r3, #0
 8001396:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f86d 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a8:	f7ff fe9e 	bl	80010e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	4a29      	ldr	r2, [pc, #164]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_UART_MspInit+0xf8>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800140c:	2307      	movs	r3, #7
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001416:	4619      	mov	r1, r3
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <HAL_UART_MspInit+0xfc>)
 800141a:	f000 f98f 	bl	800173c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800141e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001438:	2307      	movs	r3, #7
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001442:	4619      	mov	r1, r3
 8001444:	4806      	ldr	r0, [pc, #24]	@ (8001460 <HAL_UART_MspInit+0x100>)
 8001446:	f000 f979 	bl	800173c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800144a:	bf00      	nop
 800144c:	37b0      	adds	r7, #176	@ 0xb0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40011000 	.word	0x40011000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400
 8001460:	40020000 	.word	0x40020000

08001464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001468:	f7ff ff38 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001492:	f004 fb79 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001496:	f7ff fdab 	bl	8000ff0 <main>
  bx  lr    
 800149a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014a8:	080067d8 	.word	0x080067d8
  ldr r2, =_sbss
 80014ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014b0:	20004208 	.word	0x20004208

080014b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>

080014b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f90a 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c0:	200f      	movs	r0, #15
 80014c2:	f000 f805 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fe15 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f917 	bl	8001722 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f8ed 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000008 	.word	0x20000008
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008
 8001554:	2000036c 	.word	0x2000036c

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000036c 	.word	0x2000036c

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	05fa0000 	.word	0x05fa0000

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff47 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff5c 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffb0 	bl	8001690 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e175      	b.n	8001a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8164 	bne.w	8001a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_GPIO_Init+0x56>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d130      	bne.n	80017f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0201 	and.w	r2, r3, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d017      	beq.n	8001830 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80be 	beq.w	8001a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b66      	ldr	r3, [pc, #408]	@ (8001a60 <HAL_GPIO_Init+0x324>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a65      	ldr	r2, [pc, #404]	@ (8001a60 <HAL_GPIO_Init+0x324>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <HAL_GPIO_Init+0x324>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018de:	4a61      	ldr	r2, [pc, #388]	@ (8001a64 <HAL_GPIO_Init+0x328>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a58      	ldr	r2, [pc, #352]	@ (8001a68 <HAL_GPIO_Init+0x32c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d037      	beq.n	800197a <HAL_GPIO_Init+0x23e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a57      	ldr	r2, [pc, #348]	@ (8001a6c <HAL_GPIO_Init+0x330>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_GPIO_Init+0x23a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a56      	ldr	r2, [pc, #344]	@ (8001a70 <HAL_GPIO_Init+0x334>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d02b      	beq.n	8001972 <HAL_GPIO_Init+0x236>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a55      	ldr	r2, [pc, #340]	@ (8001a74 <HAL_GPIO_Init+0x338>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x232>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a54      	ldr	r2, [pc, #336]	@ (8001a78 <HAL_GPIO_Init+0x33c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x22e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a53      	ldr	r2, [pc, #332]	@ (8001a7c <HAL_GPIO_Init+0x340>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x22a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a52      	ldr	r2, [pc, #328]	@ (8001a80 <HAL_GPIO_Init+0x344>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x226>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a51      	ldr	r2, [pc, #324]	@ (8001a84 <HAL_GPIO_Init+0x348>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x222>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <HAL_GPIO_Init+0x34c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x21e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a8c <HAL_GPIO_Init+0x350>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x21a>
 8001952:	2309      	movs	r3, #9
 8001954:	e012      	b.n	800197c <HAL_GPIO_Init+0x240>
 8001956:	230a      	movs	r3, #10
 8001958:	e010      	b.n	800197c <HAL_GPIO_Init+0x240>
 800195a:	2308      	movs	r3, #8
 800195c:	e00e      	b.n	800197c <HAL_GPIO_Init+0x240>
 800195e:	2307      	movs	r3, #7
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x240>
 8001962:	2306      	movs	r3, #6
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x240>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x240>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x240>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x240>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x240>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x240>
 800197a:	2300      	movs	r3, #0
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800198c:	4935      	ldr	r1, [pc, #212]	@ (8001a64 <HAL_GPIO_Init+0x328>)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a34      	ldr	r2, [pc, #208]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ee:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a12:	4a1f      	ldr	r2, [pc, #124]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <HAL_GPIO_Init+0x354>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3301      	adds	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b0f      	cmp	r3, #15
 8001a4c:	f67f ae86 	bls.w	800175c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40021c00 	.word	0x40021c00
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40022400 	.word	0x40022400
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	4a22      	ldr	r2, [pc, #136]	@ (8001b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1d      	ldr	r2, [pc, #116]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af6:	f7ff fd2f 	bl	8001558 <HAL_GetTick>
 8001afa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001afc:	e009      	b.n	8001b12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001afe:	f7ff fd2b 	bl	8001558 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b0c:	d901      	bls.n	8001b12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e022      	b.n	8001b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1e:	d1ee      	bne.n	8001afe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2c:	f7ff fd14 	bl	8001558 <HAL_GetTick>
 8001b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b32:	e009      	b.n	8001b48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b34:	f7ff fd10 	bl	8001558 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b42:	d901      	bls.n	8001b48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e007      	b.n	8001b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b54:	d1ee      	bne.n	8001b34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e291      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8c:	4b96      	ldr	r3, [pc, #600]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b98:	4b93      	ldr	r3, [pc, #588]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d112      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
 8001ba4:	4b90      	ldr	r3, [pc, #576]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d06c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x130>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d168      	bne.n	8001c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e26b      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x7a>
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a83      	ldr	r2, [pc, #524]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x9c>
 8001bea:	4b7f      	ldr	r3, [pc, #508]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7e      	ldr	r2, [pc, #504]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xc0>
 8001c0e:	4b76      	ldr	r3, [pc, #472]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b73      	ldr	r3, [pc, #460]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a72      	ldr	r2, [pc, #456]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xd8>
 8001c28:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b6c      	ldr	r3, [pc, #432]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6b      	ldr	r2, [pc, #428]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc86 	bl	8001558 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fc82 	bl	8001558 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e21f      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b61      	ldr	r3, [pc, #388]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe8>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc72 	bl	8001558 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fc6e 	bl	8001558 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e20b      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x110>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d069      	beq.n	8001d7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x190>
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b47      	ldr	r3, [pc, #284]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x17a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1df      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	493d      	ldr	r1, [pc, #244]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e040      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a38      	ldr	r2, [pc, #224]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc24 	bl	8001558 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff fc20 	bl	8001558 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1bd      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4929      	ldr	r1, [pc, #164]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fc00 	bl	8001558 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fbfc 	bl	8001558 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e199      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d038      	beq.n	8001df8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d019      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fbdd 	bl	8001558 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fbd9 	bl	8001558 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e176      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x23a>
 8001dc0:	e01a      	b.n	8001df8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc6:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff fbc3 	bl	8001558 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fbbf 	bl	8001558 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d903      	bls.n	8001dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e15c      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
 8001de8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	4b91      	ldr	r3, [pc, #580]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a4 	beq.w	8001f4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b8b      	ldr	r3, [pc, #556]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10d      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a87      	ldr	r2, [pc, #540]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2e:	4b82      	ldr	r3, [pc, #520]	@ (8002038 <HAL_RCC_OscConfig+0x4d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d118      	bne.n	8001e6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002038 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002038 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fb87 	bl	8001558 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4e:	f7ff fb83 	bl	8001558 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	@ 0x64
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e120      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e60:	4b75      	ldr	r3, [pc, #468]	@ (8002038 <HAL_RCC_OscConfig+0x4d0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x31a>
 8001e74:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a6e      	ldr	r2, [pc, #440]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	e02d      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x33c>
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8e:	4a69      	ldr	r2, [pc, #420]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e96:	4b67      	ldr	r3, [pc, #412]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	4a66      	ldr	r2, [pc, #408]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea2:	e01c      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x35e>
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb0:	4a60      	ldr	r2, [pc, #384]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec4:	e00b      	b.n	8001ede <HAL_RCC_OscConfig+0x376>
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a5a      	ldr	r2, [pc, #360]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed2:	4b58      	ldr	r3, [pc, #352]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a57      	ldr	r2, [pc, #348]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fb37 	bl	8001558 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff fb33 	bl	8001558 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0ce      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ee      	beq.n	8001eee <HAL_RCC_OscConfig+0x386>
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff fb21 	bl	8001558 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fb1d 	bl	8001558 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b8      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b3c      	ldr	r3, [pc, #240]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a3b      	ldr	r2, [pc, #236]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80a4 	beq.w	80020a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f58:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d06b      	beq.n	800203c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d149      	bne.n	8002000 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a30      	ldr	r2, [pc, #192]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7ff faee 	bl	8001558 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff faea 	bl	8001558 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e087      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fabe 	bl	8001558 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff faba 	bl	8001558 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e057      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x478>
 8001ffe:	e04f      	b.n	80020a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff faa4 	bl	8001558 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7ff faa0 	bl	8001558 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e03d      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x4ac>
 8002032:	e035      	b.n	80020a0 <HAL_RCC_OscConfig+0x538>
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x544>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d028      	beq.n	800209c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d121      	bne.n	800209c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11a      	bne.n	800209c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002072:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002096:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0d0      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d910      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b67      	ldr	r3, [pc, #412]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 020f 	bic.w	r2, r3, #15
 80020de:	4965      	ldr	r1, [pc, #404]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d040      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e073      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06b      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4936      	ldr	r1, [pc, #216]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7ff f9d8 	bl	8001558 <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f9d4 	bl	8001558 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e053      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d210      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 020f 	bic.w	r2, r3, #15
 80021ea:	4922      	ldr	r1, [pc, #136]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	@ (800227c <HAL_RCC_ClockConfig+0x1cc>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_RCC_ClockConfig+0x1d0>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1d4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f934 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	0800677c 	.word	0x0800677c
 8002280:	20000000 	.word	0x20000000
 8002284:	20000004 	.word	0x20000004

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800228c:	b090      	sub	sp, #64	@ 0x40
 800228e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
 8002294:	2300      	movs	r3, #0
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002298:	2300      	movs	r3, #0
 800229a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a0:	4b59      	ldr	r3, [pc, #356]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	f200 80a1 	bhi.w	80023f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e09b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b53      	ldr	r3, [pc, #332]	@ (800240c <HAL_RCC_GetSysClockFreq+0x184>)
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022c0:	e09b      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c2:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022c6:	e098      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d028      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b4a      	ldr	r3, [pc, #296]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022f0:	2100      	movs	r1, #0
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 80022f4:	fb03 f201 	mul.w	r2, r3, r1
 80022f8:	2300      	movs	r3, #0
 80022fa:	fb00 f303 	mul.w	r3, r0, r3
 80022fe:	4413      	add	r3, r2
 8002300:	4a43      	ldr	r2, [pc, #268]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x188>)
 8002302:	fba0 1202 	umull	r1, r2, r0, r2
 8002306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002308:	460a      	mov	r2, r1
 800230a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800230c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800230e:	4413      	add	r3, r2
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002314:	2200      	movs	r2, #0
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	61fa      	str	r2, [r7, #28]
 800231a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800231e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002322:	f7fd ffc5 	bl	80002b0 <__aeabi_uldivmod>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4613      	mov	r3, r2
 800232c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800232e:	e053      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4b35      	ldr	r3, [pc, #212]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	617a      	str	r2, [r7, #20]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002342:	f04f 0b00 	mov.w	fp, #0
 8002346:	4652      	mov	r2, sl
 8002348:	465b      	mov	r3, fp
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	ebb2 080a 	subs.w	r8, r2, sl
 8002362:	eb63 090b 	sbc.w	r9, r3, fp
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800237a:	ebb2 0408 	subs.w	r4, r2, r8
 800237e:	eb63 0509 	sbc.w	r5, r3, r9
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	00eb      	lsls	r3, r5, #3
 800238c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002390:	00e2      	lsls	r2, r4, #3
 8002392:	4614      	mov	r4, r2
 8002394:	461d      	mov	r5, r3
 8002396:	eb14 030a 	adds.w	r3, r4, sl
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	eb45 030b 	adc.w	r3, r5, fp
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ae:	4629      	mov	r1, r5
 80023b0:	028b      	lsls	r3, r1, #10
 80023b2:	4621      	mov	r1, r4
 80023b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023b8:	4621      	mov	r1, r4
 80023ba:	028a      	lsls	r2, r1, #10
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c2:	2200      	movs	r2, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	60fa      	str	r2, [r7, #12]
 80023c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023cc:	f7fd ff70 	bl	80002b0 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4613      	mov	r3, r2
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x180>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetSysClockFreq+0x184>)
 80023f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3740      	adds	r7, #64	@ 0x40
 8002400:	46bd      	mov	sp, r7
 8002402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	00f42400 	.word	0x00f42400
 8002410:	017d7840 	.word	0x017d7840

08002414 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_RCC_GetHCLKFreq+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000000 	.word	0x20000000

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002430:	f7ff fff0 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0a9b      	lsrs	r3, r3, #10
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	@ (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	0800678c 	.word	0x0800678c

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002458:	f7ff ffdc 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0b5b      	lsrs	r3, r3, #13
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4903      	ldr	r1, [pc, #12]	@ (8002478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	0800678c 	.word	0x0800678c

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024a4:	4b69      	ldr	r3, [pc, #420]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a68      	ldr	r2, [pc, #416]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	4964      	ldr	r1, [pc, #400]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d017      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d6:	4b5d      	ldr	r3, [pc, #372]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	4959      	ldr	r1, [pc, #356]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024f4:	d101      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	494a      	ldr	r1, [pc, #296]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 808b 	beq.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b3a      	ldr	r3, [pc, #232]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	4a39      	ldr	r2, [pc, #228]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256a:	6413      	str	r3, [r2, #64]	@ 0x40
 800256c:	4b37      	ldr	r3, [pc, #220]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002578:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002584:	f7fe ffe8 	bl	8001558 <HAL_GetTick>
 8002588:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe ffe4 	bl	8001558 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	@ 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e357      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d035      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d02e      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c8:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80025ea:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d114      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe ffac 	bl	8001558 <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe ffa8 	bl	8001558 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e319      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ee      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002632:	d111      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002642:	400b      	ands	r3, r1
 8002644:	4901      	ldr	r1, [pc, #4]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
 800264a:	e00b      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
 8002654:	0ffffcff 	.word	0x0ffffcff
 8002658:	4baa      	ldr	r3, [pc, #680]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4aa9      	ldr	r2, [pc, #676]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	4ba7      	ldr	r3, [pc, #668]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002666:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	49a4      	ldr	r1, [pc, #656]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	4313      	orrs	r3, r2
 8002674:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002682:	4ba0      	ldr	r3, [pc, #640]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002688:	4a9e      	ldr	r2, [pc, #632]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002692:	4b9c      	ldr	r3, [pc, #624]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	4999      	ldr	r1, [pc, #612]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b0:	4b94      	ldr	r3, [pc, #592]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026be:	4991      	ldr	r1, [pc, #580]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e0:	4988      	ldr	r1, [pc, #544]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f4:	4b83      	ldr	r3, [pc, #524]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002702:	4980      	ldr	r1, [pc, #512]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002716:	4b7b      	ldr	r3, [pc, #492]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4977      	ldr	r1, [pc, #476]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002738:	4b72      	ldr	r3, [pc, #456]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	496f      	ldr	r1, [pc, #444]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	f023 020c 	bic.w	r2, r3, #12
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002768:	4966      	ldr	r1, [pc, #408]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277c:	4b61      	ldr	r3, [pc, #388]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	495e      	ldr	r1, [pc, #376]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800279e:	4b59      	ldr	r3, [pc, #356]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ac:	4955      	ldr	r1, [pc, #340]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c0:	4b50      	ldr	r3, [pc, #320]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ce:	494d      	ldr	r1, [pc, #308]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027e2:	4b48      	ldr	r3, [pc, #288]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	4944      	ldr	r1, [pc, #272]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002804:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	493c      	ldr	r1, [pc, #240]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002826:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002834:	4933      	ldr	r1, [pc, #204]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002856:	492b      	ldr	r1, [pc, #172]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800286a:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002870:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002878:	4922      	ldr	r1, [pc, #136]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002888:	d101      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028aa:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b8:	4912      	ldr	r1, [pc, #72]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028dc:	4909      	ldr	r1, [pc, #36]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d006      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80d9 	beq.w	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f8:	4b02      	ldr	r3, [pc, #8]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a01      	ldr	r2, [pc, #4]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002902:	e001      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002904:	40023800 	.word	0x40023800
 8002908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290a:	f7fe fe25 	bl	8001558 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002912:	f7fe fe21 	bl	8001558 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	@ 0x64
 800291e:	d901      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e194      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002924:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d021      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11d      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002944:	4b64      	ldr	r3, [pc, #400]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002952:	4b61      	ldr	r3, [pc, #388]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002958:	0e1b      	lsrs	r3, r3, #24
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	019a      	lsls	r2, r3, #6
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	061b      	lsls	r3, r3, #24
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	071b      	lsls	r3, r3, #28
 8002978:	4957      	ldr	r1, [pc, #348]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d02e      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029aa:	d129      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ac:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c0:	0f1b      	lsrs	r3, r3, #28
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	019a      	lsls	r2, r3, #6
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	431a      	orrs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	071b      	lsls	r3, r3, #28
 80029e0:	493d      	ldr	r1, [pc, #244]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029e8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ee:	f023 021f 	bic.w	r2, r3, #31
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	3b01      	subs	r3, #1
 80029f8:	4937      	ldr	r1, [pc, #220]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01d      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a0c:	4b32      	ldr	r3, [pc, #200]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a12:	0e1b      	lsrs	r3, r3, #24
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a20:	0f1b      	lsrs	r3, r3, #28
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	019a      	lsls	r2, r3, #6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	071b      	lsls	r3, r3, #28
 8002a40:	4925      	ldr	r1, [pc, #148]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d011      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	019a      	lsls	r2, r3, #6
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	041b      	lsls	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	071b      	lsls	r3, r3, #28
 8002a70:	4919      	ldr	r1, [pc, #100]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a78:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe fd68 	bl	8001558 <HAL_GetTick>
 8002a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a8c:	f7fe fd64 	bl	8001558 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	@ 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0d7      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	f040 80cd 	bne.w	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abe:	f7fe fd4b 	bl	8001558 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac6:	f7fe fd47 	bl	8001558 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	@ 0x64
 8002ad2:	d903      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0ba      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ad8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002adc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae8:	d0ed      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d02e      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12a      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b12:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b20:	4b4d      	ldr	r3, [pc, #308]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b26:	0f1b      	lsrs	r3, r3, #28
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	019a      	lsls	r2, r3, #6
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	4944      	ldr	r1, [pc, #272]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b4e:	4b42      	ldr	r3, [pc, #264]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	493d      	ldr	r1, [pc, #244]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b7c:	d11d      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b7e:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	0e1b      	lsrs	r3, r3, #24
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b8c:	4b32      	ldr	r3, [pc, #200]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	0f1b      	lsrs	r3, r3, #28
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	019a      	lsls	r2, r3, #6
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	4929      	ldr	r1, [pc, #164]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d028      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bc6:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bcc:	0e1b      	lsrs	r3, r3, #24
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd4:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	019a      	lsls	r2, r3, #6
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	4917      	ldr	r1, [pc, #92]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	4911      	ldr	r1, [pc, #68]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c18:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fc98 	bl	8001558 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c2c:	f7fe fc94 	bl	8001558 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	@ 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e007      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c3e:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c4a:	d1ef      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e040      	b.n	8002cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fb6e 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	@ 0x24
 8002c88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0201 	bic.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fb16 	bl	80032d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f8af 	bl	8002e0c <UART_SetConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e01b      	b.n	8002cf0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fb95 	bl	8003418 <UART_CheckIdleState>
 8002cee:	4603      	mov	r3, r0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d177      	bne.n	8002e00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_Transmit+0x24>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e070      	b.n	8002e02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2221      	movs	r2, #33	@ 0x21
 8002d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2e:	f7fe fc13 	bl	8001558 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4c:	d108      	bne.n	8002d60 <HAL_UART_Transmit+0x68>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e003      	b.n	8002d68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d68:	e02f      	b.n	8002dca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	@ 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fba6 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e03b      	b.n	8002e02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	3302      	adds	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e007      	b.n	8002db8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1c9      	bne.n	8002d6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2140      	movs	r1, #64	@ 0x40
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fb70 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e005      	b.n	8002e02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4ba6      	ldr	r3, [pc, #664]	@ (80030d0 <UART_SetConfig+0x2c4>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a94      	ldr	r2, [pc, #592]	@ (80030d4 <UART_SetConfig+0x2c8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d120      	bne.n	8002eca <UART_SetConfig+0xbe>
 8002e88:	4b93      	ldr	r3, [pc, #588]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d816      	bhi.n	8002ec4 <UART_SetConfig+0xb8>
 8002e96:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <UART_SetConfig+0x90>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002eb9 	.word	0x08002eb9
 8002ea4:	08002eb3 	.word	0x08002eb3
 8002ea8:	08002ebf 	.word	0x08002ebf
 8002eac:	2301      	movs	r3, #1
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e150      	b.n	8003154 <UART_SetConfig+0x348>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e14d      	b.n	8003154 <UART_SetConfig+0x348>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e14a      	b.n	8003154 <UART_SetConfig+0x348>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e147      	b.n	8003154 <UART_SetConfig+0x348>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e144      	b.n	8003154 <UART_SetConfig+0x348>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a83      	ldr	r2, [pc, #524]	@ (80030dc <UART_SetConfig+0x2d0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d132      	bne.n	8002f3a <UART_SetConfig+0x12e>
 8002ed4:	4b80      	ldr	r3, [pc, #512]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d828      	bhi.n	8002f34 <UART_SetConfig+0x128>
 8002ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <UART_SetConfig+0xdc>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f35 	.word	0x08002f35
 8002ef0:	08002f35 	.word	0x08002f35
 8002ef4:	08002f35 	.word	0x08002f35
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f23 	.word	0x08002f23
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f35 	.word	0x08002f35
 8002f18:	08002f2f 	.word	0x08002f2f
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e118      	b.n	8003154 <UART_SetConfig+0x348>
 8002f22:	2302      	movs	r3, #2
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e115      	b.n	8003154 <UART_SetConfig+0x348>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e112      	b.n	8003154 <UART_SetConfig+0x348>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e10f      	b.n	8003154 <UART_SetConfig+0x348>
 8002f34:	2310      	movs	r3, #16
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e10c      	b.n	8003154 <UART_SetConfig+0x348>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a68      	ldr	r2, [pc, #416]	@ (80030e0 <UART_SetConfig+0x2d4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d120      	bne.n	8002f86 <UART_SetConfig+0x17a>
 8002f44:	4b64      	ldr	r3, [pc, #400]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002f4e:	2b30      	cmp	r3, #48	@ 0x30
 8002f50:	d013      	beq.n	8002f7a <UART_SetConfig+0x16e>
 8002f52:	2b30      	cmp	r3, #48	@ 0x30
 8002f54:	d814      	bhi.n	8002f80 <UART_SetConfig+0x174>
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d009      	beq.n	8002f6e <UART_SetConfig+0x162>
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d810      	bhi.n	8002f80 <UART_SetConfig+0x174>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <UART_SetConfig+0x15c>
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d006      	beq.n	8002f74 <UART_SetConfig+0x168>
 8002f66:	e00b      	b.n	8002f80 <UART_SetConfig+0x174>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e0f2      	b.n	8003154 <UART_SetConfig+0x348>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	77fb      	strb	r3, [r7, #31]
 8002f72:	e0ef      	b.n	8003154 <UART_SetConfig+0x348>
 8002f74:	2304      	movs	r3, #4
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e0ec      	b.n	8003154 <UART_SetConfig+0x348>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e0e9      	b.n	8003154 <UART_SetConfig+0x348>
 8002f80:	2310      	movs	r3, #16
 8002f82:	77fb      	strb	r3, [r7, #31]
 8002f84:	e0e6      	b.n	8003154 <UART_SetConfig+0x348>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a56      	ldr	r2, [pc, #344]	@ (80030e4 <UART_SetConfig+0x2d8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d120      	bne.n	8002fd2 <UART_SetConfig+0x1c6>
 8002f90:	4b51      	ldr	r3, [pc, #324]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f9c:	d013      	beq.n	8002fc6 <UART_SetConfig+0x1ba>
 8002f9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fa0:	d814      	bhi.n	8002fcc <UART_SetConfig+0x1c0>
 8002fa2:	2b80      	cmp	r3, #128	@ 0x80
 8002fa4:	d009      	beq.n	8002fba <UART_SetConfig+0x1ae>
 8002fa6:	2b80      	cmp	r3, #128	@ 0x80
 8002fa8:	d810      	bhi.n	8002fcc <UART_SetConfig+0x1c0>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <UART_SetConfig+0x1a8>
 8002fae:	2b40      	cmp	r3, #64	@ 0x40
 8002fb0:	d006      	beq.n	8002fc0 <UART_SetConfig+0x1b4>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x1c0>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e0cc      	b.n	8003154 <UART_SetConfig+0x348>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e0c9      	b.n	8003154 <UART_SetConfig+0x348>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0c6      	b.n	8003154 <UART_SetConfig+0x348>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e0c3      	b.n	8003154 <UART_SetConfig+0x348>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e0c0      	b.n	8003154 <UART_SetConfig+0x348>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a44      	ldr	r2, [pc, #272]	@ (80030e8 <UART_SetConfig+0x2dc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d125      	bne.n	8003028 <UART_SetConfig+0x21c>
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fea:	d017      	beq.n	800301c <UART_SetConfig+0x210>
 8002fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ff0:	d817      	bhi.n	8003022 <UART_SetConfig+0x216>
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ff6:	d00b      	beq.n	8003010 <UART_SetConfig+0x204>
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffc:	d811      	bhi.n	8003022 <UART_SetConfig+0x216>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <UART_SetConfig+0x1fe>
 8003002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003006:	d006      	beq.n	8003016 <UART_SetConfig+0x20a>
 8003008:	e00b      	b.n	8003022 <UART_SetConfig+0x216>
 800300a:	2300      	movs	r3, #0
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e0a1      	b.n	8003154 <UART_SetConfig+0x348>
 8003010:	2302      	movs	r3, #2
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e09e      	b.n	8003154 <UART_SetConfig+0x348>
 8003016:	2304      	movs	r3, #4
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e09b      	b.n	8003154 <UART_SetConfig+0x348>
 800301c:	2308      	movs	r3, #8
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e098      	b.n	8003154 <UART_SetConfig+0x348>
 8003022:	2310      	movs	r3, #16
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	e095      	b.n	8003154 <UART_SetConfig+0x348>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2f      	ldr	r2, [pc, #188]	@ (80030ec <UART_SetConfig+0x2e0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d125      	bne.n	800307e <UART_SetConfig+0x272>
 8003032:	4b29      	ldr	r3, [pc, #164]	@ (80030d8 <UART_SetConfig+0x2cc>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003038:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800303c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003040:	d017      	beq.n	8003072 <UART_SetConfig+0x266>
 8003042:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003046:	d817      	bhi.n	8003078 <UART_SetConfig+0x26c>
 8003048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800304c:	d00b      	beq.n	8003066 <UART_SetConfig+0x25a>
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003052:	d811      	bhi.n	8003078 <UART_SetConfig+0x26c>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <UART_SetConfig+0x254>
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	d006      	beq.n	800306c <UART_SetConfig+0x260>
 800305e:	e00b      	b.n	8003078 <UART_SetConfig+0x26c>
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e076      	b.n	8003154 <UART_SetConfig+0x348>
 8003066:	2302      	movs	r3, #2
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e073      	b.n	8003154 <UART_SetConfig+0x348>
 800306c:	2304      	movs	r3, #4
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e070      	b.n	8003154 <UART_SetConfig+0x348>
 8003072:	2308      	movs	r3, #8
 8003074:	77fb      	strb	r3, [r7, #31]
 8003076:	e06d      	b.n	8003154 <UART_SetConfig+0x348>
 8003078:	2310      	movs	r3, #16
 800307a:	77fb      	strb	r3, [r7, #31]
 800307c:	e06a      	b.n	8003154 <UART_SetConfig+0x348>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	@ (80030f0 <UART_SetConfig+0x2e4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d138      	bne.n	80030fa <UART_SetConfig+0x2ee>
 8003088:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <UART_SetConfig+0x2cc>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003096:	d017      	beq.n	80030c8 <UART_SetConfig+0x2bc>
 8003098:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800309c:	d82a      	bhi.n	80030f4 <UART_SetConfig+0x2e8>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a2:	d00b      	beq.n	80030bc <UART_SetConfig+0x2b0>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a8:	d824      	bhi.n	80030f4 <UART_SetConfig+0x2e8>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <UART_SetConfig+0x2aa>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b2:	d006      	beq.n	80030c2 <UART_SetConfig+0x2b6>
 80030b4:	e01e      	b.n	80030f4 <UART_SetConfig+0x2e8>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e04b      	b.n	8003154 <UART_SetConfig+0x348>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e048      	b.n	8003154 <UART_SetConfig+0x348>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e045      	b.n	8003154 <UART_SetConfig+0x348>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e042      	b.n	8003154 <UART_SetConfig+0x348>
 80030ce:	bf00      	nop
 80030d0:	efff69f3 	.word	0xefff69f3
 80030d4:	40011000 	.word	0x40011000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40004400 	.word	0x40004400
 80030e0:	40004800 	.word	0x40004800
 80030e4:	40004c00 	.word	0x40004c00
 80030e8:	40005000 	.word	0x40005000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40007800 	.word	0x40007800
 80030f4:	2310      	movs	r3, #16
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e02c      	b.n	8003154 <UART_SetConfig+0x348>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a72      	ldr	r2, [pc, #456]	@ (80032c8 <UART_SetConfig+0x4bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d125      	bne.n	8003150 <UART_SetConfig+0x344>
 8003104:	4b71      	ldr	r3, [pc, #452]	@ (80032cc <UART_SetConfig+0x4c0>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800310e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003112:	d017      	beq.n	8003144 <UART_SetConfig+0x338>
 8003114:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003118:	d817      	bhi.n	800314a <UART_SetConfig+0x33e>
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311e:	d00b      	beq.n	8003138 <UART_SetConfig+0x32c>
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003124:	d811      	bhi.n	800314a <UART_SetConfig+0x33e>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <UART_SetConfig+0x326>
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800312e:	d006      	beq.n	800313e <UART_SetConfig+0x332>
 8003130:	e00b      	b.n	800314a <UART_SetConfig+0x33e>
 8003132:	2300      	movs	r3, #0
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e00d      	b.n	8003154 <UART_SetConfig+0x348>
 8003138:	2302      	movs	r3, #2
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e00a      	b.n	8003154 <UART_SetConfig+0x348>
 800313e:	2304      	movs	r3, #4
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e007      	b.n	8003154 <UART_SetConfig+0x348>
 8003144:	2308      	movs	r3, #8
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e004      	b.n	8003154 <UART_SetConfig+0x348>
 800314a:	2310      	movs	r3, #16
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e001      	b.n	8003154 <UART_SetConfig+0x348>
 8003150:	2310      	movs	r3, #16
 8003152:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315c:	d15b      	bne.n	8003216 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800315e:	7ffb      	ldrb	r3, [r7, #31]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d828      	bhi.n	80031b6 <UART_SetConfig+0x3aa>
 8003164:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <UART_SetConfig+0x360>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	08003191 	.word	0x08003191
 8003170:	08003199 	.word	0x08003199
 8003174:	080031a1 	.word	0x080031a1
 8003178:	080031b7 	.word	0x080031b7
 800317c:	080031a7 	.word	0x080031a7
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031b7 	.word	0x080031b7
 800318c:	080031af 	.word	0x080031af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003190:	f7ff f94c 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8003194:	61b8      	str	r0, [r7, #24]
        break;
 8003196:	e013      	b.n	80031c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003198:	f7ff f95c 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 800319c:	61b8      	str	r0, [r7, #24]
        break;
 800319e:	e00f      	b.n	80031c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a0:	4b4b      	ldr	r3, [pc, #300]	@ (80032d0 <UART_SetConfig+0x4c4>)
 80031a2:	61bb      	str	r3, [r7, #24]
        break;
 80031a4:	e00c      	b.n	80031c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a6:	f7ff f86f 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80031aa:	61b8      	str	r0, [r7, #24]
        break;
 80031ac:	e008      	b.n	80031c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b2:	61bb      	str	r3, [r7, #24]
        break;
 80031b4:	e004      	b.n	80031c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77bb      	strb	r3, [r7, #30]
        break;
 80031be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d074      	beq.n	80032b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	005a      	lsls	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d916      	bls.n	8003210 <UART_SetConfig+0x404>
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e8:	d212      	bcs.n	8003210 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b29a      	uxth	r2, r3
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	4313      	orrs	r3, r2
 8003204:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	89fa      	ldrh	r2, [r7, #14]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	e04f      	b.n	80032b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77bb      	strb	r3, [r7, #30]
 8003214:	e04c      	b.n	80032b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d828      	bhi.n	800326e <UART_SetConfig+0x462>
 800321c:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <UART_SetConfig+0x418>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	0800326f 	.word	0x0800326f
 8003234:	0800325f 	.word	0x0800325f
 8003238:	0800326f 	.word	0x0800326f
 800323c:	0800326f 	.word	0x0800326f
 8003240:	0800326f 	.word	0x0800326f
 8003244:	08003267 	.word	0x08003267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7ff f8f0 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 800324c:	61b8      	str	r0, [r7, #24]
        break;
 800324e:	e013      	b.n	8003278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003250:	f7ff f900 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 8003254:	61b8      	str	r0, [r7, #24]
        break;
 8003256:	e00f      	b.n	8003278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003258:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <UART_SetConfig+0x4c4>)
 800325a:	61bb      	str	r3, [r7, #24]
        break;
 800325c:	e00c      	b.n	8003278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325e:	f7ff f813 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003262:	61b8      	str	r0, [r7, #24]
        break;
 8003264:	e008      	b.n	8003278 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e004      	b.n	8003278 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	77bb      	strb	r3, [r7, #30]
        break;
 8003276:	bf00      	nop
    }

    if (pclk != 0U)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085a      	lsrs	r2, r3, #1
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	441a      	add	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b0f      	cmp	r3, #15
 8003296:	d909      	bls.n	80032ac <UART_SetConfig+0x4a0>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d205      	bcs.n	80032ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e001      	b.n	80032b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40007c00 	.word	0x40007c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400

080032d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01a      	beq.n	80033ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d2:	d10a      	bne.n	80033ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	@ 0x30
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003428:	f7fe f896 	bl	8001558 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d12e      	bne.n	800349a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800343c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f83b 	bl	80034c6 <UART_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d021      	beq.n	800349a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	60fb      	str	r3, [r7, #12]
   return(result);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	617b      	str	r3, [r7, #20]
   return(result);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e6      	bne.n	8003456 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e011      	b.n	80034be <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d6:	e04f      	b.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d04b      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7fe f83a 	bl	8001558 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04e      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d037      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b80      	cmp	r3, #128	@ 0x80
 800350c:	d034      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d031      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d110      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2208      	movs	r2, #8
 8003528:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f838 	bl	80035a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2208      	movs	r2, #8
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e029      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	d111      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800355c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f81e 	bl	80035a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e00f      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d0a0      	beq.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b095      	sub	sp, #84	@ 0x54
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80035c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e6      	bne.n	80035a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3308      	adds	r3, #8
 80035e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e5      	bne.n	80035da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	2b01      	cmp	r3, #1
 8003614:	d118      	bne.n	8003648 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	60bb      	str	r3, [r7, #8]
   return(result);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	647b      	str	r3, [r7, #68]	@ 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	613b      	str	r3, [r7, #16]
   return(result);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e6      	bne.n	8003616 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800365c:	bf00      	nop
 800365e:	3754      	adds	r7, #84	@ 0x54
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800366c:	f000 feb4 	bl	80043d8 <vTaskStartScheduler>
  
  return osOK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	bd80      	pop	{r7, pc}

08003676 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 0208 	add.w	r2, r3, #8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f04f 32ff 	mov.w	r2, #4294967295
 800368e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f103 0208 	add.w	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f103 0208 	add.w	r2, r3, #8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d103      	bne.n	8003738 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e00c      	b.n	8003752 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3308      	adds	r3, #8
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e002      	b.n	8003746 <vListInsert+0x2e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d2f6      	bcs.n	8003740 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	601a      	str	r2, [r3, #0]
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6852      	ldr	r2, [r2, #4]
 80037aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d103      	bne.n	80037be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <xQueueGenericReset+0x30>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	b672      	cpsid	i
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	b662      	cpsie	i
 8003808:	60bb      	str	r3, [r7, #8]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003810:	f001 fd7c 	bl	800530c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	441a      	add	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	3b01      	subs	r3, #1
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	22ff      	movs	r2, #255	@ 0xff
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	22ff      	movs	r2, #255	@ 0xff
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d114      	bne.n	8003890 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3310      	adds	r3, #16
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f82e 	bl	80048d4 <xTaskRemoveFromEventList>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <xQueueGenericReset+0xd4>)
 8003880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	e009      	b.n	80038a4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3310      	adds	r3, #16
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff feee 	bl	8003676 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3324      	adds	r3, #36	@ 0x24
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fee9 	bl	8003676 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038a4:	f001 fd68 	bl	8005378 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038a8:	2301      	movs	r3, #1
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	@ 0x28
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <xQueueGenericCreate+0x30>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d0:	b672      	cpsid	i
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	b662      	cpsie	i
 80038e0:	613b      	str	r3, [r7, #16]
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e004      	b.n	80038fe <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3348      	adds	r3, #72	@ 0x48
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fdea 	bl	80054dc <pvPortMalloc>
 8003908:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3348      	adds	r3, #72	@ 0x48
 8003918:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003922:	79fa      	ldrb	r2, [r7, #7]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f805 	bl	800393e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003934:	69bb      	ldr	r3, [r7, #24]
	}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e002      	b.n	8003960 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800396c:	2101      	movs	r1, #1
 800396e:	69b8      	ldr	r0, [r7, #24]
 8003970:	f7ff ff36 	bl	80037e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800399c:	2300      	movs	r3, #0
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f81c 	bl	80039e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6939      	ldr	r1, [r7, #16]
 80039c8:	6978      	ldr	r0, [r7, #20]
 80039ca:	f7ff ff75 	bl	80038b8 <xQueueGenericCreate>
 80039ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff ffd3 	bl	800397c <prvInitialiseMutex>

		return xNewQueue;
 80039d6:	68fb      	ldr	r3, [r7, #12]
	}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	@ 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ee:	2300      	movs	r3, #0
 80039f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <xQueueGenericSend+0x38>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	b672      	cpsid	i
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	b662      	cpsie	i
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x46>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueGenericSend+0x4a>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueGenericSend+0x4c>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10d      	bne.n	8003a4c <xQueueGenericSend+0x6c>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x7a>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <xQueueGenericSend+0x7e>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueGenericSend+0x80>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10d      	bne.n	8003a80 <xQueueGenericSend+0xa0>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	b672      	cpsid	i
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	b662      	cpsie	i
 8003a78:	623b      	str	r3, [r7, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a80:	f001 f8f0 	bl	8004c64 <xTaskGetSchedulerState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <xQueueGenericSend+0xb0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <xQueueGenericSend+0xb4>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <xQueueGenericSend+0xb6>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10d      	bne.n	8003ab6 <xQueueGenericSend+0xd6>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	b672      	cpsid	i
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	b662      	cpsie	i
 8003aae:	61fb      	str	r3, [r7, #28]
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab6:	f001 fc29 	bl	800530c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <xQueueGenericSend+0xec>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d129      	bne.n	8003b20 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad2:	f000 f9bf 	bl	8003e54 <prvCopyDataToQueue>
 8003ad6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	3324      	adds	r3, #36	@ 0x24
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fef5 	bl	80048d4 <xTaskRemoveFromEventList>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003af0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf0 <xQueueGenericSend+0x210>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	e00a      	b.n	8003b18 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b08:	4b39      	ldr	r3, [pc, #228]	@ (8003bf0 <xQueueGenericSend+0x210>)
 8003b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b18:	f001 fc2e 	bl	8005378 <vPortExitCritical>
				return pdPASS;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e063      	b.n	8003be8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b26:	f001 fc27 	bl	8005378 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e05c      	b.n	8003be8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 ff31 	bl	80049a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b42:	f001 fc19 	bl	8005378 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b46:	f000 fcad 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b4a:	f001 fbdf 	bl	800530c <vPortEnterCritical>
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d103      	bne.n	8003b64 <xQueueGenericSend+0x184>
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d103      	bne.n	8003b7a <xQueueGenericSend+0x19a>
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b7a:	f001 fbfd 	bl	8005378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7e:	1d3a      	adds	r2, r7, #4
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ff20 	bl	80049cc <xTaskCheckForTimeOut>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d124      	bne.n	8003bdc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b94:	f000 fa30 	bl	8003ff8 <prvIsQueueFull>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fe6c 	bl	8004884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bae:	f000 f9bb 	bl	8003f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bb2:	f000 fc85 	bl	80044c0 <xTaskResumeAll>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f af7c 	bne.w	8003ab6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <xQueueGenericSend+0x210>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	e772      	b.n	8003ab6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bd2:	f000 f9a9 	bl	8003f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd6:	f000 fc73 	bl	80044c0 <xTaskResumeAll>
 8003bda:	e76c      	b.n	8003ab6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bde:	f000 f9a3 	bl	8003f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003be2:	f000 fc6d 	bl	80044c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003be6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3738      	adds	r7, #56	@ 0x38
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	@ 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	b672      	cpsid	i
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	b662      	cpsie	i
 8003c24:	623b      	str	r3, [r7, #32]
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	b672      	cpsid	i
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	b662      	cpsie	i
 8003c48:	61fb      	str	r3, [r7, #28]
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c50:	f001 f808 	bl	8004c64 <xTaskGetSchedulerState>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <xQueueSemaphoreTake+0x6c>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <xQueueSemaphoreTake+0x70>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <xQueueSemaphoreTake+0x72>
 8003c64:	2300      	movs	r3, #0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10d      	bne.n	8003c86 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	b672      	cpsid	i
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	b662      	cpsie	i
 8003c7e:	61bb      	str	r3, [r7, #24]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c86:	f001 fb41 	bl	800530c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ca6:	f001 f9a7 	bl	8004ff8 <pvTaskIncrementMutexHeldCount>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00f      	beq.n	8003cd8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cba:	3310      	adds	r3, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fe09 	bl	80048d4 <xTaskRemoveFromEventList>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cc8:	4b55      	ldr	r3, [pc, #340]	@ (8003e20 <xQueueSemaphoreTake+0x22c>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cd8:	f001 fb4e 	bl	8005378 <vPortExitCritical>
				return pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e09a      	b.n	8003e16 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	b672      	cpsid	i
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	b662      	cpsie	i
 8003d00:	617b      	str	r3, [r7, #20]
}
 8003d02:	bf00      	nop
 8003d04:	bf00      	nop
 8003d06:	e7fd      	b.n	8003d04 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003d08:	f001 fb36 	bl	8005378 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e082      	b.n	8003e16 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fe40 	bl	80049a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d24:	f001 fb28 	bl	8005378 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d28:	f000 fbbc 	bl	80044a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d2c:	f001 faee 	bl	800530c <vPortEnterCritical>
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d36:	b25b      	sxtb	r3, r3
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d103      	bne.n	8003d46 <xQueueSemaphoreTake+0x152>
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d103      	bne.n	8003d5c <xQueueSemaphoreTake+0x168>
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d5c:	f001 fb0c 	bl	8005378 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d60:	463a      	mov	r2, r7
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fe2f 	bl	80049cc <xTaskCheckForTimeOut>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d132      	bne.n	8003dda <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d76:	f000 f929 	bl	8003fcc <prvIsQueueEmpty>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d026      	beq.n	8003dce <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8003d88:	f001 fac0 	bl	800530c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 ff85 	bl	8004ca0 <xTaskPriorityInherit>
 8003d96:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003d98:	f001 faee 	bl	8005378 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9e:	3324      	adds	r3, #36	@ 0x24
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd6d 	bl	8004884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dac:	f000 f8bc 	bl	8003f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db0:	f000 fb86 	bl	80044c0 <xTaskResumeAll>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f47f af65 	bne.w	8003c86 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8003dbc:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <xQueueSemaphoreTake+0x22c>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	e75b      	b.n	8003c86 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dd0:	f000 f8aa 	bl	8003f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dd4:	f000 fb74 	bl	80044c0 <xTaskResumeAll>
 8003dd8:	e755      	b.n	8003c86 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ddc:	f000 f8a4 	bl	8003f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de0:	f000 fb6e 	bl	80044c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003de6:	f000 f8f1 	bl	8003fcc <prvIsQueueEmpty>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f43f af4a 	beq.w	8003c86 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8003df8:	f001 fa88 	bl	800530c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dfe:	f000 f811 	bl	8003e24 <prvGetDisinheritPriorityAfterTimeout>
 8003e02:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f854 	bl	8004eb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003e10:	f001 fab2 	bl	8005378 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3738      	adds	r7, #56	@ 0x38
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1c3 0307 	rsb	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e001      	b.n	8003e46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e46:	68fb      	ldr	r3, [r7, #12]
	}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d14d      	bne.n	8003f16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 ff8e 	bl	8004da0 <xTaskPriorityDisinherit>
 8003e84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e043      	b.n	8003f16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d119      	bne.n	8003ec8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6858      	ldr	r0, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	f001 fe99 	bl	8005bd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d32b      	bcc.n	8003f16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e026      	b.n	8003f16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68d8      	ldr	r0, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	f001 fe7f 	bl	8005bd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	425b      	negs	r3, r3
 8003ee2:	441a      	add	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d207      	bcs.n	8003f04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	425b      	negs	r3, r3
 8003efe:	441a      	add	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d105      	bne.n	8003f16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003f1e:	697b      	ldr	r3, [r7, #20]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f30:	f001 f9ec 	bl	800530c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f3c:	e011      	b.n	8003f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3324      	adds	r3, #36	@ 0x24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fcc2 	bl	80048d4 <xTaskRemoveFromEventList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f56:	f000 fda1 	bl	8004a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dce9      	bgt.n	8003f3e <prvUnlockQueue+0x16>
 8003f6a:	e000      	b.n	8003f6e <prvUnlockQueue+0x46>
					break;
 8003f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	22ff      	movs	r2, #255	@ 0xff
 8003f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f76:	f001 f9ff 	bl	8005378 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f7a:	f001 f9c7 	bl	800530c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f86:	e011      	b.n	8003fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3310      	adds	r3, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fc9d 	bl	80048d4 <xTaskRemoveFromEventList>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fa0:	f000 fd7c 	bl	8004a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dce9      	bgt.n	8003f88 <prvUnlockQueue+0x60>
 8003fb4:	e000      	b.n	8003fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	22ff      	movs	r2, #255	@ 0xff
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003fc0:	f001 f9da 	bl	8005378 <vPortExitCritical>
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd4:	f001 f99a 	bl	800530c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e001      	b.n	8003fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f001 f9c5 	bl	8005378 <vPortExitCritical>

	return xReturn;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004000:	f001 f984 	bl	800530c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	429a      	cmp	r2, r3
 800400e:	d102      	bne.n	8004016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e001      	b.n	800401a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800401a:	f001 f9ad 	bl	8005378 <vPortExitCritical>

	return xReturn;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	@ 0x38
 800402c:	af04      	add	r7, sp, #16
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <xTaskCreateStatic+0x30>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	b672      	cpsid	i
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	b662      	cpsie	i
 8004050:	623b      	str	r3, [r7, #32]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10d      	bne.n	800407a <xTaskCreateStatic+0x52>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	b672      	cpsid	i
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	b662      	cpsie	i
 8004072:	61fb      	str	r3, [r7, #28]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800407a:	2354      	movs	r3, #84	@ 0x54
 800407c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b54      	cmp	r3, #84	@ 0x54
 8004082:	d00d      	beq.n	80040a0 <xTaskCreateStatic+0x78>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	b672      	cpsid	i
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	b662      	cpsie	i
 8004098:	61bb      	str	r3, [r7, #24]
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01e      	beq.n	80040e6 <xTaskCreateStatic+0xbe>
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01b      	beq.n	80040e6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040c0:	2300      	movs	r3, #0
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f850 	bl	800417e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040e0:	f000 f8d8 	bl	8004294 <prvAddNewTaskToReadyList>
 80040e4:	e001      	b.n	80040ea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040ea:	697b      	ldr	r3, [r7, #20]
	}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3728      	adds	r7, #40	@ 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08c      	sub	sp, #48	@ 0x30
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f9e7 	bl	80054dc <pvPortMalloc>
 800410e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004116:	2054      	movs	r0, #84	@ 0x54
 8004118:	f001 f9e0 	bl	80054dc <pvPortMalloc>
 800411c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
 800412a:	e005      	b.n	8004138 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f001 faa3 	bl	8005678 <vPortFree>
 8004132:	e001      	b.n	8004138 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d017      	beq.n	800416e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	2300      	movs	r3, #0
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f80e 	bl	800417e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004162:	69f8      	ldr	r0, [r7, #28]
 8004164:	f000 f896 	bl	8004294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e002      	b.n	8004174 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004174:	69bb      	ldr	r3, [r7, #24]
	}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b088      	sub	sp, #32
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004196:	440b      	add	r3, r1
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <prvInitialiseNewTask+0x4e>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	b672      	cpsid	i
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	b662      	cpsie	i
 80041c4:	617b      	str	r3, [r7, #20]
}
 80041c6:	bf00      	nop
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01f      	beq.n	8004212 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e012      	b.n	80041fe <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	7819      	ldrb	r1, [r3, #0]
 80041e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	3334      	adds	r3, #52	@ 0x34
 80041e8:	460a      	mov	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d006      	beq.n	8004206 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3301      	adds	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b0f      	cmp	r3, #15
 8004202:	d9e9      	bls.n	80041d8 <prvInitialiseNewTask+0x5a>
 8004204:	e000      	b.n	8004208 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004206:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004210:	e003      	b.n	800421a <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	2b06      	cmp	r3, #6
 800421e:	d901      	bls.n	8004224 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004220:	2306      	movs	r3, #6
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004228:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	3304      	adds	r3, #4
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fa3b 	bl	80036b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	3318      	adds	r3, #24
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fa36 	bl	80036b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800424a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800424e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	f1c3 0207 	rsb	r2, r3, #7
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	2200      	movs	r2, #0
 8004264:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	69b8      	ldr	r0, [r7, #24]
 8004274:	f000 ff3a 	bl	80050ec <pxPortInitialiseStack>
 8004278:	4602      	mov	r2, r0
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800429c:	f001 f836 	bl	800530c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042a0:	4b2a      	ldr	r3, [pc, #168]	@ (800434c <prvAddNewTaskToReadyList+0xb8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a29      	ldr	r2, [pc, #164]	@ (800434c <prvAddNewTaskToReadyList+0xb8>)
 80042a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042aa:	4b29      	ldr	r3, [pc, #164]	@ (8004350 <prvAddNewTaskToReadyList+0xbc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042b2:	4a27      	ldr	r2, [pc, #156]	@ (8004350 <prvAddNewTaskToReadyList+0xbc>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042b8:	4b24      	ldr	r3, [pc, #144]	@ (800434c <prvAddNewTaskToReadyList+0xb8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d110      	bne.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042c0:	f000 fc10 	bl	8004ae4 <prvInitialiseTaskLists>
 80042c4:	e00d      	b.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042c6:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <prvAddNewTaskToReadyList+0xc0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <prvAddNewTaskToReadyList+0xbc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d802      	bhi.n	80042e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004350 <prvAddNewTaskToReadyList+0xbc>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <prvAddNewTaskToReadyList+0xc4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <prvAddNewTaskToReadyList+0xc4>)
 80042ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	2201      	movs	r2, #1
 80042f2:	409a      	lsls	r2, r3
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	4a18      	ldr	r2, [pc, #96]	@ (800435c <prvAddNewTaskToReadyList+0xc8>)
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <prvAddNewTaskToReadyList+0xcc>)
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7ff f9db 	bl	80036d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800431a:	f001 f82d 	bl	8005378 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <prvAddNewTaskToReadyList+0xc0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00e      	beq.n	8004344 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004326:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <prvAddNewTaskToReadyList+0xbc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d207      	bcs.n	8004344 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <prvAddNewTaskToReadyList+0xd0>)
 8004336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000470 	.word	0x20000470
 8004350:	20000370 	.word	0x20000370
 8004354:	2000047c 	.word	0x2000047c
 8004358:	2000048c 	.word	0x2000048c
 800435c:	20000478 	.word	0x20000478
 8004360:	20000374 	.word	0x20000374
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01a      	beq.n	80043b0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800437a:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <vTaskDelay+0x68>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <vTaskDelay+0x36>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004386:	b672      	cpsid	i
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	b662      	cpsie	i
 8004396:	60bb      	str	r3, [r7, #8]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800439e:	f000 f881 	bl	80044a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fe3b 	bl	8005020 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043aa:	f000 f889 	bl	80044c0 <xTaskResumeAll>
 80043ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d107      	bne.n	80043c6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80043b6:	4b07      	ldr	r3, [pc, #28]	@ (80043d4 <vTaskDelay+0x6c>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000498 	.word	0x20000498
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	@ 0x28
 80043dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043e6:	463a      	mov	r2, r7
 80043e8:	1d39      	adds	r1, r7, #4
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc f95e 	bl	80006b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	9202      	str	r2, [sp, #8]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	460a      	mov	r2, r1
 8004406:	4921      	ldr	r1, [pc, #132]	@ (800448c <vTaskStartScheduler+0xb4>)
 8004408:	4821      	ldr	r0, [pc, #132]	@ (8004490 <vTaskStartScheduler+0xb8>)
 800440a:	f7ff fe0d 	bl	8004028 <xTaskCreateStatic>
 800440e:	4603      	mov	r3, r0
 8004410:	4a20      	ldr	r2, [pc, #128]	@ (8004494 <vTaskStartScheduler+0xbc>)
 8004412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <vTaskStartScheduler+0xbc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e001      	b.n	8004426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d118      	bne.n	800445e <vTaskStartScheduler+0x86>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	b672      	cpsid	i
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	b662      	cpsie	i
 8004440:	613b      	str	r3, [r7, #16]
}
 8004442:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004444:	4b14      	ldr	r3, [pc, #80]	@ (8004498 <vTaskStartScheduler+0xc0>)
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800444c:	4b13      	ldr	r3, [pc, #76]	@ (800449c <vTaskStartScheduler+0xc4>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004452:	4b13      	ldr	r3, [pc, #76]	@ (80044a0 <vTaskStartScheduler+0xc8>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004458:	f000 feda 	bl	8005210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800445c:	e011      	b.n	8004482 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d10d      	bne.n	8004482 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	b672      	cpsid	i
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	b662      	cpsie	i
 800447a:	60fb      	str	r3, [r7, #12]
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	e7fd      	b.n	800447e <vTaskStartScheduler+0xa6>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	08006774 	.word	0x08006774
 8004490:	08004ab5 	.word	0x08004ab5
 8004494:	20000494 	.word	0x20000494
 8004498:	20000490 	.word	0x20000490
 800449c:	2000047c 	.word	0x2000047c
 80044a0:	20000474 	.word	0x20000474

080044a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <vTaskSuspendAll+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a03      	ldr	r2, [pc, #12]	@ (80044bc <vTaskSuspendAll+0x18>)
 80044b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000498 	.word	0x20000498

080044c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ce:	4b43      	ldr	r3, [pc, #268]	@ (80045dc <xTaskResumeAll+0x11c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <xTaskResumeAll+0x32>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	b672      	cpsid	i
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	b662      	cpsie	i
 80044ea:	603b      	str	r3, [r7, #0]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044f2:	f000 ff0b 	bl	800530c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044f6:	4b39      	ldr	r3, [pc, #228]	@ (80045dc <xTaskResumeAll+0x11c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	4a37      	ldr	r2, [pc, #220]	@ (80045dc <xTaskResumeAll+0x11c>)
 80044fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004500:	4b36      	ldr	r3, [pc, #216]	@ (80045dc <xTaskResumeAll+0x11c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d161      	bne.n	80045cc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004508:	4b35      	ldr	r3, [pc, #212]	@ (80045e0 <xTaskResumeAll+0x120>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05d      	beq.n	80045cc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004510:	e02e      	b.n	8004570 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004512:	4b34      	ldr	r3, [pc, #208]	@ (80045e4 <xTaskResumeAll+0x124>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3318      	adds	r3, #24
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff f933 	bl	800378a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3304      	adds	r3, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f92e 	bl	800378a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	2201      	movs	r2, #1
 8004534:	409a      	lsls	r2, r3
 8004536:	4b2c      	ldr	r3, [pc, #176]	@ (80045e8 <xTaskResumeAll+0x128>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	4a2a      	ldr	r2, [pc, #168]	@ (80045e8 <xTaskResumeAll+0x128>)
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4a27      	ldr	r2, [pc, #156]	@ (80045ec <xTaskResumeAll+0x12c>)
 800454e:	441a      	add	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f7ff f8ba 	bl	80036d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004560:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <xTaskResumeAll+0x130>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800456a:	4b22      	ldr	r3, [pc, #136]	@ (80045f4 <xTaskResumeAll+0x134>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004570:	4b1c      	ldr	r3, [pc, #112]	@ (80045e4 <xTaskResumeAll+0x124>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1cc      	bne.n	8004512 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800457e:	f000 fb51 	bl	8004c24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004582:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <xTaskResumeAll+0x138>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d010      	beq.n	80045b0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800458e:	f000 f85f 	bl	8004650 <xTaskIncrementTick>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004598:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <xTaskResumeAll+0x134>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f1      	bne.n	800458e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80045aa:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <xTaskResumeAll+0x138>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045b0:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <xTaskResumeAll+0x134>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <xTaskResumeAll+0x13c>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045cc:	f000 fed4 	bl	8005378 <vPortExitCritical>

	return xAlreadyYielded;
 80045d0:	68bb      	ldr	r3, [r7, #8]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000498 	.word	0x20000498
 80045e0:	20000470 	.word	0x20000470
 80045e4:	20000430 	.word	0x20000430
 80045e8:	20000478 	.word	0x20000478
 80045ec:	20000374 	.word	0x20000374
 80045f0:	20000370 	.word	0x20000370
 80045f4:	20000484 	.word	0x20000484
 80045f8:	20000480 	.word	0x20000480
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <pcTaskGetName+0x14>
 800460e:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <pcTaskGetName+0x4c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	e000      	b.n	8004616 <pcTaskGetName+0x16>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <pcTaskGetName+0x3a>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	b672      	cpsid	i
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	b662      	cpsie	i
 8004632:	60bb      	str	r3, [r7, #8]
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	e7fd      	b.n	8004636 <pcTaskGetName+0x36>
	return &( pxTCB->pcTaskName[ 0 ] );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3334      	adds	r3, #52	@ 0x34
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000370 	.word	0x20000370

08004650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465a:	4b50      	ldr	r3, [pc, #320]	@ (800479c <xTaskIncrementTick+0x14c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 808b 	bne.w	800477a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004664:	4b4e      	ldr	r3, [pc, #312]	@ (80047a0 <xTaskIncrementTick+0x150>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800466c:	4a4c      	ldr	r2, [pc, #304]	@ (80047a0 <xTaskIncrementTick+0x150>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d123      	bne.n	80046c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004678:	4b4a      	ldr	r3, [pc, #296]	@ (80047a4 <xTaskIncrementTick+0x154>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <xTaskIncrementTick+0x4e>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	b672      	cpsid	i
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	b662      	cpsie	i
 8004696:	603b      	str	r3, [r7, #0]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <xTaskIncrementTick+0x4a>
 800469e:	4b41      	ldr	r3, [pc, #260]	@ (80047a4 <xTaskIncrementTick+0x154>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	4b40      	ldr	r3, [pc, #256]	@ (80047a8 <xTaskIncrementTick+0x158>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3e      	ldr	r2, [pc, #248]	@ (80047a4 <xTaskIncrementTick+0x154>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	4a3e      	ldr	r2, [pc, #248]	@ (80047a8 <xTaskIncrementTick+0x158>)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b3e      	ldr	r3, [pc, #248]	@ (80047ac <xTaskIncrementTick+0x15c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a3c      	ldr	r2, [pc, #240]	@ (80047ac <xTaskIncrementTick+0x15c>)
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	f000 fab2 	bl	8004c24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046c0:	4b3b      	ldr	r3, [pc, #236]	@ (80047b0 <xTaskIncrementTick+0x160>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d348      	bcc.n	800475c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ca:	4b36      	ldr	r3, [pc, #216]	@ (80047a4 <xTaskIncrementTick+0x154>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d4:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <xTaskIncrementTick+0x160>)
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	601a      	str	r2, [r3, #0]
					break;
 80046dc:	e03e      	b.n	800475c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <xTaskIncrementTick+0x154>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d203      	bcs.n	80046fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046f6:	4a2e      	ldr	r2, [pc, #184]	@ (80047b0 <xTaskIncrementTick+0x160>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046fc:	e02e      	b.n	800475c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff f841 	bl	800378a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	3318      	adds	r3, #24
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff f838 	bl	800378a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	2201      	movs	r2, #1
 8004720:	409a      	lsls	r2, r3
 8004722:	4b24      	ldr	r3, [pc, #144]	@ (80047b4 <xTaskIncrementTick+0x164>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4313      	orrs	r3, r2
 8004728:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <xTaskIncrementTick+0x164>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <xTaskIncrementTick+0x168>)
 800473a:	441a      	add	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe ffc4 	bl	80036d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <xTaskIncrementTick+0x16c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	429a      	cmp	r2, r3
 8004754:	d3b9      	bcc.n	80046ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004756:	2301      	movs	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475a:	e7b6      	b.n	80046ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800475c:	4b17      	ldr	r3, [pc, #92]	@ (80047bc <xTaskIncrementTick+0x16c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	4915      	ldr	r1, [pc, #84]	@ (80047b8 <xTaskIncrementTick+0x168>)
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d907      	bls.n	8004784 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e004      	b.n	8004784 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800477a:	4b11      	ldr	r3, [pc, #68]	@ (80047c0 <xTaskIncrementTick+0x170>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3301      	adds	r3, #1
 8004780:	4a0f      	ldr	r2, [pc, #60]	@ (80047c0 <xTaskIncrementTick+0x170>)
 8004782:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004784:	4b0f      	ldr	r3, [pc, #60]	@ (80047c4 <xTaskIncrementTick+0x174>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004790:	697b      	ldr	r3, [r7, #20]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000498 	.word	0x20000498
 80047a0:	20000474 	.word	0x20000474
 80047a4:	20000428 	.word	0x20000428
 80047a8:	2000042c 	.word	0x2000042c
 80047ac:	20000488 	.word	0x20000488
 80047b0:	20000490 	.word	0x20000490
 80047b4:	20000478 	.word	0x20000478
 80047b8:	20000374 	.word	0x20000374
 80047bc:	20000370 	.word	0x20000370
 80047c0:	20000480 	.word	0x20000480
 80047c4:	20000484 	.word	0x20000484

080047c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ce:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <vTaskSwitchContext+0xa8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047d6:	4b27      	ldr	r3, [pc, #156]	@ (8004874 <vTaskSwitchContext+0xac>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047dc:	e042      	b.n	8004864 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80047de:	4b25      	ldr	r3, [pc, #148]	@ (8004874 <vTaskSwitchContext+0xac>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <vTaskSwitchContext+0xb0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f1c3 031f 	rsb	r3, r3, #31
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	4920      	ldr	r1, [pc, #128]	@ (800487c <vTaskSwitchContext+0xb4>)
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <vTaskSwitchContext+0x62>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	607b      	str	r3, [r7, #4]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <vTaskSwitchContext+0x5e>
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a11      	ldr	r2, [pc, #68]	@ (800487c <vTaskSwitchContext+0xb4>)
 8004836:	4413      	add	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	3308      	adds	r3, #8
 800484c:	429a      	cmp	r2, r3
 800484e:	d104      	bne.n	800485a <vTaskSwitchContext+0x92>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a07      	ldr	r2, [pc, #28]	@ (8004880 <vTaskSwitchContext+0xb8>)
 8004862:	6013      	str	r3, [r2, #0]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	20000498 	.word	0x20000498
 8004874:	20000484 	.word	0x20000484
 8004878:	20000478 	.word	0x20000478
 800487c:	20000374 	.word	0x20000374
 8004880:	20000370 	.word	0x20000370

08004884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004898:	b672      	cpsid	i
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	b662      	cpsie	i
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048b0:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <vTaskPlaceOnEventList+0x4c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fe ff2d 	bl	8003718 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048be:	2101      	movs	r1, #1
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	f000 fbad 	bl	8005020 <prvAddCurrentTaskToDelayedList>
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000370 	.word	0x20000370

080048d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	b672      	cpsid	i
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	b662      	cpsie	i
 80048fe:	60fb      	str	r3, [r7, #12]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3318      	adds	r3, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe ff3d 	bl	800378a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004910:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <xTaskRemoveFromEventList+0xb4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11c      	bne.n	8004952 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe ff34 	bl	800378a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	2201      	movs	r2, #1
 8004928:	409a      	lsls	r2, r3
 800492a:	4b18      	ldr	r3, [pc, #96]	@ (800498c <xTaskRemoveFromEventList+0xb8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	4a16      	ldr	r2, [pc, #88]	@ (800498c <xTaskRemoveFromEventList+0xb8>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <xTaskRemoveFromEventList+0xbc>)
 8004942:	441a      	add	r2, r3
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f7fe fec0 	bl	80036d0 <vListInsertEnd>
 8004950:	e005      	b.n	800495e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3318      	adds	r3, #24
 8004956:	4619      	mov	r1, r3
 8004958:	480e      	ldr	r0, [pc, #56]	@ (8004994 <xTaskRemoveFromEventList+0xc0>)
 800495a:	f7fe feb9 	bl	80036d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <xTaskRemoveFromEventList+0xc4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	429a      	cmp	r2, r3
 800496a:	d905      	bls.n	8004978 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004970:	4b0a      	ldr	r3, [pc, #40]	@ (800499c <xTaskRemoveFromEventList+0xc8>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e001      	b.n	800497c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800497c:	697b      	ldr	r3, [r7, #20]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000498 	.word	0x20000498
 800498c:	20000478 	.word	0x20000478
 8004990:	20000374 	.word	0x20000374
 8004994:	20000430 	.word	0x20000430
 8004998:	20000370 	.word	0x20000370
 800499c:	20000484 	.word	0x20000484

080049a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <vTaskInternalSetTimeOutState+0x24>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <vTaskInternalSetTimeOutState+0x28>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	20000488 	.word	0x20000488
 80049c8:	20000474 	.word	0x20000474

080049cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	b672      	cpsid	i
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	b662      	cpsie	i
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	b672      	cpsid	i
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	b662      	cpsie	i
 8004a12:	60fb      	str	r3, [r7, #12]
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004a1a:	f000 fc77 	bl	800530c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004a94 <xTaskCheckForTimeOut+0xc8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d102      	bne.n	8004a3e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e023      	b.n	8004a86 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b15      	ldr	r3, [pc, #84]	@ (8004a98 <xTaskCheckForTimeOut+0xcc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d007      	beq.n	8004a5a <xTaskCheckForTimeOut+0x8e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	e015      	b.n	8004a86 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d20b      	bcs.n	8004a7c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff95 	bl	80049a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e004      	b.n	8004a86 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a86:	f000 fc77 	bl	8005378 <vPortExitCritical>

	return xReturn;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000474 	.word	0x20000474
 8004a98:	20000488 	.word	0x20000488

08004a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <vTaskMissedYield+0x14>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000484 	.word	0x20000484

08004ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004abc:	f000 f852 	bl	8004b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <prvIdleTask+0x28>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d9f9      	bls.n	8004abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <prvIdleTask+0x2c>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ad8:	e7f0      	b.n	8004abc <prvIdleTask+0x8>
 8004ada:	bf00      	nop
 8004adc:	20000374 	.word	0x20000374
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e00c      	b.n	8004b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4a12      	ldr	r2, [pc, #72]	@ (8004b44 <prvInitialiseTaskLists+0x60>)
 8004afc:	4413      	add	r3, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe fdb9 	bl	8003676 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3301      	adds	r3, #1
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d9ef      	bls.n	8004af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b10:	480d      	ldr	r0, [pc, #52]	@ (8004b48 <prvInitialiseTaskLists+0x64>)
 8004b12:	f7fe fdb0 	bl	8003676 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b16:	480d      	ldr	r0, [pc, #52]	@ (8004b4c <prvInitialiseTaskLists+0x68>)
 8004b18:	f7fe fdad 	bl	8003676 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b1c:	480c      	ldr	r0, [pc, #48]	@ (8004b50 <prvInitialiseTaskLists+0x6c>)
 8004b1e:	f7fe fdaa 	bl	8003676 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b22:	480c      	ldr	r0, [pc, #48]	@ (8004b54 <prvInitialiseTaskLists+0x70>)
 8004b24:	f7fe fda7 	bl	8003676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b28:	480b      	ldr	r0, [pc, #44]	@ (8004b58 <prvInitialiseTaskLists+0x74>)
 8004b2a:	f7fe fda4 	bl	8003676 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <prvInitialiseTaskLists+0x78>)
 8004b30:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <prvInitialiseTaskLists+0x64>)
 8004b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b34:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <prvInitialiseTaskLists+0x7c>)
 8004b36:	4a05      	ldr	r2, [pc, #20]	@ (8004b4c <prvInitialiseTaskLists+0x68>)
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000374 	.word	0x20000374
 8004b48:	20000400 	.word	0x20000400
 8004b4c:	20000414 	.word	0x20000414
 8004b50:	20000430 	.word	0x20000430
 8004b54:	20000444 	.word	0x20000444
 8004b58:	2000045c 	.word	0x2000045c
 8004b5c:	20000428 	.word	0x20000428
 8004b60:	2000042c 	.word	0x2000042c

08004b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b6a:	e019      	b.n	8004ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b6c:	f000 fbce 	bl	800530c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b70:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <prvCheckTasksWaitingTermination+0x50>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fe04 	bl	800378a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <prvCheckTasksWaitingTermination+0x54>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb8 <prvCheckTasksWaitingTermination+0x54>)
 8004b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <prvCheckTasksWaitingTermination+0x58>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	4a0a      	ldr	r2, [pc, #40]	@ (8004bbc <prvCheckTasksWaitingTermination+0x58>)
 8004b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b96:	f000 fbef 	bl	8005378 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f810 	bl	8004bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <prvCheckTasksWaitingTermination+0x58>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e1      	bne.n	8004b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000444 	.word	0x20000444
 8004bb8:	20000470 	.word	0x20000470
 8004bbc:	20000458 	.word	0x20000458

08004bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d108      	bne.n	8004be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fd4e 	bl	8005678 <vPortFree>
				vPortFree( pxTCB );
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fd4b 	bl	8005678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004be2:	e01b      	b.n	8004c1c <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d103      	bne.n	8004bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fd42 	bl	8005678 <vPortFree>
	}
 8004bf4:	e012      	b.n	8004c1c <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d00d      	beq.n	8004c1c <prvDeleteTCB+0x5c>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c04:	b672      	cpsid	i
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	b662      	cpsie	i
 8004c14:	60fb      	str	r3, [r7, #12]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <prvDeleteTCB+0x58>
	}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <prvResetNextTaskUnblockTime+0x38>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <prvResetNextTaskUnblockTime+0x3c>)
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c3c:	e008      	b.n	8004c50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <prvResetNextTaskUnblockTime+0x38>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a04      	ldr	r2, [pc, #16]	@ (8004c60 <prvResetNextTaskUnblockTime+0x3c>)
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20000428 	.word	0x20000428
 8004c60:	20000490 	.word	0x20000490

08004c64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <xTaskGetSchedulerState+0x34>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c72:	2301      	movs	r3, #1
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	e008      	b.n	8004c8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c78:	4b08      	ldr	r3, [pc, #32]	@ (8004c9c <xTaskGetSchedulerState+0x38>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c80:	2302      	movs	r3, #2
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	e001      	b.n	8004c8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c8a:	687b      	ldr	r3, [r7, #4]
	}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	2000047c 	.word	0x2000047c
 8004c9c:	20000498 	.word	0x20000498

08004ca0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d069      	beq.n	8004d8a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <xTaskPriorityInherit+0xf4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d259      	bcs.n	8004d78 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db06      	blt.n	8004cda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ccc:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <xTaskPriorityInherit+0xf4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	f1c3 0207 	rsb	r2, r3, #7
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6959      	ldr	r1, [r3, #20]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <xTaskPriorityInherit+0xf8>)
 8004cec:	4413      	add	r3, r2
 8004cee:	4299      	cmp	r1, r3
 8004cf0:	d13a      	bne.n	8004d68 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fd47 	bl	800378a <uxListRemove>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d06:	4924      	ldr	r1, [pc, #144]	@ (8004d98 <xTaskPriorityInherit+0xf8>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTaskPriorityInherit+0x8e>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43da      	mvns	r2, r3
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <xTaskPriorityInherit+0xfc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <xTaskPriorityInherit+0xfc>)
 8004d2c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <xTaskPriorityInherit+0xf4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	4b16      	ldr	r3, [pc, #88]	@ (8004d9c <xTaskPriorityInherit+0xfc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	4a15      	ldr	r2, [pc, #84]	@ (8004d9c <xTaskPriorityInherit+0xfc>)
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4a10      	ldr	r2, [pc, #64]	@ (8004d98 <xTaskPriorityInherit+0xf8>)
 8004d58:	441a      	add	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fe fcb5 	bl	80036d0 <vListInsertEnd>
 8004d66:	e004      	b.n	8004d72 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <xTaskPriorityInherit+0xf4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e008      	b.n	8004d8a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d7c:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <xTaskPriorityInherit+0xf4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d201      	bcs.n	8004d8a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000370 	.word	0x20000370
 8004d98:	20000374 	.word	0x20000374
 8004d9c:	20000478 	.word	0x20000478

08004da0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d074      	beq.n	8004ea0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004db6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eac <xTaskPriorityDisinherit+0x10c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d00d      	beq.n	8004ddc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	b672      	cpsid	i
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	b662      	cpsie	i
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	b672      	cpsid	i
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	b662      	cpsie	i
 8004df8:	60bb      	str	r3, [r7, #8]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e04:	1e5a      	subs	r2, r3, #1
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d044      	beq.n	8004ea0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d140      	bne.n	8004ea0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fcb1 	bl	800378a <uxListRemove>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d115      	bne.n	8004e5a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e32:	491f      	ldr	r1, [pc, #124]	@ (8004eb0 <xTaskPriorityDisinherit+0x110>)
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <xTaskPriorityDisinherit+0xba>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	2201      	movs	r2, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <xTaskPriorityDisinherit+0x114>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4013      	ands	r3, r2
 8004e56:	4a17      	ldr	r2, [pc, #92]	@ (8004eb4 <xTaskPriorityDisinherit+0x114>)
 8004e58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	f1c3 0207 	rsb	r2, r3, #7
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	2201      	movs	r2, #1
 8004e74:	409a      	lsls	r2, r3
 8004e76:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <xTaskPriorityDisinherit+0x114>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb4 <xTaskPriorityDisinherit+0x114>)
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <xTaskPriorityDisinherit+0x110>)
 8004e8e:	441a      	add	r2, r3
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7fe fc1a 	bl	80036d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ea0:	697b      	ldr	r3, [r7, #20]
	}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000370 	.word	0x20000370
 8004eb0:	20000374 	.word	0x20000374
 8004eb4:	20000478 	.word	0x20000478

08004eb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8089 	beq.w	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10d      	bne.n	8004ef6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	b672      	cpsid	i
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	b662      	cpsie	i
 8004eee:	60fb      	str	r3, [r7, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e002      	b.n	8004f0c <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d066      	beq.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d161      	bne.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f20:	4b32      	ldr	r3, [pc, #200]	@ (8004fec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10d      	bne.n	8004f46 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	b672      	cpsid	i
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	b662      	cpsie	i
 8004f3e:	60bb      	str	r3, [r7, #8]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db04      	blt.n	8004f64 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f1c3 0207 	rsb	r2, r3, #7
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	6959      	ldr	r1, [r3, #20]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f74:	4413      	add	r3, r2
 8004f76:	4299      	cmp	r1, r3
 8004f78:	d134      	bne.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fc03 	bl	800378a <uxListRemove>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d115      	bne.n	8004fb6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f8e:	4918      	ldr	r1, [pc, #96]	@ (8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43da      	mvns	r2, r3
 8004fac:	4b11      	ldr	r3, [pc, #68]	@ (8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	4a10      	ldr	r2, [pc, #64]	@ (8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004fb4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	2201      	movs	r2, #1
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4a06      	ldr	r2, [pc, #24]	@ (8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004fd6:	441a      	add	r2, r3
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fe fb76 	bl	80036d0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fe4:	bf00      	nop
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	20000370 	.word	0x20000370
 8004ff0:	20000374 	.word	0x20000374
 8004ff4:	20000478 	.word	0x20000478

08004ff8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <pvTaskIncrementMutexHeldCount+0x24>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <pvTaskIncrementMutexHeldCount+0x24>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800500a:	3201      	adds	r2, #1
 800500c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800500e:	4b03      	ldr	r3, [pc, #12]	@ (800501c <pvTaskIncrementMutexHeldCount+0x24>)
 8005010:	681b      	ldr	r3, [r3, #0]
	}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	20000370 	.word	0x20000370

08005020 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800502a:	4b29      	ldr	r3, [pc, #164]	@ (80050d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005030:	4b28      	ldr	r3, [pc, #160]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3304      	adds	r3, #4
 8005036:	4618      	mov	r0, r3
 8005038:	f7fe fba7 	bl	800378a <uxListRemove>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	2201      	movs	r2, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43da      	mvns	r2, r3
 8005050:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4013      	ands	r3, r2
 8005056:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005058:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d10a      	bne.n	8005078 <prvAddCurrentTaskToDelayedList+0x58>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005068:	4b1a      	ldr	r3, [pc, #104]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	481a      	ldr	r0, [pc, #104]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005072:	f7fe fb2d 	bl	80036d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005076:	e026      	b.n	80050c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005080:	4b14      	ldr	r3, [pc, #80]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d209      	bcs.n	80050a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005090:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3304      	adds	r3, #4
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f7fe fb3b 	bl	8003718 <vListInsert>
}
 80050a2:	e010      	b.n	80050c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a4:	4b0f      	ldr	r3, [pc, #60]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f7fe fb31 	bl	8003718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d202      	bcs.n	80050c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80050c0:	4a09      	ldr	r2, [pc, #36]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6013      	str	r3, [r2, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000474 	.word	0x20000474
 80050d4:	20000370 	.word	0x20000370
 80050d8:	20000478 	.word	0x20000478
 80050dc:	2000045c 	.word	0x2000045c
 80050e0:	2000042c 	.word	0x2000042c
 80050e4:	20000428 	.word	0x20000428
 80050e8:	20000490 	.word	0x20000490

080050ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3b04      	subs	r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b04      	subs	r3, #4
 800510a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f023 0201 	bic.w	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3b04      	subs	r3, #4
 800511a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800511c:	4a0c      	ldr	r2, [pc, #48]	@ (8005150 <pxPortInitialiseStack+0x64>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3b14      	subs	r3, #20
 8005126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f06f 0202 	mvn.w	r2, #2
 800513a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b20      	subs	r3, #32
 8005140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005142:	68fb      	ldr	r3, [r7, #12]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	08005155 	.word	0x08005155

08005154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800515e:	4b15      	ldr	r3, [pc, #84]	@ (80051b4 <prvTaskExitError+0x60>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d00d      	beq.n	8005184 <prvTaskExitError+0x30>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516c:	b672      	cpsid	i
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	b662      	cpsie	i
 800517c:	60fb      	str	r3, [r7, #12]
}
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <prvTaskExitError+0x2c>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	b672      	cpsid	i
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	b662      	cpsie	i
 8005198:	60bb      	str	r3, [r7, #8]
}
 800519a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800519c:	bf00      	nop
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0fc      	beq.n	800519e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2000000c 	.word	0x2000000c
	...

080051c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <pxCurrentTCBConst2>)
 80051c2:	6819      	ldr	r1, [r3, #0]
 80051c4:	6808      	ldr	r0, [r1, #0]
 80051c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	f380 8809 	msr	PSP, r0
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8811 	msr	BASEPRI, r0
 80051da:	4770      	bx	lr
 80051dc:	f3af 8000 	nop.w

080051e0 <pxCurrentTCBConst2>:
 80051e0:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051e8:	4808      	ldr	r0, [pc, #32]	@ (800520c <prvPortStartFirstTask+0x24>)
 80051ea:	6800      	ldr	r0, [r0, #0]
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f380 8808 	msr	MSP, r0
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8814 	msr	CONTROL, r0
 80051fa:	b662      	cpsie	i
 80051fc:	b661      	cpsie	f
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	df00      	svc	0
 8005208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800520a:	bf00      	nop
 800520c:	e000ed08 	.word	0xe000ed08

08005210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005216:	4b37      	ldr	r3, [pc, #220]	@ (80052f4 <xPortStartScheduler+0xe4>)
 8005218:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	22ff      	movs	r2, #255	@ 0xff
 8005226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4b2f      	ldr	r3, [pc, #188]	@ (80052f8 <xPortStartScheduler+0xe8>)
 800523c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800523e:	4b2f      	ldr	r3, [pc, #188]	@ (80052fc <xPortStartScheduler+0xec>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005244:	e009      	b.n	800525a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005246:	4b2d      	ldr	r3, [pc, #180]	@ (80052fc <xPortStartScheduler+0xec>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <xPortStartScheduler+0xec>)
 800524e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d0ef      	beq.n	8005246 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005266:	4b25      	ldr	r3, [pc, #148]	@ (80052fc <xPortStartScheduler+0xec>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1c3 0307 	rsb	r3, r3, #7
 800526e:	2b04      	cmp	r3, #4
 8005270:	d00d      	beq.n	800528e <xPortStartScheduler+0x7e>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005276:	b672      	cpsid	i
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	b662      	cpsie	i
 8005286:	60bb      	str	r3, [r7, #8]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800528e:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <xPortStartScheduler+0xec>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <xPortStartScheduler+0xec>)
 8005296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005298:	4b18      	ldr	r3, [pc, #96]	@ (80052fc <xPortStartScheduler+0xec>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a0:	4a16      	ldr	r2, [pc, #88]	@ (80052fc <xPortStartScheduler+0xec>)
 80052a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052ac:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <xPortStartScheduler+0xf0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a13      	ldr	r2, [pc, #76]	@ (8005300 <xPortStartScheduler+0xf0>)
 80052b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <xPortStartScheduler+0xf0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a10      	ldr	r2, [pc, #64]	@ (8005300 <xPortStartScheduler+0xf0>)
 80052be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052c4:	f000 f8dc 	bl	8005480 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <xPortStartScheduler+0xf4>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ce:	f000 f8fb 	bl	80054c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <xPortStartScheduler+0xf8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005308 <xPortStartScheduler+0xf8>)
 80052d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052de:	f7ff ff83 	bl	80051e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052e2:	f7ff fa71 	bl	80047c8 <vTaskSwitchContext>
	prvTaskExitError();
 80052e6:	f7ff ff35 	bl	8005154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	e000e400 	.word	0xe000e400
 80052f8:	2000049c 	.word	0x2000049c
 80052fc:	200004a0 	.word	0x200004a0
 8005300:	e000ed20 	.word	0xe000ed20
 8005304:	2000000c 	.word	0x2000000c
 8005308:	e000ef34 	.word	0xe000ef34

0800530c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	b672      	cpsid	i
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	b662      	cpsie	i
 8005326:	607b      	str	r3, [r7, #4]
}
 8005328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800532a:	4b11      	ldr	r3, [pc, #68]	@ (8005370 <vPortEnterCritical+0x64>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a0f      	ldr	r2, [pc, #60]	@ (8005370 <vPortEnterCritical+0x64>)
 8005332:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005334:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <vPortEnterCritical+0x64>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d112      	bne.n	8005362 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800533c:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <vPortEnterCritical+0x68>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <vPortEnterCritical+0x56>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	b672      	cpsid	i
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	b662      	cpsie	i
 800535a:	603b      	str	r3, [r7, #0]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <vPortEnterCritical+0x52>
	}
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	2000000c 	.word	0x2000000c
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800537e:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <vPortExitCritical+0x54>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <vPortExitCritical+0x2a>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538a:	b672      	cpsid	i
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	b662      	cpsie	i
 800539a:	607b      	str	r3, [r7, #4]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <vPortExitCritical+0x54>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <vPortExitCritical+0x54>)
 80053aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053ac:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <vPortExitCritical+0x54>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <vPortExitCritical+0x48>
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053d0:	f3ef 8009 	mrs	r0, PSP
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <pxCurrentTCBConst>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f01e 0f10 	tst.w	lr, #16
 80053e0:	bf08      	it	eq
 80053e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	6010      	str	r0, [r2, #0]
 80053ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053f4:	b672      	cpsid	i
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	b662      	cpsie	i
 8005404:	f7ff f9e0 	bl	80047c8 <vTaskSwitchContext>
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	f380 8811 	msr	BASEPRI, r0
 8005410:	bc09      	pop	{r0, r3}
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	6808      	ldr	r0, [r1, #0]
 8005416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	f01e 0f10 	tst.w	lr, #16
 800541e:	bf08      	it	eq
 8005420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005424:	f380 8809 	msr	PSP, r0
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop

08005430 <pxCurrentTCBConst>:
 8005430:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop

08005438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	b672      	cpsid	i
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	b662      	cpsie	i
 8005452:	607b      	str	r3, [r7, #4]
}
 8005454:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005456:	f7ff f8fb 	bl	8004650 <xTaskIncrementTick>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <xPortSysTickHandler+0x44>)
 8005462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f383 8811 	msr	BASEPRI, r3
}
 8005472:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <vPortSetupTimerInterrupt+0x34>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800548a:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <vPortSetupTimerInterrupt+0x38>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005490:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <vPortSetupTimerInterrupt+0x3c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <vPortSetupTimerInterrupt+0x40>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	099b      	lsrs	r3, r3, #6
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <vPortSetupTimerInterrupt+0x44>)
 800549e:	3b01      	subs	r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054a2:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <vPortSetupTimerInterrupt+0x34>)
 80054a4:	2207      	movs	r2, #7
 80054a6:	601a      	str	r2, [r3, #0]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000e010 	.word	0xe000e010
 80054b8:	e000e018 	.word	0xe000e018
 80054bc:	20000000 	.word	0x20000000
 80054c0:	10624dd3 	.word	0x10624dd3
 80054c4:	e000e014 	.word	0xe000e014

080054c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054d8 <vPortEnableVFP+0x10>
 80054cc:	6801      	ldr	r1, [r0, #0]
 80054ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054d2:	6001      	str	r1, [r0, #0]
 80054d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054d6:	bf00      	nop
 80054d8:	e000ed88 	.word	0xe000ed88

080054dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	@ 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054e8:	f7fe ffdc 	bl	80044a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054ec:	4b5d      	ldr	r3, [pc, #372]	@ (8005664 <pvPortMalloc+0x188>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f4:	f000 f920 	bl	8005738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054f8:	4b5b      	ldr	r3, [pc, #364]	@ (8005668 <pvPortMalloc+0x18c>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f040 8094 	bne.w	800562e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d020      	beq.n	800554e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800550c:	2208      	movs	r2, #8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	3308      	adds	r3, #8
 8005526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <pvPortMalloc+0x72>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	b672      	cpsid	i
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	b662      	cpsie	i
 8005546:	617b      	str	r3, [r7, #20]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d06c      	beq.n	800562e <pvPortMalloc+0x152>
 8005554:	4b45      	ldr	r3, [pc, #276]	@ (800566c <pvPortMalloc+0x190>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d867      	bhi.n	800562e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800555e:	4b44      	ldr	r3, [pc, #272]	@ (8005670 <pvPortMalloc+0x194>)
 8005560:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005562:	4b43      	ldr	r3, [pc, #268]	@ (8005670 <pvPortMalloc+0x194>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005568:	e004      	b.n	8005574 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d903      	bls.n	8005586 <pvPortMalloc+0xaa>
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f1      	bne.n	800556a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005586:	4b37      	ldr	r3, [pc, #220]	@ (8005664 <pvPortMalloc+0x188>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558c:	429a      	cmp	r2, r3
 800558e:	d04e      	beq.n	800562e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2208      	movs	r2, #8
 8005596:	4413      	add	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	2308      	movs	r3, #8
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d922      	bls.n	80055f8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00d      	beq.n	80055e0 <pvPortMalloc+0x104>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	b672      	cpsid	i
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	b662      	cpsie	i
 80055d8:	613b      	str	r3, [r7, #16]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055f2:	69b8      	ldr	r0, [r7, #24]
 80055f4:	f000 f902 	bl	80057fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055f8:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <pvPortMalloc+0x190>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <pvPortMalloc+0x190>)
 8005604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005606:	4b19      	ldr	r3, [pc, #100]	@ (800566c <pvPortMalloc+0x190>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b1a      	ldr	r3, [pc, #104]	@ (8005674 <pvPortMalloc+0x198>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d203      	bcs.n	800561a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005612:	4b16      	ldr	r3, [pc, #88]	@ (800566c <pvPortMalloc+0x190>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <pvPortMalloc+0x198>)
 8005618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4b12      	ldr	r3, [pc, #72]	@ (8005668 <pvPortMalloc+0x18c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	431a      	orrs	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800562e:	f7fe ff47 	bl	80044c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <pvPortMalloc+0x17c>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <pvPortMalloc+0x178>
	return pvReturn;
 8005658:	69fb      	ldr	r3, [r7, #28]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3728      	adds	r7, #40	@ 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	200040ac 	.word	0x200040ac
 8005668:	200040b8 	.word	0x200040b8
 800566c:	200040b0 	.word	0x200040b0
 8005670:	200040a4 	.word	0x200040a4
 8005674:	200040b4 	.word	0x200040b4

08005678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04e      	beq.n	8005728 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800568a:	2308      	movs	r3, #8
 800568c:	425b      	negs	r3, r3
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4413      	add	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4b24      	ldr	r3, [pc, #144]	@ (8005730 <vPortFree+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <vPortFree+0x4a>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	b672      	cpsid	i
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	b662      	cpsie	i
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <vPortFree+0x6e>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	b672      	cpsid	i
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	b662      	cpsie	i
 80056de:	60bb      	str	r3, [r7, #8]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <vPortFree+0xb8>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d019      	beq.n	8005728 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d115      	bne.n	8005728 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4b0b      	ldr	r3, [pc, #44]	@ (8005730 <vPortFree+0xb8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800570c:	f7fe feca 	bl	80044a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <vPortFree+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4413      	add	r3, r2
 800571a:	4a06      	ldr	r2, [pc, #24]	@ (8005734 <vPortFree+0xbc>)
 800571c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800571e:	6938      	ldr	r0, [r7, #16]
 8005720:	f000 f86c 	bl	80057fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005724:	f7fe fecc 	bl	80044c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	200040b8 	.word	0x200040b8
 8005734:	200040b0 	.word	0x200040b0

08005738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800573e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005744:	4b27      	ldr	r3, [pc, #156]	@ (80057e4 <prvHeapInit+0xac>)
 8005746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3307      	adds	r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a1f      	ldr	r2, [pc, #124]	@ (80057e4 <prvHeapInit+0xac>)
 8005768:	4413      	add	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005770:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <prvHeapInit+0xb0>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005776:	4b1c      	ldr	r3, [pc, #112]	@ (80057e8 <prvHeapInit+0xb0>)
 8005778:	2200      	movs	r2, #0
 800577a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005784:	2208      	movs	r2, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0307 	bic.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <prvHeapInit+0xb4>)
 8005798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800579a:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <prvHeapInit+0xb4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <prvHeapInit+0xb4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	1ad2      	subs	r2, r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <prvHeapInit+0xb4>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <prvHeapInit+0xb8>)
 80057c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4a09      	ldr	r2, [pc, #36]	@ (80057f4 <prvHeapInit+0xbc>)
 80057ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057d0:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <prvHeapInit+0xc0>)
 80057d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057d6:	601a      	str	r2, [r3, #0]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	200004a4 	.word	0x200004a4
 80057e8:	200040a4 	.word	0x200040a4
 80057ec:	200040ac 	.word	0x200040ac
 80057f0:	200040b4 	.word	0x200040b4
 80057f4:	200040b0 	.word	0x200040b0
 80057f8:	200040b8 	.word	0x200040b8

080057fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005804:	4b28      	ldr	r3, [pc, #160]	@ (80058a8 <prvInsertBlockIntoFreeList+0xac>)
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e002      	b.n	8005810 <prvInsertBlockIntoFreeList+0x14>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d8f7      	bhi.n	800580a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4413      	add	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d108      	bne.n	800583e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	441a      	add	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	441a      	add	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d118      	bne.n	8005884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b15      	ldr	r3, [pc, #84]	@ (80058ac <prvInsertBlockIntoFreeList+0xb0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d00d      	beq.n	800587a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e008      	b.n	800588c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800587a:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <prvInsertBlockIntoFreeList+0xb0>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e003      	b.n	800588c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d002      	beq.n	800589a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	200040a4 	.word	0x200040a4
 80058ac:	200040ac 	.word	0x200040ac

080058b0 <std>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	e9c0 3300 	strd	r3, r3, [r0]
 80058ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	8181      	strh	r1, [r0, #12]
 80058c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80058c4:	81c2      	strh	r2, [r0, #14]
 80058c6:	6183      	str	r3, [r0, #24]
 80058c8:	4619      	mov	r1, r3
 80058ca:	2208      	movs	r2, #8
 80058cc:	305c      	adds	r0, #92	@ 0x5c
 80058ce:	f000 f906 	bl	8005ade <memset>
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <std+0x58>)
 80058d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <std+0x5c>)
 80058d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x60>)
 80058dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x64>)
 80058e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x68>)
 80058e4:	6224      	str	r4, [r4, #32]
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d006      	beq.n	80058f8 <std+0x48>
 80058ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058ee:	4294      	cmp	r4, r2
 80058f0:	d002      	beq.n	80058f8 <std+0x48>
 80058f2:	33d0      	adds	r3, #208	@ 0xd0
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d105      	bne.n	8005904 <std+0x54>
 80058f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005900:	f000 b966 	b.w	8005bd0 <__retarget_lock_init_recursive>
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08005a59 	.word	0x08005a59
 800590c:	08005a7b 	.word	0x08005a7b
 8005910:	08005ab3 	.word	0x08005ab3
 8005914:	08005ad7 	.word	0x08005ad7
 8005918:	200040bc 	.word	0x200040bc

0800591c <stdio_exit_handler>:
 800591c:	4a02      	ldr	r2, [pc, #8]	@ (8005928 <stdio_exit_handler+0xc>)
 800591e:	4903      	ldr	r1, [pc, #12]	@ (800592c <stdio_exit_handler+0x10>)
 8005920:	4803      	ldr	r0, [pc, #12]	@ (8005930 <stdio_exit_handler+0x14>)
 8005922:	f000 b869 	b.w	80059f8 <_fwalk_sglue>
 8005926:	bf00      	nop
 8005928:	20000010 	.word	0x20000010
 800592c:	0800648d 	.word	0x0800648d
 8005930:	20000020 	.word	0x20000020

08005934 <cleanup_stdio>:
 8005934:	6841      	ldr	r1, [r0, #4]
 8005936:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <cleanup_stdio+0x34>)
 8005938:	4299      	cmp	r1, r3
 800593a:	b510      	push	{r4, lr}
 800593c:	4604      	mov	r4, r0
 800593e:	d001      	beq.n	8005944 <cleanup_stdio+0x10>
 8005940:	f000 fda4 	bl	800648c <_fflush_r>
 8005944:	68a1      	ldr	r1, [r4, #8]
 8005946:	4b09      	ldr	r3, [pc, #36]	@ (800596c <cleanup_stdio+0x38>)
 8005948:	4299      	cmp	r1, r3
 800594a:	d002      	beq.n	8005952 <cleanup_stdio+0x1e>
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fd9d 	bl	800648c <_fflush_r>
 8005952:	68e1      	ldr	r1, [r4, #12]
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <cleanup_stdio+0x3c>)
 8005956:	4299      	cmp	r1, r3
 8005958:	d004      	beq.n	8005964 <cleanup_stdio+0x30>
 800595a:	4620      	mov	r0, r4
 800595c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005960:	f000 bd94 	b.w	800648c <_fflush_r>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	200040bc 	.word	0x200040bc
 800596c:	20004124 	.word	0x20004124
 8005970:	2000418c 	.word	0x2000418c

08005974 <global_stdio_init.part.0>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <global_stdio_init.part.0+0x30>)
 8005978:	4c0b      	ldr	r4, [pc, #44]	@ (80059a8 <global_stdio_init.part.0+0x34>)
 800597a:	4a0c      	ldr	r2, [pc, #48]	@ (80059ac <global_stdio_init.part.0+0x38>)
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	4620      	mov	r0, r4
 8005980:	2200      	movs	r2, #0
 8005982:	2104      	movs	r1, #4
 8005984:	f7ff ff94 	bl	80058b0 <std>
 8005988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800598c:	2201      	movs	r2, #1
 800598e:	2109      	movs	r1, #9
 8005990:	f7ff ff8e 	bl	80058b0 <std>
 8005994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005998:	2202      	movs	r2, #2
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599e:	2112      	movs	r1, #18
 80059a0:	f7ff bf86 	b.w	80058b0 <std>
 80059a4:	200041f4 	.word	0x200041f4
 80059a8:	200040bc 	.word	0x200040bc
 80059ac:	0800591d 	.word	0x0800591d

080059b0 <__sfp_lock_acquire>:
 80059b0:	4801      	ldr	r0, [pc, #4]	@ (80059b8 <__sfp_lock_acquire+0x8>)
 80059b2:	f000 b90e 	b.w	8005bd2 <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	200041fd 	.word	0x200041fd

080059bc <__sfp_lock_release>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__sfp_lock_release+0x8>)
 80059be:	f000 b909 	b.w	8005bd4 <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	200041fd 	.word	0x200041fd

080059c8 <__sinit>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7ff fff0 	bl	80059b0 <__sfp_lock_acquire>
 80059d0:	6a23      	ldr	r3, [r4, #32]
 80059d2:	b11b      	cbz	r3, 80059dc <__sinit+0x14>
 80059d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d8:	f7ff bff0 	b.w	80059bc <__sfp_lock_release>
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <__sinit+0x28>)
 80059de:	6223      	str	r3, [r4, #32]
 80059e0:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <__sinit+0x2c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f5      	bne.n	80059d4 <__sinit+0xc>
 80059e8:	f7ff ffc4 	bl	8005974 <global_stdio_init.part.0>
 80059ec:	e7f2      	b.n	80059d4 <__sinit+0xc>
 80059ee:	bf00      	nop
 80059f0:	08005935 	.word	0x08005935
 80059f4:	200041f4 	.word	0x200041f4

080059f8 <_fwalk_sglue>:
 80059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	4607      	mov	r7, r0
 80059fe:	4688      	mov	r8, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	2600      	movs	r6, #0
 8005a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a08:	f1b9 0901 	subs.w	r9, r9, #1
 8005a0c:	d505      	bpl.n	8005a1a <_fwalk_sglue+0x22>
 8005a0e:	6824      	ldr	r4, [r4, #0]
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	d1f7      	bne.n	8005a04 <_fwalk_sglue+0xc>
 8005a14:	4630      	mov	r0, r6
 8005a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d907      	bls.n	8005a30 <_fwalk_sglue+0x38>
 8005a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a24:	3301      	adds	r3, #1
 8005a26:	d003      	beq.n	8005a30 <_fwalk_sglue+0x38>
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	4306      	orrs	r6, r0
 8005a30:	3568      	adds	r5, #104	@ 0x68
 8005a32:	e7e9      	b.n	8005a08 <_fwalk_sglue+0x10>

08005a34 <iprintf>:
 8005a34:	b40f      	push	{r0, r1, r2, r3}
 8005a36:	b507      	push	{r0, r1, r2, lr}
 8005a38:	4906      	ldr	r1, [pc, #24]	@ (8005a54 <iprintf+0x20>)
 8005a3a:	ab04      	add	r3, sp, #16
 8005a3c:	6808      	ldr	r0, [r1, #0]
 8005a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a42:	6881      	ldr	r1, [r0, #8]
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	f000 f9f7 	bl	8005e38 <_vfiprintf_r>
 8005a4a:	b003      	add	sp, #12
 8005a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a50:	b004      	add	sp, #16
 8005a52:	4770      	bx	lr
 8005a54:	2000001c 	.word	0x2000001c

08005a58 <__sread>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 f868 	bl	8005b34 <_read_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfab      	itete	ge
 8005a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a6c:	181b      	addge	r3, r3, r0
 8005a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a72:	bfac      	ite	ge
 8005a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a76:	81a3      	strhlt	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__swrite>:
 8005a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	461f      	mov	r7, r3
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	05db      	lsls	r3, r3, #23
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4616      	mov	r6, r2
 8005a8a:	d505      	bpl.n	8005a98 <__swrite+0x1e>
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	2302      	movs	r3, #2
 8005a92:	2200      	movs	r2, #0
 8005a94:	f000 f83c 	bl	8005b10 <_lseek_r>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	f000 b853 	b.w	8005b58 <_write_r>

08005ab2 <__sseek>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 f829 	bl	8005b10 <_lseek_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	bf15      	itete	ne
 8005ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ace:	81a3      	strheq	r3, [r4, #12]
 8005ad0:	bf18      	it	ne
 8005ad2:	81a3      	strhne	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__sclose>:
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 b809 	b.w	8005af0 <_close_r>

08005ade <memset>:
 8005ade:	4402      	add	r2, r0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <memset+0xa>
 8005ae6:	4770      	bx	lr
 8005ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aec:	e7f9      	b.n	8005ae2 <memset+0x4>
	...

08005af0 <_close_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4d06      	ldr	r5, [pc, #24]	@ (8005b0c <_close_r+0x1c>)
 8005af4:	2300      	movs	r3, #0
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	602b      	str	r3, [r5, #0]
 8005afc:	f7fb fb83 	bl	8001206 <_close>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_close_r+0x1a>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_close_r+0x1a>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	200041f8 	.word	0x200041f8

08005b10 <_lseek_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	@ (8005b30 <_lseek_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fb fb98 	bl	8001254 <_lseek>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_lseek_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_lseek_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	200041f8 	.word	0x200041f8

08005b34 <_read_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	@ (8005b54 <_read_r+0x20>)
 8005b38:	4604      	mov	r4, r0
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	602a      	str	r2, [r5, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f7fb fb26 	bl	8001194 <_read>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_read_r+0x1e>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_read_r+0x1e>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	200041f8 	.word	0x200041f8

08005b58 <_write_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	@ (8005b78 <_write_r+0x20>)
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	4608      	mov	r0, r1
 8005b60:	4611      	mov	r1, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	602a      	str	r2, [r5, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f7fb fb31 	bl	80011ce <_write>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_write_r+0x1e>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_write_r+0x1e>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	200041f8 	.word	0x200041f8

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	@ (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000001c 	.word	0x2000001c

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 fdc6 	bl	800672c <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	080067d0 	.word	0x080067d0
 8005bc4:	080067d0 	.word	0x080067d0
 8005bc8:	080067d0 	.word	0x080067d0
 8005bcc:	080067d4 	.word	0x080067d4

08005bd0 <__retarget_lock_init_recursive>:
 8005bd0:	4770      	bx	lr

08005bd2 <__retarget_lock_acquire_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <__retarget_lock_release_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <memcpy>:
 8005bd6:	440a      	add	r2, r1
 8005bd8:	4291      	cmp	r1, r2
 8005bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bde:	d100      	bne.n	8005be2 <memcpy+0xc>
 8005be0:	4770      	bx	lr
 8005be2:	b510      	push	{r4, lr}
 8005be4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bec:	4291      	cmp	r1, r2
 8005bee:	d1f9      	bne.n	8005be4 <memcpy+0xe>
 8005bf0:	bd10      	pop	{r4, pc}
	...

08005bf4 <_free_r>:
 8005bf4:	b538      	push	{r3, r4, r5, lr}
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d041      	beq.n	8005c80 <_free_r+0x8c>
 8005bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c00:	1f0c      	subs	r4, r1, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bfb8      	it	lt
 8005c06:	18e4      	addlt	r4, r4, r3
 8005c08:	f000 f8e0 	bl	8005dcc <__malloc_lock>
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <_free_r+0x90>)
 8005c0e:	6813      	ldr	r3, [r2, #0]
 8005c10:	b933      	cbnz	r3, 8005c20 <_free_r+0x2c>
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6014      	str	r4, [r2, #0]
 8005c16:	4628      	mov	r0, r5
 8005c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c1c:	f000 b8dc 	b.w	8005dd8 <__malloc_unlock>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d908      	bls.n	8005c36 <_free_r+0x42>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	1821      	adds	r1, r4, r0
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf01      	itttt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	1809      	addeq	r1, r1, r0
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	e7ed      	b.n	8005c12 <_free_r+0x1e>
 8005c36:	461a      	mov	r2, r3
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b10b      	cbz	r3, 8005c40 <_free_r+0x4c>
 8005c3c:	42a3      	cmp	r3, r4
 8005c3e:	d9fa      	bls.n	8005c36 <_free_r+0x42>
 8005c40:	6811      	ldr	r1, [r2, #0]
 8005c42:	1850      	adds	r0, r2, r1
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d10b      	bne.n	8005c60 <_free_r+0x6c>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	4401      	add	r1, r0
 8005c4c:	1850      	adds	r0, r2, r1
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	d1e0      	bne.n	8005c16 <_free_r+0x22>
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	4408      	add	r0, r1
 8005c5c:	6010      	str	r0, [r2, #0]
 8005c5e:	e7da      	b.n	8005c16 <_free_r+0x22>
 8005c60:	d902      	bls.n	8005c68 <_free_r+0x74>
 8005c62:	230c      	movs	r3, #12
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	e7d6      	b.n	8005c16 <_free_r+0x22>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	1821      	adds	r1, r4, r0
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf04      	itt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	bf04      	itt	eq
 8005c78:	1809      	addeq	r1, r1, r0
 8005c7a:	6021      	streq	r1, [r4, #0]
 8005c7c:	6054      	str	r4, [r2, #4]
 8005c7e:	e7ca      	b.n	8005c16 <_free_r+0x22>
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
 8005c82:	bf00      	nop
 8005c84:	20004204 	.word	0x20004204

08005c88 <sbrk_aligned>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005cc8 <sbrk_aligned+0x40>)
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	6831      	ldr	r1, [r6, #0]
 8005c90:	4605      	mov	r5, r0
 8005c92:	b911      	cbnz	r1, 8005c9a <sbrk_aligned+0x12>
 8005c94:	f000 fcb6 	bl	8006604 <_sbrk_r>
 8005c98:	6030      	str	r0, [r6, #0]
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fcb1 	bl	8006604 <_sbrk_r>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	d103      	bne.n	8005cae <sbrk_aligned+0x26>
 8005ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8005caa:	4620      	mov	r0, r4
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	1cc4      	adds	r4, r0, #3
 8005cb0:	f024 0403 	bic.w	r4, r4, #3
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d0f8      	beq.n	8005caa <sbrk_aligned+0x22>
 8005cb8:	1a21      	subs	r1, r4, r0
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fca2 	bl	8006604 <_sbrk_r>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1f2      	bne.n	8005caa <sbrk_aligned+0x22>
 8005cc4:	e7ef      	b.n	8005ca6 <sbrk_aligned+0x1e>
 8005cc6:	bf00      	nop
 8005cc8:	20004200 	.word	0x20004200

08005ccc <_malloc_r>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	1ccd      	adds	r5, r1, #3
 8005cd2:	f025 0503 	bic.w	r5, r5, #3
 8005cd6:	3508      	adds	r5, #8
 8005cd8:	2d0c      	cmp	r5, #12
 8005cda:	bf38      	it	cc
 8005cdc:	250c      	movcc	r5, #12
 8005cde:	2d00      	cmp	r5, #0
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	db01      	blt.n	8005ce8 <_malloc_r+0x1c>
 8005ce4:	42a9      	cmp	r1, r5
 8005ce6:	d904      	bls.n	8005cf2 <_malloc_r+0x26>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	2000      	movs	r0, #0
 8005cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dc8 <_malloc_r+0xfc>
 8005cf6:	f000 f869 	bl	8005dcc <__malloc_lock>
 8005cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfe:	461c      	mov	r4, r3
 8005d00:	bb44      	cbnz	r4, 8005d54 <_malloc_r+0x88>
 8005d02:	4629      	mov	r1, r5
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff ffbf 	bl	8005c88 <sbrk_aligned>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	d158      	bne.n	8005dc2 <_malloc_r+0xf6>
 8005d10:	f8d8 4000 	ldr.w	r4, [r8]
 8005d14:	4627      	mov	r7, r4
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d143      	bne.n	8005da2 <_malloc_r+0xd6>
 8005d1a:	2c00      	cmp	r4, #0
 8005d1c:	d04b      	beq.n	8005db6 <_malloc_r+0xea>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	4639      	mov	r1, r7
 8005d22:	4630      	mov	r0, r6
 8005d24:	eb04 0903 	add.w	r9, r4, r3
 8005d28:	f000 fc6c 	bl	8006604 <_sbrk_r>
 8005d2c:	4581      	cmp	r9, r0
 8005d2e:	d142      	bne.n	8005db6 <_malloc_r+0xea>
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	1a6d      	subs	r5, r5, r1
 8005d34:	4629      	mov	r1, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ffa6 	bl	8005c88 <sbrk_aligned>
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d03a      	beq.n	8005db6 <_malloc_r+0xea>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	442b      	add	r3, r5
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	bb62      	cbnz	r2, 8005da8 <_malloc_r+0xdc>
 8005d4e:	f8c8 7000 	str.w	r7, [r8]
 8005d52:	e00f      	b.n	8005d74 <_malloc_r+0xa8>
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	1b52      	subs	r2, r2, r5
 8005d58:	d420      	bmi.n	8005d9c <_malloc_r+0xd0>
 8005d5a:	2a0b      	cmp	r2, #11
 8005d5c:	d917      	bls.n	8005d8e <_malloc_r+0xc2>
 8005d5e:	1961      	adds	r1, r4, r5
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	6025      	str	r5, [r4, #0]
 8005d64:	bf18      	it	ne
 8005d66:	6059      	strne	r1, [r3, #4]
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	bf08      	it	eq
 8005d6c:	f8c8 1000 	streq.w	r1, [r8]
 8005d70:	5162      	str	r2, [r4, r5]
 8005d72:	604b      	str	r3, [r1, #4]
 8005d74:	4630      	mov	r0, r6
 8005d76:	f000 f82f 	bl	8005dd8 <__malloc_unlock>
 8005d7a:	f104 000b 	add.w	r0, r4, #11
 8005d7e:	1d23      	adds	r3, r4, #4
 8005d80:	f020 0007 	bic.w	r0, r0, #7
 8005d84:	1ac2      	subs	r2, r0, r3
 8005d86:	bf1c      	itt	ne
 8005d88:	1a1b      	subne	r3, r3, r0
 8005d8a:	50a3      	strne	r3, [r4, r2]
 8005d8c:	e7af      	b.n	8005cee <_malloc_r+0x22>
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	bf0c      	ite	eq
 8005d94:	f8c8 2000 	streq.w	r2, [r8]
 8005d98:	605a      	strne	r2, [r3, #4]
 8005d9a:	e7eb      	b.n	8005d74 <_malloc_r+0xa8>
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	6864      	ldr	r4, [r4, #4]
 8005da0:	e7ae      	b.n	8005d00 <_malloc_r+0x34>
 8005da2:	463c      	mov	r4, r7
 8005da4:	687f      	ldr	r7, [r7, #4]
 8005da6:	e7b6      	b.n	8005d16 <_malloc_r+0x4a>
 8005da8:	461a      	mov	r2, r3
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	d1fb      	bne.n	8005da8 <_malloc_r+0xdc>
 8005db0:	2300      	movs	r3, #0
 8005db2:	6053      	str	r3, [r2, #4]
 8005db4:	e7de      	b.n	8005d74 <_malloc_r+0xa8>
 8005db6:	230c      	movs	r3, #12
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f000 f80c 	bl	8005dd8 <__malloc_unlock>
 8005dc0:	e794      	b.n	8005cec <_malloc_r+0x20>
 8005dc2:	6005      	str	r5, [r0, #0]
 8005dc4:	e7d6      	b.n	8005d74 <_malloc_r+0xa8>
 8005dc6:	bf00      	nop
 8005dc8:	20004204 	.word	0x20004204

08005dcc <__malloc_lock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	@ (8005dd4 <__malloc_lock+0x8>)
 8005dce:	f7ff bf00 	b.w	8005bd2 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	200041fc 	.word	0x200041fc

08005dd8 <__malloc_unlock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__malloc_unlock+0x8>)
 8005dda:	f7ff befb 	b.w	8005bd4 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	200041fc 	.word	0x200041fc

08005de4 <__sfputc_r>:
 8005de4:	6893      	ldr	r3, [r2, #8]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	b410      	push	{r4}
 8005dec:	6093      	str	r3, [r2, #8]
 8005dee:	da08      	bge.n	8005e02 <__sfputc_r+0x1e>
 8005df0:	6994      	ldr	r4, [r2, #24]
 8005df2:	42a3      	cmp	r3, r4
 8005df4:	db01      	blt.n	8005dfa <__sfputc_r+0x16>
 8005df6:	290a      	cmp	r1, #10
 8005df8:	d103      	bne.n	8005e02 <__sfputc_r+0x1e>
 8005dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfe:	f000 bb6d 	b.w	80064dc <__swbuf_r>
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	1c58      	adds	r0, r3, #1
 8005e06:	6010      	str	r0, [r2, #0]
 8005e08:	7019      	strb	r1, [r3, #0]
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <__sfputs_r>:
 8005e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	18d5      	adds	r5, r2, r3
 8005e1c:	42ac      	cmp	r4, r5
 8005e1e:	d101      	bne.n	8005e24 <__sfputs_r+0x12>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e007      	b.n	8005e34 <__sfputs_r+0x22>
 8005e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e28:	463a      	mov	r2, r7
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffda 	bl	8005de4 <__sfputc_r>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d1f3      	bne.n	8005e1c <__sfputs_r+0xa>
 8005e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e38 <_vfiprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	460d      	mov	r5, r1
 8005e3e:	b09d      	sub	sp, #116	@ 0x74
 8005e40:	4614      	mov	r4, r2
 8005e42:	4698      	mov	r8, r3
 8005e44:	4606      	mov	r6, r0
 8005e46:	b118      	cbz	r0, 8005e50 <_vfiprintf_r+0x18>
 8005e48:	6a03      	ldr	r3, [r0, #32]
 8005e4a:	b90b      	cbnz	r3, 8005e50 <_vfiprintf_r+0x18>
 8005e4c:	f7ff fdbc 	bl	80059c8 <__sinit>
 8005e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x2a>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x2a>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e5e:	f7ff feb8 	bl	8005bd2 <__retarget_lock_acquire_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	071b      	lsls	r3, r3, #28
 8005e66:	d501      	bpl.n	8005e6c <_vfiprintf_r+0x34>
 8005e68:	692b      	ldr	r3, [r5, #16]
 8005e6a:	b99b      	cbnz	r3, 8005e94 <_vfiprintf_r+0x5c>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 fb72 	bl	8006558 <__swsetup_r>
 8005e74:	b170      	cbz	r0, 8005e94 <_vfiprintf_r+0x5c>
 8005e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e78:	07dc      	lsls	r4, r3, #31
 8005e7a:	d504      	bpl.n	8005e86 <_vfiprintf_r+0x4e>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	b01d      	add	sp, #116	@ 0x74
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	0598      	lsls	r0, r3, #22
 8005e8a:	d4f7      	bmi.n	8005e7c <_vfiprintf_r+0x44>
 8005e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e8e:	f7ff fea1 	bl	8005bd4 <__retarget_lock_release_recursive>
 8005e92:	e7f3      	b.n	8005e7c <_vfiprintf_r+0x44>
 8005e94:	2300      	movs	r3, #0
 8005e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea2:	2330      	movs	r3, #48	@ 0x30
 8005ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006054 <_vfiprintf_r+0x21c>
 8005ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eac:	f04f 0901 	mov.w	r9, #1
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	469a      	mov	sl, r3
 8005eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_vfiprintf_r+0x86>
 8005eba:	2a25      	cmp	r2, #37	@ 0x25
 8005ebc:	d1f9      	bne.n	8005eb2 <_vfiprintf_r+0x7a>
 8005ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec2:	d00b      	beq.n	8005edc <_vfiprintf_r+0xa4>
 8005ec4:	465b      	mov	r3, fp
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7ff ffa1 	bl	8005e12 <__sfputs_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f000 80a7 	beq.w	8006024 <_vfiprintf_r+0x1ec>
 8005ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed8:	445a      	add	r2, fp
 8005eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8005edc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 809f 	beq.w	8006024 <_vfiprintf_r+0x1ec>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef0:	f10a 0a01 	add.w	sl, sl, #1
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	9307      	str	r3, [sp, #28]
 8005ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005efe:	4654      	mov	r4, sl
 8005f00:	2205      	movs	r2, #5
 8005f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f06:	4853      	ldr	r0, [pc, #332]	@ (8006054 <_vfiprintf_r+0x21c>)
 8005f08:	f7fa f982 	bl	8000210 <memchr>
 8005f0c:	9a04      	ldr	r2, [sp, #16]
 8005f0e:	b9d8      	cbnz	r0, 8005f48 <_vfiprintf_r+0x110>
 8005f10:	06d1      	lsls	r1, r2, #27
 8005f12:	bf44      	itt	mi
 8005f14:	2320      	movmi	r3, #32
 8005f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f1a:	0713      	lsls	r3, r2, #28
 8005f1c:	bf44      	itt	mi
 8005f1e:	232b      	movmi	r3, #43	@ 0x2b
 8005f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f24:	f89a 3000 	ldrb.w	r3, [sl]
 8005f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f2a:	d015      	beq.n	8005f58 <_vfiprintf_r+0x120>
 8005f2c:	9a07      	ldr	r2, [sp, #28]
 8005f2e:	4654      	mov	r4, sl
 8005f30:	2000      	movs	r0, #0
 8005f32:	f04f 0c0a 	mov.w	ip, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3c:	3b30      	subs	r3, #48	@ 0x30
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d94b      	bls.n	8005fda <_vfiprintf_r+0x1a2>
 8005f42:	b1b0      	cbz	r0, 8005f72 <_vfiprintf_r+0x13a>
 8005f44:	9207      	str	r2, [sp, #28]
 8005f46:	e014      	b.n	8005f72 <_vfiprintf_r+0x13a>
 8005f48:	eba0 0308 	sub.w	r3, r0, r8
 8005f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	46a2      	mov	sl, r4
 8005f56:	e7d2      	b.n	8005efe <_vfiprintf_r+0xc6>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	1d19      	adds	r1, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	9103      	str	r1, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfbb      	ittet	lt
 8005f64:	425b      	neglt	r3, r3
 8005f66:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6a:	9307      	strge	r3, [sp, #28]
 8005f6c:	9307      	strlt	r3, [sp, #28]
 8005f6e:	bfb8      	it	lt
 8005f70:	9204      	strlt	r2, [sp, #16]
 8005f72:	7823      	ldrb	r3, [r4, #0]
 8005f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f76:	d10a      	bne.n	8005f8e <_vfiprintf_r+0x156>
 8005f78:	7863      	ldrb	r3, [r4, #1]
 8005f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f7c:	d132      	bne.n	8005fe4 <_vfiprintf_r+0x1ac>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9203      	str	r2, [sp, #12]
 8005f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006064 <_vfiprintf_r+0x22c>
 8005f92:	7821      	ldrb	r1, [r4, #0]
 8005f94:	2203      	movs	r2, #3
 8005f96:	4650      	mov	r0, sl
 8005f98:	f7fa f93a 	bl	8000210 <memchr>
 8005f9c:	b138      	cbz	r0, 8005fae <_vfiprintf_r+0x176>
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	eba0 000a 	sub.w	r0, r0, sl
 8005fa4:	2240      	movs	r2, #64	@ 0x40
 8005fa6:	4082      	lsls	r2, r0
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	3401      	adds	r4, #1
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4829      	ldr	r0, [pc, #164]	@ (8006058 <_vfiprintf_r+0x220>)
 8005fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fb8:	2206      	movs	r2, #6
 8005fba:	f7fa f929 	bl	8000210 <memchr>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d03f      	beq.n	8006042 <_vfiprintf_r+0x20a>
 8005fc2:	4b26      	ldr	r3, [pc, #152]	@ (800605c <_vfiprintf_r+0x224>)
 8005fc4:	bb1b      	cbnz	r3, 800600e <_vfiprintf_r+0x1d6>
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	3307      	adds	r3, #7
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	3308      	adds	r3, #8
 8005fd0:	9303      	str	r3, [sp, #12]
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	443b      	add	r3, r7
 8005fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd8:	e76a      	b.n	8005eb0 <_vfiprintf_r+0x78>
 8005fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fde:	460c      	mov	r4, r1
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	e7a8      	b.n	8005f36 <_vfiprintf_r+0xfe>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	3401      	adds	r4, #1
 8005fe8:	9305      	str	r3, [sp, #20]
 8005fea:	4619      	mov	r1, r3
 8005fec:	f04f 0c0a 	mov.w	ip, #10
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff6:	3a30      	subs	r2, #48	@ 0x30
 8005ff8:	2a09      	cmp	r2, #9
 8005ffa:	d903      	bls.n	8006004 <_vfiprintf_r+0x1cc>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0c6      	beq.n	8005f8e <_vfiprintf_r+0x156>
 8006000:	9105      	str	r1, [sp, #20]
 8006002:	e7c4      	b.n	8005f8e <_vfiprintf_r+0x156>
 8006004:	fb0c 2101 	mla	r1, ip, r1, r2
 8006008:	4604      	mov	r4, r0
 800600a:	2301      	movs	r3, #1
 800600c:	e7f0      	b.n	8005ff0 <_vfiprintf_r+0x1b8>
 800600e:	ab03      	add	r3, sp, #12
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	462a      	mov	r2, r5
 8006014:	4b12      	ldr	r3, [pc, #72]	@ (8006060 <_vfiprintf_r+0x228>)
 8006016:	a904      	add	r1, sp, #16
 8006018:	4630      	mov	r0, r6
 800601a:	f3af 8000 	nop.w
 800601e:	4607      	mov	r7, r0
 8006020:	1c78      	adds	r0, r7, #1
 8006022:	d1d6      	bne.n	8005fd2 <_vfiprintf_r+0x19a>
 8006024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006026:	07d9      	lsls	r1, r3, #31
 8006028:	d405      	bmi.n	8006036 <_vfiprintf_r+0x1fe>
 800602a:	89ab      	ldrh	r3, [r5, #12]
 800602c:	059a      	lsls	r2, r3, #22
 800602e:	d402      	bmi.n	8006036 <_vfiprintf_r+0x1fe>
 8006030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006032:	f7ff fdcf 	bl	8005bd4 <__retarget_lock_release_recursive>
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	065b      	lsls	r3, r3, #25
 800603a:	f53f af1f 	bmi.w	8005e7c <_vfiprintf_r+0x44>
 800603e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006040:	e71e      	b.n	8005e80 <_vfiprintf_r+0x48>
 8006042:	ab03      	add	r3, sp, #12
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	462a      	mov	r2, r5
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <_vfiprintf_r+0x228>)
 800604a:	a904      	add	r1, sp, #16
 800604c:	4630      	mov	r0, r6
 800604e:	f000 f879 	bl	8006144 <_printf_i>
 8006052:	e7e4      	b.n	800601e <_vfiprintf_r+0x1e6>
 8006054:	08006794 	.word	0x08006794
 8006058:	0800679e 	.word	0x0800679e
 800605c:	00000000 	.word	0x00000000
 8006060:	08005e13 	.word	0x08005e13
 8006064:	0800679a 	.word	0x0800679a

08006068 <_printf_common>:
 8006068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	4616      	mov	r6, r2
 800606e:	4698      	mov	r8, r3
 8006070:	688a      	ldr	r2, [r1, #8]
 8006072:	690b      	ldr	r3, [r1, #16]
 8006074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006078:	4293      	cmp	r3, r2
 800607a:	bfb8      	it	lt
 800607c:	4613      	movlt	r3, r2
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006084:	4607      	mov	r7, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b10a      	cbz	r2, 800608e <_printf_common+0x26>
 800608a:	3301      	adds	r3, #1
 800608c:	6033      	str	r3, [r6, #0]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	0699      	lsls	r1, r3, #26
 8006092:	bf42      	ittt	mi
 8006094:	6833      	ldrmi	r3, [r6, #0]
 8006096:	3302      	addmi	r3, #2
 8006098:	6033      	strmi	r3, [r6, #0]
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	f015 0506 	ands.w	r5, r5, #6
 80060a0:	d106      	bne.n	80060b0 <_printf_common+0x48>
 80060a2:	f104 0a19 	add.w	sl, r4, #25
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	6832      	ldr	r2, [r6, #0]
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	42ab      	cmp	r3, r5
 80060ae:	dc26      	bgt.n	80060fe <_printf_common+0x96>
 80060b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	3b00      	subs	r3, #0
 80060b8:	bf18      	it	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	0692      	lsls	r2, r2, #26
 80060be:	d42b      	bmi.n	8006118 <_printf_common+0xb0>
 80060c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d01e      	beq.n	800610c <_printf_common+0xa4>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6922      	ldr	r2, [r4, #16]
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf02      	ittt	eq
 80060da:	68e5      	ldreq	r5, [r4, #12]
 80060dc:	6833      	ldreq	r3, [r6, #0]
 80060de:	1aed      	subeq	r5, r5, r3
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	bf0c      	ite	eq
 80060e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e8:	2500      	movne	r5, #0
 80060ea:	4293      	cmp	r3, r2
 80060ec:	bfc4      	itt	gt
 80060ee:	1a9b      	subgt	r3, r3, r2
 80060f0:	18ed      	addgt	r5, r5, r3
 80060f2:	2600      	movs	r6, #0
 80060f4:	341a      	adds	r4, #26
 80060f6:	42b5      	cmp	r5, r6
 80060f8:	d11a      	bne.n	8006130 <_printf_common+0xc8>
 80060fa:	2000      	movs	r0, #0
 80060fc:	e008      	b.n	8006110 <_printf_common+0xa8>
 80060fe:	2301      	movs	r3, #1
 8006100:	4652      	mov	r2, sl
 8006102:	4641      	mov	r1, r8
 8006104:	4638      	mov	r0, r7
 8006106:	47c8      	blx	r9
 8006108:	3001      	adds	r0, #1
 800610a:	d103      	bne.n	8006114 <_printf_common+0xac>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006114:	3501      	adds	r5, #1
 8006116:	e7c6      	b.n	80060a6 <_printf_common+0x3e>
 8006118:	18e1      	adds	r1, r4, r3
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	2030      	movs	r0, #48	@ 0x30
 800611e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006122:	4422      	add	r2, r4
 8006124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800612c:	3302      	adds	r3, #2
 800612e:	e7c7      	b.n	80060c0 <_printf_common+0x58>
 8006130:	2301      	movs	r3, #1
 8006132:	4622      	mov	r2, r4
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d0e6      	beq.n	800610c <_printf_common+0xa4>
 800613e:	3601      	adds	r6, #1
 8006140:	e7d9      	b.n	80060f6 <_printf_common+0x8e>
	...

08006144 <_printf_i>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	7e0f      	ldrb	r7, [r1, #24]
 800614a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800614c:	2f78      	cmp	r7, #120	@ 0x78
 800614e:	4691      	mov	r9, r2
 8006150:	4680      	mov	r8, r0
 8006152:	460c      	mov	r4, r1
 8006154:	469a      	mov	sl, r3
 8006156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800615a:	d807      	bhi.n	800616c <_printf_i+0x28>
 800615c:	2f62      	cmp	r7, #98	@ 0x62
 800615e:	d80a      	bhi.n	8006176 <_printf_i+0x32>
 8006160:	2f00      	cmp	r7, #0
 8006162:	f000 80d2 	beq.w	800630a <_printf_i+0x1c6>
 8006166:	2f58      	cmp	r7, #88	@ 0x58
 8006168:	f000 80b9 	beq.w	80062de <_printf_i+0x19a>
 800616c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006174:	e03a      	b.n	80061ec <_printf_i+0xa8>
 8006176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800617a:	2b15      	cmp	r3, #21
 800617c:	d8f6      	bhi.n	800616c <_printf_i+0x28>
 800617e:	a101      	add	r1, pc, #4	@ (adr r1, 8006184 <_printf_i+0x40>)
 8006180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061f1 	.word	0x080061f1
 800618c:	0800616d 	.word	0x0800616d
 8006190:	0800616d 	.word	0x0800616d
 8006194:	0800616d 	.word	0x0800616d
 8006198:	0800616d 	.word	0x0800616d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800616d 	.word	0x0800616d
 80061a4:	0800616d 	.word	0x0800616d
 80061a8:	0800616d 	.word	0x0800616d
 80061ac:	0800616d 	.word	0x0800616d
 80061b0:	080062f1 	.word	0x080062f1
 80061b4:	0800621b 	.word	0x0800621b
 80061b8:	080062ab 	.word	0x080062ab
 80061bc:	0800616d 	.word	0x0800616d
 80061c0:	0800616d 	.word	0x0800616d
 80061c4:	08006313 	.word	0x08006313
 80061c8:	0800616d 	.word	0x0800616d
 80061cc:	0800621b 	.word	0x0800621b
 80061d0:	0800616d 	.word	0x0800616d
 80061d4:	0800616d 	.word	0x0800616d
 80061d8:	080062b3 	.word	0x080062b3
 80061dc:	6833      	ldr	r3, [r6, #0]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6032      	str	r2, [r6, #0]
 80061e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061ec:	2301      	movs	r3, #1
 80061ee:	e09d      	b.n	800632c <_printf_i+0x1e8>
 80061f0:	6833      	ldr	r3, [r6, #0]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	6031      	str	r1, [r6, #0]
 80061f8:	0606      	lsls	r6, r0, #24
 80061fa:	d501      	bpl.n	8006200 <_printf_i+0xbc>
 80061fc:	681d      	ldr	r5, [r3, #0]
 80061fe:	e003      	b.n	8006208 <_printf_i+0xc4>
 8006200:	0645      	lsls	r5, r0, #25
 8006202:	d5fb      	bpl.n	80061fc <_printf_i+0xb8>
 8006204:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006208:	2d00      	cmp	r5, #0
 800620a:	da03      	bge.n	8006214 <_printf_i+0xd0>
 800620c:	232d      	movs	r3, #45	@ 0x2d
 800620e:	426d      	negs	r5, r5
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006214:	4859      	ldr	r0, [pc, #356]	@ (800637c <_printf_i+0x238>)
 8006216:	230a      	movs	r3, #10
 8006218:	e011      	b.n	800623e <_printf_i+0xfa>
 800621a:	6821      	ldr	r1, [r4, #0]
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	0608      	lsls	r0, r1, #24
 8006220:	f853 5b04 	ldr.w	r5, [r3], #4
 8006224:	d402      	bmi.n	800622c <_printf_i+0xe8>
 8006226:	0649      	lsls	r1, r1, #25
 8006228:	bf48      	it	mi
 800622a:	b2ad      	uxthmi	r5, r5
 800622c:	2f6f      	cmp	r7, #111	@ 0x6f
 800622e:	4853      	ldr	r0, [pc, #332]	@ (800637c <_printf_i+0x238>)
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	bf14      	ite	ne
 8006234:	230a      	movne	r3, #10
 8006236:	2308      	moveq	r3, #8
 8006238:	2100      	movs	r1, #0
 800623a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800623e:	6866      	ldr	r6, [r4, #4]
 8006240:	60a6      	str	r6, [r4, #8]
 8006242:	2e00      	cmp	r6, #0
 8006244:	bfa2      	ittt	ge
 8006246:	6821      	ldrge	r1, [r4, #0]
 8006248:	f021 0104 	bicge.w	r1, r1, #4
 800624c:	6021      	strge	r1, [r4, #0]
 800624e:	b90d      	cbnz	r5, 8006254 <_printf_i+0x110>
 8006250:	2e00      	cmp	r6, #0
 8006252:	d04b      	beq.n	80062ec <_printf_i+0x1a8>
 8006254:	4616      	mov	r6, r2
 8006256:	fbb5 f1f3 	udiv	r1, r5, r3
 800625a:	fb03 5711 	mls	r7, r3, r1, r5
 800625e:	5dc7      	ldrb	r7, [r0, r7]
 8006260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006264:	462f      	mov	r7, r5
 8006266:	42bb      	cmp	r3, r7
 8006268:	460d      	mov	r5, r1
 800626a:	d9f4      	bls.n	8006256 <_printf_i+0x112>
 800626c:	2b08      	cmp	r3, #8
 800626e:	d10b      	bne.n	8006288 <_printf_i+0x144>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	07df      	lsls	r7, r3, #31
 8006274:	d508      	bpl.n	8006288 <_printf_i+0x144>
 8006276:	6923      	ldr	r3, [r4, #16]
 8006278:	6861      	ldr	r1, [r4, #4]
 800627a:	4299      	cmp	r1, r3
 800627c:	bfde      	ittt	le
 800627e:	2330      	movle	r3, #48	@ 0x30
 8006280:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006284:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006288:	1b92      	subs	r2, r2, r6
 800628a:	6122      	str	r2, [r4, #16]
 800628c:	f8cd a000 	str.w	sl, [sp]
 8006290:	464b      	mov	r3, r9
 8006292:	aa03      	add	r2, sp, #12
 8006294:	4621      	mov	r1, r4
 8006296:	4640      	mov	r0, r8
 8006298:	f7ff fee6 	bl	8006068 <_printf_common>
 800629c:	3001      	adds	r0, #1
 800629e:	d14a      	bne.n	8006336 <_printf_i+0x1f2>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	b004      	add	sp, #16
 80062a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	f043 0320 	orr.w	r3, r3, #32
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	4833      	ldr	r0, [pc, #204]	@ (8006380 <_printf_i+0x23c>)
 80062b4:	2778      	movs	r7, #120	@ 0x78
 80062b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	6831      	ldr	r1, [r6, #0]
 80062be:	061f      	lsls	r7, r3, #24
 80062c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80062c4:	d402      	bmi.n	80062cc <_printf_i+0x188>
 80062c6:	065f      	lsls	r7, r3, #25
 80062c8:	bf48      	it	mi
 80062ca:	b2ad      	uxthmi	r5, r5
 80062cc:	6031      	str	r1, [r6, #0]
 80062ce:	07d9      	lsls	r1, r3, #31
 80062d0:	bf44      	itt	mi
 80062d2:	f043 0320 	orrmi.w	r3, r3, #32
 80062d6:	6023      	strmi	r3, [r4, #0]
 80062d8:	b11d      	cbz	r5, 80062e2 <_printf_i+0x19e>
 80062da:	2310      	movs	r3, #16
 80062dc:	e7ac      	b.n	8006238 <_printf_i+0xf4>
 80062de:	4827      	ldr	r0, [pc, #156]	@ (800637c <_printf_i+0x238>)
 80062e0:	e7e9      	b.n	80062b6 <_printf_i+0x172>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f023 0320 	bic.w	r3, r3, #32
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	e7f6      	b.n	80062da <_printf_i+0x196>
 80062ec:	4616      	mov	r6, r2
 80062ee:	e7bd      	b.n	800626c <_printf_i+0x128>
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	6961      	ldr	r1, [r4, #20]
 80062f6:	1d18      	adds	r0, r3, #4
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	062e      	lsls	r6, r5, #24
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	d501      	bpl.n	8006304 <_printf_i+0x1c0>
 8006300:	6019      	str	r1, [r3, #0]
 8006302:	e002      	b.n	800630a <_printf_i+0x1c6>
 8006304:	0668      	lsls	r0, r5, #25
 8006306:	d5fb      	bpl.n	8006300 <_printf_i+0x1bc>
 8006308:	8019      	strh	r1, [r3, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	4616      	mov	r6, r2
 8006310:	e7bc      	b.n	800628c <_printf_i+0x148>
 8006312:	6833      	ldr	r3, [r6, #0]
 8006314:	1d1a      	adds	r2, r3, #4
 8006316:	6032      	str	r2, [r6, #0]
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	2100      	movs	r1, #0
 800631e:	4630      	mov	r0, r6
 8006320:	f7f9 ff76 	bl	8000210 <memchr>
 8006324:	b108      	cbz	r0, 800632a <_printf_i+0x1e6>
 8006326:	1b80      	subs	r0, r0, r6
 8006328:	6060      	str	r0, [r4, #4]
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	2300      	movs	r3, #0
 8006330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006334:	e7aa      	b.n	800628c <_printf_i+0x148>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	4632      	mov	r2, r6
 800633a:	4649      	mov	r1, r9
 800633c:	4640      	mov	r0, r8
 800633e:	47d0      	blx	sl
 8006340:	3001      	adds	r0, #1
 8006342:	d0ad      	beq.n	80062a0 <_printf_i+0x15c>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	079b      	lsls	r3, r3, #30
 8006348:	d413      	bmi.n	8006372 <_printf_i+0x22e>
 800634a:	68e0      	ldr	r0, [r4, #12]
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	4298      	cmp	r0, r3
 8006350:	bfb8      	it	lt
 8006352:	4618      	movlt	r0, r3
 8006354:	e7a6      	b.n	80062a4 <_printf_i+0x160>
 8006356:	2301      	movs	r3, #1
 8006358:	4632      	mov	r2, r6
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	47d0      	blx	sl
 8006360:	3001      	adds	r0, #1
 8006362:	d09d      	beq.n	80062a0 <_printf_i+0x15c>
 8006364:	3501      	adds	r5, #1
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	9903      	ldr	r1, [sp, #12]
 800636a:	1a5b      	subs	r3, r3, r1
 800636c:	42ab      	cmp	r3, r5
 800636e:	dcf2      	bgt.n	8006356 <_printf_i+0x212>
 8006370:	e7eb      	b.n	800634a <_printf_i+0x206>
 8006372:	2500      	movs	r5, #0
 8006374:	f104 0619 	add.w	r6, r4, #25
 8006378:	e7f5      	b.n	8006366 <_printf_i+0x222>
 800637a:	bf00      	nop
 800637c:	080067a5 	.word	0x080067a5
 8006380:	080067b6 	.word	0x080067b6

08006384 <__sflush_r>:
 8006384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	0716      	lsls	r6, r2, #28
 800638e:	4605      	mov	r5, r0
 8006390:	460c      	mov	r4, r1
 8006392:	d454      	bmi.n	800643e <__sflush_r+0xba>
 8006394:	684b      	ldr	r3, [r1, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	dc02      	bgt.n	80063a0 <__sflush_r+0x1c>
 800639a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd48      	ble.n	8006432 <__sflush_r+0xae>
 80063a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d045      	beq.n	8006432 <__sflush_r+0xae>
 80063a6:	2300      	movs	r3, #0
 80063a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063ac:	682f      	ldr	r7, [r5, #0]
 80063ae:	6a21      	ldr	r1, [r4, #32]
 80063b0:	602b      	str	r3, [r5, #0]
 80063b2:	d030      	beq.n	8006416 <__sflush_r+0x92>
 80063b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	0759      	lsls	r1, r3, #29
 80063ba:	d505      	bpl.n	80063c8 <__sflush_r+0x44>
 80063bc:	6863      	ldr	r3, [r4, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063c2:	b10b      	cbz	r3, 80063c8 <__sflush_r+0x44>
 80063c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b0      	blx	r6
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	d106      	bne.n	80063e6 <__sflush_r+0x62>
 80063d8:	6829      	ldr	r1, [r5, #0]
 80063da:	291d      	cmp	r1, #29
 80063dc:	d82b      	bhi.n	8006436 <__sflush_r+0xb2>
 80063de:	4a2a      	ldr	r2, [pc, #168]	@ (8006488 <__sflush_r+0x104>)
 80063e0:	410a      	asrs	r2, r1
 80063e2:	07d6      	lsls	r6, r2, #31
 80063e4:	d427      	bmi.n	8006436 <__sflush_r+0xb2>
 80063e6:	2200      	movs	r2, #0
 80063e8:	6062      	str	r2, [r4, #4]
 80063ea:	04d9      	lsls	r1, r3, #19
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	6022      	str	r2, [r4, #0]
 80063f0:	d504      	bpl.n	80063fc <__sflush_r+0x78>
 80063f2:	1c42      	adds	r2, r0, #1
 80063f4:	d101      	bne.n	80063fa <__sflush_r+0x76>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	b903      	cbnz	r3, 80063fc <__sflush_r+0x78>
 80063fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80063fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063fe:	602f      	str	r7, [r5, #0]
 8006400:	b1b9      	cbz	r1, 8006432 <__sflush_r+0xae>
 8006402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006406:	4299      	cmp	r1, r3
 8006408:	d002      	beq.n	8006410 <__sflush_r+0x8c>
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff fbf2 	bl	8005bf4 <_free_r>
 8006410:	2300      	movs	r3, #0
 8006412:	6363      	str	r3, [r4, #52]	@ 0x34
 8006414:	e00d      	b.n	8006432 <__sflush_r+0xae>
 8006416:	2301      	movs	r3, #1
 8006418:	4628      	mov	r0, r5
 800641a:	47b0      	blx	r6
 800641c:	4602      	mov	r2, r0
 800641e:	1c50      	adds	r0, r2, #1
 8006420:	d1c9      	bne.n	80063b6 <__sflush_r+0x32>
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0c6      	beq.n	80063b6 <__sflush_r+0x32>
 8006428:	2b1d      	cmp	r3, #29
 800642a:	d001      	beq.n	8006430 <__sflush_r+0xac>
 800642c:	2b16      	cmp	r3, #22
 800642e:	d11e      	bne.n	800646e <__sflush_r+0xea>
 8006430:	602f      	str	r7, [r5, #0]
 8006432:	2000      	movs	r0, #0
 8006434:	e022      	b.n	800647c <__sflush_r+0xf8>
 8006436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800643a:	b21b      	sxth	r3, r3
 800643c:	e01b      	b.n	8006476 <__sflush_r+0xf2>
 800643e:	690f      	ldr	r7, [r1, #16]
 8006440:	2f00      	cmp	r7, #0
 8006442:	d0f6      	beq.n	8006432 <__sflush_r+0xae>
 8006444:	0793      	lsls	r3, r2, #30
 8006446:	680e      	ldr	r6, [r1, #0]
 8006448:	bf08      	it	eq
 800644a:	694b      	ldreq	r3, [r1, #20]
 800644c:	600f      	str	r7, [r1, #0]
 800644e:	bf18      	it	ne
 8006450:	2300      	movne	r3, #0
 8006452:	eba6 0807 	sub.w	r8, r6, r7
 8006456:	608b      	str	r3, [r1, #8]
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	dde9      	ble.n	8006432 <__sflush_r+0xae>
 800645e:	6a21      	ldr	r1, [r4, #32]
 8006460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006462:	4643      	mov	r3, r8
 8006464:	463a      	mov	r2, r7
 8006466:	4628      	mov	r0, r5
 8006468:	47b0      	blx	r6
 800646a:	2800      	cmp	r0, #0
 800646c:	dc08      	bgt.n	8006480 <__sflush_r+0xfc>
 800646e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006476:	81a3      	strh	r3, [r4, #12]
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006480:	4407      	add	r7, r0
 8006482:	eba8 0800 	sub.w	r8, r8, r0
 8006486:	e7e7      	b.n	8006458 <__sflush_r+0xd4>
 8006488:	dfbffffe 	.word	0xdfbffffe

0800648c <_fflush_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	690b      	ldr	r3, [r1, #16]
 8006490:	4605      	mov	r5, r0
 8006492:	460c      	mov	r4, r1
 8006494:	b913      	cbnz	r3, 800649c <_fflush_r+0x10>
 8006496:	2500      	movs	r5, #0
 8006498:	4628      	mov	r0, r5
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	b118      	cbz	r0, 80064a6 <_fflush_r+0x1a>
 800649e:	6a03      	ldr	r3, [r0, #32]
 80064a0:	b90b      	cbnz	r3, 80064a6 <_fflush_r+0x1a>
 80064a2:	f7ff fa91 	bl	80059c8 <__sinit>
 80064a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f3      	beq.n	8006496 <_fflush_r+0xa>
 80064ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064b0:	07d0      	lsls	r0, r2, #31
 80064b2:	d404      	bmi.n	80064be <_fflush_r+0x32>
 80064b4:	0599      	lsls	r1, r3, #22
 80064b6:	d402      	bmi.n	80064be <_fflush_r+0x32>
 80064b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ba:	f7ff fb8a 	bl	8005bd2 <__retarget_lock_acquire_recursive>
 80064be:	4628      	mov	r0, r5
 80064c0:	4621      	mov	r1, r4
 80064c2:	f7ff ff5f 	bl	8006384 <__sflush_r>
 80064c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064c8:	07da      	lsls	r2, r3, #31
 80064ca:	4605      	mov	r5, r0
 80064cc:	d4e4      	bmi.n	8006498 <_fflush_r+0xc>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	059b      	lsls	r3, r3, #22
 80064d2:	d4e1      	bmi.n	8006498 <_fflush_r+0xc>
 80064d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064d6:	f7ff fb7d 	bl	8005bd4 <__retarget_lock_release_recursive>
 80064da:	e7dd      	b.n	8006498 <_fflush_r+0xc>

080064dc <__swbuf_r>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	460e      	mov	r6, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	4605      	mov	r5, r0
 80064e4:	b118      	cbz	r0, 80064ee <__swbuf_r+0x12>
 80064e6:	6a03      	ldr	r3, [r0, #32]
 80064e8:	b90b      	cbnz	r3, 80064ee <__swbuf_r+0x12>
 80064ea:	f7ff fa6d 	bl	80059c8 <__sinit>
 80064ee:	69a3      	ldr	r3, [r4, #24]
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	071a      	lsls	r2, r3, #28
 80064f6:	d501      	bpl.n	80064fc <__swbuf_r+0x20>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	b943      	cbnz	r3, 800650e <__swbuf_r+0x32>
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 f82a 	bl	8006558 <__swsetup_r>
 8006504:	b118      	cbz	r0, 800650e <__swbuf_r+0x32>
 8006506:	f04f 37ff 	mov.w	r7, #4294967295
 800650a:	4638      	mov	r0, r7
 800650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	6922      	ldr	r2, [r4, #16]
 8006512:	1a98      	subs	r0, r3, r2
 8006514:	6963      	ldr	r3, [r4, #20]
 8006516:	b2f6      	uxtb	r6, r6
 8006518:	4283      	cmp	r3, r0
 800651a:	4637      	mov	r7, r6
 800651c:	dc05      	bgt.n	800652a <__swbuf_r+0x4e>
 800651e:	4621      	mov	r1, r4
 8006520:	4628      	mov	r0, r5
 8006522:	f7ff ffb3 	bl	800648c <_fflush_r>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1ed      	bne.n	8006506 <__swbuf_r+0x2a>
 800652a:	68a3      	ldr	r3, [r4, #8]
 800652c:	3b01      	subs	r3, #1
 800652e:	60a3      	str	r3, [r4, #8]
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	701e      	strb	r6, [r3, #0]
 8006538:	6962      	ldr	r2, [r4, #20]
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	429a      	cmp	r2, r3
 800653e:	d004      	beq.n	800654a <__swbuf_r+0x6e>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	07db      	lsls	r3, r3, #31
 8006544:	d5e1      	bpl.n	800650a <__swbuf_r+0x2e>
 8006546:	2e0a      	cmp	r6, #10
 8006548:	d1df      	bne.n	800650a <__swbuf_r+0x2e>
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f7ff ff9d 	bl	800648c <_fflush_r>
 8006552:	2800      	cmp	r0, #0
 8006554:	d0d9      	beq.n	800650a <__swbuf_r+0x2e>
 8006556:	e7d6      	b.n	8006506 <__swbuf_r+0x2a>

08006558 <__swsetup_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4b29      	ldr	r3, [pc, #164]	@ (8006600 <__swsetup_r+0xa8>)
 800655c:	4605      	mov	r5, r0
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	460c      	mov	r4, r1
 8006562:	b118      	cbz	r0, 800656c <__swsetup_r+0x14>
 8006564:	6a03      	ldr	r3, [r0, #32]
 8006566:	b90b      	cbnz	r3, 800656c <__swsetup_r+0x14>
 8006568:	f7ff fa2e 	bl	80059c8 <__sinit>
 800656c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006570:	0719      	lsls	r1, r3, #28
 8006572:	d422      	bmi.n	80065ba <__swsetup_r+0x62>
 8006574:	06da      	lsls	r2, r3, #27
 8006576:	d407      	bmi.n	8006588 <__swsetup_r+0x30>
 8006578:	2209      	movs	r2, #9
 800657a:	602a      	str	r2, [r5, #0]
 800657c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006580:	81a3      	strh	r3, [r4, #12]
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	e033      	b.n	80065f0 <__swsetup_r+0x98>
 8006588:	0758      	lsls	r0, r3, #29
 800658a:	d512      	bpl.n	80065b2 <__swsetup_r+0x5a>
 800658c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800658e:	b141      	cbz	r1, 80065a2 <__swsetup_r+0x4a>
 8006590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006594:	4299      	cmp	r1, r3
 8006596:	d002      	beq.n	800659e <__swsetup_r+0x46>
 8006598:	4628      	mov	r0, r5
 800659a:	f7ff fb2b 	bl	8005bf4 <_free_r>
 800659e:	2300      	movs	r3, #0
 80065a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	2300      	movs	r3, #0
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f043 0308 	orr.w	r3, r3, #8
 80065b8:	81a3      	strh	r3, [r4, #12]
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	b94b      	cbnz	r3, 80065d2 <__swsetup_r+0x7a>
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c8:	d003      	beq.n	80065d2 <__swsetup_r+0x7a>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 f84f 	bl	8006670 <__smakebuf_r>
 80065d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d6:	f013 0201 	ands.w	r2, r3, #1
 80065da:	d00a      	beq.n	80065f2 <__swsetup_r+0x9a>
 80065dc:	2200      	movs	r2, #0
 80065de:	60a2      	str	r2, [r4, #8]
 80065e0:	6962      	ldr	r2, [r4, #20]
 80065e2:	4252      	negs	r2, r2
 80065e4:	61a2      	str	r2, [r4, #24]
 80065e6:	6922      	ldr	r2, [r4, #16]
 80065e8:	b942      	cbnz	r2, 80065fc <__swsetup_r+0xa4>
 80065ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065ee:	d1c5      	bne.n	800657c <__swsetup_r+0x24>
 80065f0:	bd38      	pop	{r3, r4, r5, pc}
 80065f2:	0799      	lsls	r1, r3, #30
 80065f4:	bf58      	it	pl
 80065f6:	6962      	ldrpl	r2, [r4, #20]
 80065f8:	60a2      	str	r2, [r4, #8]
 80065fa:	e7f4      	b.n	80065e6 <__swsetup_r+0x8e>
 80065fc:	2000      	movs	r0, #0
 80065fe:	e7f7      	b.n	80065f0 <__swsetup_r+0x98>
 8006600:	2000001c 	.word	0x2000001c

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	@ (8006620 <_sbrk_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fa fe2e 	bl	8001270 <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	200041f8 	.word	0x200041f8

08006624 <__swhatbuf_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	460c      	mov	r4, r1
 8006628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662c:	2900      	cmp	r1, #0
 800662e:	b096      	sub	sp, #88	@ 0x58
 8006630:	4615      	mov	r5, r2
 8006632:	461e      	mov	r6, r3
 8006634:	da0d      	bge.n	8006652 <__swhatbuf_r+0x2e>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800663c:	f04f 0100 	mov.w	r1, #0
 8006640:	bf14      	ite	ne
 8006642:	2340      	movne	r3, #64	@ 0x40
 8006644:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006648:	2000      	movs	r0, #0
 800664a:	6031      	str	r1, [r6, #0]
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	b016      	add	sp, #88	@ 0x58
 8006650:	bd70      	pop	{r4, r5, r6, pc}
 8006652:	466a      	mov	r2, sp
 8006654:	f000 f848 	bl	80066e8 <_fstat_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	dbec      	blt.n	8006636 <__swhatbuf_r+0x12>
 800665c:	9901      	ldr	r1, [sp, #4]
 800665e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006662:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006666:	4259      	negs	r1, r3
 8006668:	4159      	adcs	r1, r3
 800666a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800666e:	e7eb      	b.n	8006648 <__swhatbuf_r+0x24>

08006670 <__smakebuf_r>:
 8006670:	898b      	ldrh	r3, [r1, #12]
 8006672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006674:	079d      	lsls	r5, r3, #30
 8006676:	4606      	mov	r6, r0
 8006678:	460c      	mov	r4, r1
 800667a:	d507      	bpl.n	800668c <__smakebuf_r+0x1c>
 800667c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	2301      	movs	r3, #1
 8006686:	6163      	str	r3, [r4, #20]
 8006688:	b003      	add	sp, #12
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668c:	ab01      	add	r3, sp, #4
 800668e:	466a      	mov	r2, sp
 8006690:	f7ff ffc8 	bl	8006624 <__swhatbuf_r>
 8006694:	9f00      	ldr	r7, [sp, #0]
 8006696:	4605      	mov	r5, r0
 8006698:	4639      	mov	r1, r7
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff fb16 	bl	8005ccc <_malloc_r>
 80066a0:	b948      	cbnz	r0, 80066b6 <__smakebuf_r+0x46>
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	059a      	lsls	r2, r3, #22
 80066a8:	d4ee      	bmi.n	8006688 <__smakebuf_r+0x18>
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	f043 0302 	orr.w	r3, r3, #2
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	e7e2      	b.n	800667c <__smakebuf_r+0xc>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	6020      	str	r0, [r4, #0]
 80066ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066be:	81a3      	strh	r3, [r4, #12]
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066c6:	b15b      	cbz	r3, 80066e0 <__smakebuf_r+0x70>
 80066c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066cc:	4630      	mov	r0, r6
 80066ce:	f000 f81d 	bl	800670c <_isatty_r>
 80066d2:	b128      	cbz	r0, 80066e0 <__smakebuf_r+0x70>
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	431d      	orrs	r5, r3
 80066e4:	81a5      	strh	r5, [r4, #12]
 80066e6:	e7cf      	b.n	8006688 <__smakebuf_r+0x18>

080066e8 <_fstat_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	4d07      	ldr	r5, [pc, #28]	@ (8006708 <_fstat_r+0x20>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f7fa fd92 	bl	800121e <_fstat>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d102      	bne.n	8006704 <_fstat_r+0x1c>
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	b103      	cbz	r3, 8006704 <_fstat_r+0x1c>
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	200041f8 	.word	0x200041f8

0800670c <_isatty_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	@ (8006728 <_isatty_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa fd91 	bl	800123e <_isatty>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_isatty_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_isatty_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	200041f8 	.word	0x200041f8

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
