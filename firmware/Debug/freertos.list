
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800706c  0800706c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  0800706c  0800706c  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007074  08007074  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007074  08007074  00008074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007078  08007078  00008078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800707c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041b4  2000006c  080070e8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004220  080070e8  00009220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c2f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e52  00000000  00000000  00019ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001cb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa6  00000000  00000000  0001d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028607  00000000  00000000  0001e3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001227d  00000000  00000000  000469d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f26cf  00000000  00000000  00058c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f20  00000000  00000000  0014b364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d88 	.word	0x08006d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006d88 	.word	0x08006d88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <__NVIC_SystemReset+0x24>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005b2:	4904      	ldr	r1, [pc, #16]	@ (80005c4 <__NVIC_SystemReset+0x24>)
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <__NVIC_SystemReset+0x28>)
 80005b6:	4313      	orrs	r3, r2
 80005b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005ba:	f3bf 8f4f 	dsb	sy
}
 80005be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <__NVIC_SystemReset+0x20>
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	05fa0004 	.word	0x05fa0004

080005cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <vApplicationGetIdleTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	200000f8 	.word	0x200000f8

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b0b6      	sub	sp, #216	@ 0xd8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	  // Créer le sémaphore binaire
	  xSemaphore = xSemaphoreCreateBinary();
 8000606:	2203      	movs	r2, #3
 8000608:	2100      	movs	r1, #0
 800060a:	2001      	movs	r0, #1
 800060c:	f003 fb46 	bl	8003c9c <xQueueGenericCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a6e      	ldr	r2, [pc, #440]	@ (80007cc <MX_FREERTOS_Init+0x1cc>)
 8000614:	6013      	str	r3, [r2, #0]

	  if (xSemaphore != NULL)
 8000616:	4b6d      	ldr	r3, [pc, #436]	@ (80007cc <MX_FREERTOS_Init+0x1cc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d023      	beq.n	8000666 <MX_FREERTOS_Init+0x66>
	  {
	    // Création des deux nouvelles tâches
		  osThreadDef(TaskTAKE, SartTaskTakes, osPriorityHigh, 0, 128);
 800061e:	4b6c      	ldr	r3, [pc, #432]	@ (80007d0 <MX_FREERTOS_Init+0x1d0>)
 8000620:	f107 041c 	add.w	r4, r7, #28
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  TaskTAKEHandle = osThreadCreate(osThread(TaskTAKE), NULL);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f003 f9ae 	bl	800399a <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a64      	ldr	r2, [pc, #400]	@ (80007d4 <MX_FREERTOS_Init+0x1d4>)
 8000642:	6013      	str	r3, [r2, #0]

		  osThreadDef(TaskGIVE, StartTaskGive, osPriorityBelowNormal, 0, 128);
 8000644:	4b64      	ldr	r3, [pc, #400]	@ (80007d8 <MX_FREERTOS_Init+0x1d8>)
 8000646:	463c      	mov	r4, r7
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  TaskGIVEHandle = osThreadCreate(osThread(TaskGIVE), NULL);
 8000656:	463b      	mov	r3, r7
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f99d 	bl	800399a <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a5e      	ldr	r2, [pc, #376]	@ (80007dc <MX_FREERTOS_Init+0x1dc>)
 8000664:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	  myQueue = xQueueCreate(10, sizeof(uint32_t)); // 10 éléments de 4 octets
 8000666:	2200      	movs	r2, #0
 8000668:	2104      	movs	r1, #4
 800066a:	200a      	movs	r0, #10
 800066c:	f003 fb16 	bl	8003c9c <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a5b      	ldr	r2, [pc, #364]	@ (80007e0 <MX_FREERTOS_Init+0x1e0>)
 8000674:	6013      	str	r3, [r2, #0]

	  if (myQueue == NULL)
 8000676:	4b5a      	ldr	r3, [pc, #360]	@ (80007e0 <MX_FREERTOS_Init+0x1e0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d102      	bne.n	8000684 <MX_FREERTOS_Init+0x84>
	  {
	      printf("Erreur : Queue non créée !\r\n");
 800067e:	4859      	ldr	r0, [pc, #356]	@ (80007e4 <MX_FREERTOS_Init+0x1e4>)
 8000680:	f005 fd10 	bl	80060a4 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000684:	4b58      	ldr	r3, [pc, #352]	@ (80007e8 <MX_FREERTOS_Init+0x1e8>)
 8000686:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000698:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f97b 	bl	800399a <osThreadCreate>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a51      	ldr	r2, [pc, #324]	@ (80007ec <MX_FREERTOS_Init+0x1ec>)
 80006a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTASK */
  osThreadDef(LEDTASK, LEDtask, osPriorityNormal, 0, 128);
 80006aa:	4b51      	ldr	r3, [pc, #324]	@ (80007f0 <MX_FREERTOS_Init+0x1f0>)
 80006ac:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTASKHandle = osThreadCreate(osThread(LEDTASK), NULL);
 80006be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f968 	bl	800399a <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a49      	ldr	r2, [pc, #292]	@ (80007f4 <MX_FREERTOS_Init+0x1f4>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskGIVE */
  osThreadDef(TaskGIVE, StartTaskGive, osPriorityIdle, 0, 128);
 80006d0:	4b49      	ldr	r3, [pc, #292]	@ (80007f8 <MX_FREERTOS_Init+0x1f8>)
 80006d2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskGIVEHandle = osThreadCreate(osThread(TaskGIVE), NULL);
 80006e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f955 	bl	800399a <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a3a      	ldr	r2, [pc, #232]	@ (80007dc <MX_FREERTOS_Init+0x1dc>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTAKE */
  osThreadDef(TaskTAKE, SartTaskTakes, osPriorityIdle, 0, 128);
 80006f6:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <MX_FREERTOS_Init+0x1fc>)
 80006f8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTAKEHandle = osThreadCreate(osThread(TaskTAKE), NULL);
 800070a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f003 f942 	bl	800399a <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a2e      	ldr	r2, [pc, #184]	@ (80007d4 <MX_FREERTOS_Init+0x1d4>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask */
  osThreadDef(myTask, StartTask, osPriorityIdle, 0, 128);
 800071c:	4b38      	ldr	r3, [pc, #224]	@ (8000800 <MX_FREERTOS_Init+0x200>)
 800071e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskHandle = osThreadCreate(osThread(myTask), NULL);
 8000730:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 f92f 	bl	800399a <osThreadCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <MX_FREERTOS_Init+0x204>)
 8000740:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ret = xTaskCreate(task_bug, "Tache 1", STACK_SIZE, (void *) TASK1_DELAY, TASK1_PRIORITY, NULL);
 8000742:	2300      	movs	r3, #0
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2301      	movs	r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000750:	492d      	ldr	r1, [pc, #180]	@ (8000808 <MX_FREERTOS_Init+0x208>)
 8000752:	482e      	ldr	r0, [pc, #184]	@ (800080c <MX_FREERTOS_Init+0x20c>)
 8000754:	f003 ff9c 	bl	8004690 <xTaskCreate>
 8000758:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  configASSERT(pdPASS == ret);
 800075c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000760:	2b01      	cmp	r3, #1
 8000762:	d00e      	beq.n	8000782 <MX_FREERTOS_Init+0x182>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000768:	b672      	cpsid	i
 800076a:	f383 8811 	msr	BASEPRI, r3
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	b662      	cpsie	i
 8000778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <MX_FREERTOS_Init+0x17e>

  ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
 8000782:	2300      	movs	r3, #0
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000790:	491f      	ldr	r1, [pc, #124]	@ (8000810 <MX_FREERTOS_Init+0x210>)
 8000792:	481e      	ldr	r0, [pc, #120]	@ (800080c <MX_FREERTOS_Init+0x20c>)
 8000794:	f003 ff7c 	bl	8004690 <xTaskCreate>
 8000798:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  configASSERT(pdPASS == ret);
 800079c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d00e      	beq.n	80007c2 <MX_FREERTOS_Init+0x1c2>
	__asm volatile
 80007a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a8:	b672      	cpsid	i
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	b662      	cpsie	i
 80007b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	e7fd      	b.n	80007be <MX_FREERTOS_Init+0x1be>
  /* USER CODE END RTOS_THREADS */

}
 80007c2:	bf00      	nop
 80007c4:	37d0      	adds	r7, #208	@ 0xd0
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000088 	.word	0x20000088
 80007d0:	08006ddc 	.word	0x08006ddc
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	08006e04 	.word	0x08006e04
 80007dc:	20000098 	.word	0x20000098
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	08006da0 	.word	0x08006da0
 80007e8:	08006e2c 	.word	0x08006e2c
 80007ec:	20000090 	.word	0x20000090
 80007f0:	08006e50 	.word	0x08006e50
 80007f4:	20000094 	.word	0x20000094
 80007f8:	08006e6c 	.word	0x08006e6c
 80007fc:	08006e88 	.word	0x08006e88
 8000800:	08006eac 	.word	0x08006eac
 8000804:	200000a0 	.word	0x200000a0
 8000808:	08006dc0 	.word	0x08006dc0
 800080c:	08000931 	.word	0x08000931
 8000810:	08006dc8 	.word	0x08006dc8

08000814 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f003 f908 	bl	8003a32 <osDelay>
 8000822:	e7fb      	b.n	800081c <StartDefaultTask+0x8>

08000824 <LEDtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDtask */
void LEDtask(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDtask */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 800082c:	2102      	movs	r1, #2
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <LEDtask+0x20>)
 8000830:	f001 faa9 	bl	8001d86 <HAL_GPIO_TogglePin>
	    printf("LED toggled!\r\n");             // Message série (si printf bien redirigé)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <LEDtask+0x24>)
 8000836:	f005 fc35 	bl	80060a4 <puts>
	    vTaskDelay(100 / portTICK_PERIOD_MS);   // Attente de 100 ms
 800083a:	2064      	movs	r0, #100	@ 0x64
 800083c:	f004 f862 	bl	8004904 <vTaskDelay>
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // Clignoter PI1
 8000840:	bf00      	nop
 8000842:	e7f3      	b.n	800082c <LEDtask+0x8>
 8000844:	40022000 	.word	0x40022000
 8000848:	08006ec8 	.word	0x08006ec8

0800084c <StartTaskGive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGive */
void StartTaskGive(void const * argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t delayMs = 100;
 8000854:	2364      	movs	r3, #100	@ 0x64
 8000856:	60fb      	str	r3, [r7, #12]
  uint32_t timerValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
    timerValue = HAL_GetTick(); // récupère le temps système en ms
 800085c:	f000 ffb8 	bl	80017d0 <HAL_GetTick>
 8000860:	4603      	mov	r3, r0
 8000862:	60bb      	str	r3, [r7, #8]

    printf("taskGive : je vais envoyer %lu dans la queue\r\n", timerValue);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4619      	mov	r1, r3
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <StartTaskGive+0x54>)
 800086a:	f005 fbb3 	bl	8005fd4 <iprintf>

    if (xQueueSend(myQueue, &timerValue, 10 / portTICK_PERIOD_MS) != pdPASS)
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <StartTaskGive+0x58>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f107 0108 	add.w	r1, r7, #8
 8000876:	2300      	movs	r3, #0
 8000878:	220a      	movs	r2, #10
 800087a:	f003 fa71 	bl	8003d60 <xQueueGenericSend>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d002      	beq.n	800088a <StartTaskGive+0x3e>
    {
      printf("Erreur : envoi dans la queue échoué\r\n");
 8000884:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <StartTaskGive+0x5c>)
 8000886:	f005 fc0d 	bl	80060a4 <puts>
    }

    vTaskDelay(delayMs / portTICK_PERIOD_MS);
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	f004 f83a 	bl	8004904 <vTaskDelay>

    if (delayMs < 2000) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000896:	d2e1      	bcs.n	800085c <StartTaskGive+0x10>
      delayMs += 100;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3364      	adds	r3, #100	@ 0x64
 800089c:	60fb      	str	r3, [r7, #12]
    timerValue = HAL_GetTick(); // récupère le temps système en ms
 800089e:	e7dd      	b.n	800085c <StartTaskGive+0x10>
 80008a0:	08006ed8 	.word	0x08006ed8
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	08006f08 	.word	0x08006f08

080008ac <SartTaskTakes>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SartTaskTakes */
void SartTaskTakes(void const * argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t receivedValue = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    if (xQueueReceive(myQueue, &receivedValue, portMAX_DELAY) == pdTRUE)
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <SartTaskTakes+0x30>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f107 010c 	add.w	r1, r7, #12
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fb55 	bl	8003f74 <xQueueReceive>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d1f3      	bne.n	80008b8 <SartTaskTakes+0xc>
    {
      printf("taskTake : valeur reçue = %lu ms\r\n", receivedValue);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4619      	mov	r1, r3
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <SartTaskTakes+0x34>)
 80008d6:	f005 fb7d 	bl	8005fd4 <iprintf>
    if (xQueueReceive(myQueue, &receivedValue, portMAX_DELAY) == pdTRUE)
 80008da:	e7ed      	b.n	80008b8 <SartTaskTakes+0xc>
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	08006f30 	.word	0x08006f30

080008e4 <StartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask */
void StartTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  /* Infinite loop */
  for(;;)
  {
	    printf("taskTake : en attente du sémaphore (timeout 1s)...\r\n");
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <StartTask+0x3c>)
 80008ee:	f005 fbd9 	bl	80060a4 <puts>

	    // Timeout : 1000 ms
	    if (xSemaphoreTake(xSemaphore, 1000 / portTICK_PERIOD_MS) == pdTRUE)
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <StartTask+0x40>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fc22 	bl	8004144 <xQueueSemaphoreTake>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <StartTask+0x2a>
	    {
	      printf("taskTake : sémaphore pris avec succès\r\n");
 8000906:	4808      	ldr	r0, [pc, #32]	@ (8000928 <StartTask+0x44>)
 8000908:	f005 fbcc 	bl	80060a4 <puts>
 800090c:	e7ee      	b.n	80008ec <StartTask+0x8>
	    }
	    else
	    {
	      printf("ERREUR : sémaphore non reçu, reset du système !\r\n");
 800090e:	4807      	ldr	r0, [pc, #28]	@ (800092c <StartTask+0x48>)
 8000910:	f005 fbc8 	bl	80060a4 <puts>
	      HAL_Delay(100); // petit délai pour envoyer le message
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f000 ff67 	bl	80017e8 <HAL_Delay>
	      NVIC_SystemReset(); // 🔁 reset logiciel STM32
 800091a:	f7ff fe41 	bl	80005a0 <__NVIC_SystemReset>
 800091e:	bf00      	nop
 8000920:	08006f54 	.word	0x08006f54
 8000924:	20000088 	.word	0x20000088
 8000928:	08006f8c 	.word	0x08006f8c
 800092c:	08006fb8 	.word	0x08006fb8

08000930 <task_bug>:
  /* USER CODE END StartTask */
}

/* USER CODE END Header_task_bug */
void task_bug(void * pvParameters)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    TickType_t delay = (TickType_t) pvParameters;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	60fb      	str	r3, [r7, #12]

    for(;;)
    {
        printf("Je suis %s et je m'endors pour %lu ticks\r\n", pcTaskGetName(NULL), delay);
 800093c:	2000      	movs	r0, #0
 800093e:	f004 f92d 	bl	8004b9c <pcTaskGetName>
 8000942:	4603      	mov	r3, r0
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	4619      	mov	r1, r3
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <task_bug+0x28>)
 800094a:	f005 fb43 	bl	8005fd4 <iprintf>
        vTaskDelay(delay);
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f003 ffd8 	bl	8004904 <vTaskDelay>
        printf("Je suis %s et je m'endors pour %lu ticks\r\n", pcTaskGetName(NULL), delay);
 8000954:	bf00      	nop
 8000956:	e7f1      	b.n	800093c <task_bug+0xc>
 8000958:	08006fec 	.word	0x08006fec

0800095c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b090      	sub	sp, #64	@ 0x40
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	4bad      	ldr	r3, [pc, #692]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4aac      	ldr	r2, [pc, #688]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4baa      	ldr	r3, [pc, #680]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4ba7      	ldr	r3, [pc, #668]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4aa6      	ldr	r2, [pc, #664]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4ba4      	ldr	r3, [pc, #656]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4ba1      	ldr	r3, [pc, #644]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4aa0      	ldr	r2, [pc, #640]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b9e      	ldr	r3, [pc, #632]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b9b      	ldr	r3, [pc, #620]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a9a      	ldr	r2, [pc, #616]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b98      	ldr	r3, [pc, #608]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b95      	ldr	r3, [pc, #596]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a94      	ldr	r2, [pc, #592]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b92      	ldr	r3, [pc, #584]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b8f      	ldr	r3, [pc, #572]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a8e      	ldr	r2, [pc, #568]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b8c      	ldr	r3, [pc, #560]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a02:	4b89      	ldr	r3, [pc, #548]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a88      	ldr	r2, [pc, #544]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b86      	ldr	r3, [pc, #536]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a1a:	4b83      	ldr	r3, [pc, #524]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a82      	ldr	r2, [pc, #520]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b80      	ldr	r3, [pc, #512]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a32:	4b7d      	ldr	r3, [pc, #500]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a7c      	ldr	r2, [pc, #496]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	4b77      	ldr	r3, [pc, #476]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a76      	ldr	r2, [pc, #472]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b74      	ldr	r3, [pc, #464]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b71      	ldr	r3, [pc, #452]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a70      	ldr	r2, [pc, #448]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8000c28 <MX_GPIO_Init+0x2cc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	486b      	ldr	r0, [pc, #428]	@ (8000c2c <MX_GPIO_Init+0x2d0>)
 8000a80:	f001 f968 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000a8a:	4869      	ldr	r0, [pc, #420]	@ (8000c30 <MX_GPIO_Init+0x2d4>)
 8000a8c:	f001 f962 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2108      	movs	r1, #8
 8000a94:	4867      	ldr	r0, [pc, #412]	@ (8000c34 <MX_GPIO_Init+0x2d8>)
 8000a96:	f001 f95d 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa0:	4865      	ldr	r0, [pc, #404]	@ (8000c38 <MX_GPIO_Init+0x2dc>)
 8000aa2:	f001 f957 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	21c8      	movs	r1, #200	@ 0xc8
 8000aaa:	4864      	ldr	r0, [pc, #400]	@ (8000c3c <MX_GPIO_Init+0x2e0>)
 8000aac:	f001 f952 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	485d      	ldr	r0, [pc, #372]	@ (8000c40 <MX_GPIO_Init+0x2e4>)
 8000acc:	f000 ff96 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4857      	ldr	r0, [pc, #348]	@ (8000c40 <MX_GPIO_Init+0x2e4>)
 8000ae4:	f000 ff8a 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000af8:	2309      	movs	r3, #9
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	484f      	ldr	r0, [pc, #316]	@ (8000c40 <MX_GPIO_Init+0x2e4>)
 8000b04:	f000 ff7a 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b08:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b22:	4619      	mov	r1, r3
 8000b24:	4845      	ldr	r0, [pc, #276]	@ (8000c3c <MX_GPIO_Init+0x2e0>)
 8000b26:	f000 ff69 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000b2a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b44:	4619      	mov	r1, r3
 8000b46:	483e      	ldr	r0, [pc, #248]	@ (8000c40 <MX_GPIO_Init+0x2e4>)
 8000b48:	f000 ff58 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	4836      	ldr	r0, [pc, #216]	@ (8000c44 <MX_GPIO_Init+0x2e8>)
 8000b6a:	f000 ff47 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b6e:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b80:	230a      	movs	r3, #10
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	482e      	ldr	r0, [pc, #184]	@ (8000c44 <MX_GPIO_Init+0x2e8>)
 8000b8c:	f000 ff36 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b90:	2310      	movs	r3, #16
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <MX_GPIO_Init+0x2e8>)
 8000bac:	f000 ff26 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4818      	ldr	r0, [pc, #96]	@ (8000c2c <MX_GPIO_Init+0x2d0>)
 8000bcc:	f000 ff16 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000bd0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be2:	230c      	movs	r3, #12
 8000be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bea:	4619      	mov	r1, r3
 8000bec:	4816      	ldr	r0, [pc, #88]	@ (8000c48 <MX_GPIO_Init+0x2ec>)
 8000bee:	f000 ff05 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c04:	2301      	movs	r3, #1
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <MX_GPIO_Init+0x2f0>)
 8000c10:	f000 fef4 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000c14:	2360      	movs	r3, #96	@ 0x60
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c24:	230d      	movs	r3, #13
 8000c26:	e013      	b.n	8000c50 <MX_GPIO_Init+0x2f4>
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40022800 	.word	0x40022800
 8000c38:	40021c00 	.word	0x40021c00
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40020400 	.word	0x40020400
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	48bc      	ldr	r0, [pc, #752]	@ (8000f4c <MX_GPIO_Init+0x5f0>)
 8000c5a:	f000 fecf 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c5e:	2340      	movs	r3, #64	@ 0x40
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	48b5      	ldr	r0, [pc, #724]	@ (8000f50 <MX_GPIO_Init+0x5f4>)
 8000c7a:	f000 febf 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000c7e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c90:	230c      	movs	r3, #12
 8000c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	48ae      	ldr	r0, [pc, #696]	@ (8000f54 <MX_GPIO_Init+0x5f8>)
 8000c9c:	f000 feae 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ca0:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb2:	230e      	movs	r3, #14
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	48a6      	ldr	r0, [pc, #664]	@ (8000f58 <MX_GPIO_Init+0x5fc>)
 8000cbe:	f000 fe9d 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	48a0      	ldr	r0, [pc, #640]	@ (8000f58 <MX_GPIO_Init+0x5fc>)
 8000cd8:	f000 fe90 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ce4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	489a      	ldr	r0, [pc, #616]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000cf2:	f000 fe83 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000cf6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4892      	ldr	r0, [pc, #584]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000d14:	f000 fe72 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000d18:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	488a      	ldr	r0, [pc, #552]	@ (8000f60 <MX_GPIO_Init+0x604>)
 8000d36:	f000 fe61 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000d3a:	23f0      	movs	r3, #240	@ 0xf0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4883      	ldr	r0, [pc, #524]	@ (8000f64 <MX_GPIO_Init+0x608>)
 8000d56:	f000 fe51 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000d5a:	23f7      	movs	r3, #247	@ 0xf7
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d6a:	230e      	movs	r3, #14
 8000d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d72:	4619      	mov	r1, r3
 8000d74:	487c      	ldr	r0, [pc, #496]	@ (8000f68 <MX_GPIO_Init+0x60c>)
 8000d76:	f000 fe41 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	486f      	ldr	r0, [pc, #444]	@ (8000f54 <MX_GPIO_Init+0x5f8>)
 8000d98:	f000 fe30 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000dae:	230a      	movs	r3, #10
 8000db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4866      	ldr	r0, [pc, #408]	@ (8000f54 <MX_GPIO_Init+0x5f8>)
 8000dba:	f000 fe1f 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4861      	ldr	r0, [pc, #388]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000dd6:	f000 fe11 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dea:	230d      	movs	r3, #13
 8000dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df2:	4619      	mov	r1, r3
 8000df4:	4859      	ldr	r0, [pc, #356]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000df6:	f000 fe01 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000dfa:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4854      	ldr	r0, [pc, #336]	@ (8000f64 <MX_GPIO_Init+0x608>)
 8000e14:	f000 fdf2 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	484f      	ldr	r0, [pc, #316]	@ (8000f6c <MX_GPIO_Init+0x610>)
 8000e2e:	f000 fde5 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e32:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e44:	230c      	movs	r3, #12
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4848      	ldr	r0, [pc, #288]	@ (8000f70 <MX_GPIO_Init+0x614>)
 8000e50:	f000 fdd4 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000e54:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e66:	230e      	movs	r3, #14
 8000e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	483c      	ldr	r0, [pc, #240]	@ (8000f64 <MX_GPIO_Init+0x608>)
 8000e72:	f000 fdc3 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e76:	2308      	movs	r3, #8
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4836      	ldr	r0, [pc, #216]	@ (8000f68 <MX_GPIO_Init+0x60c>)
 8000e8e:	f000 fdb5 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000e92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea4:	230d      	movs	r3, #13
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4829      	ldr	r0, [pc, #164]	@ (8000f54 <MX_GPIO_Init+0x5f8>)
 8000eb0:	f000 fda4 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4825      	ldr	r0, [pc, #148]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000ec8:	f000 fd98 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000edc:	230c      	movs	r3, #12
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <MX_GPIO_Init+0x600>)
 8000ee8:	f000 fd88 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000eec:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	@ (8000f74 <MX_GPIO_Init+0x618>)
 8000f02:	f000 fd7b 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <MX_GPIO_Init+0x618>)
 8000f20:	f000 fd6c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f24:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f36:	230d      	movs	r3, #13
 8000f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	@ (8000f74 <MX_GPIO_Init+0x618>)
 8000f42:	f000 fd5b 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e016      	b.n	8000f78 <MX_GPIO_Init+0x61c>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40022400 	.word	0x40022400
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40022000 	.word	0x40022000
 8000f68:	40022800 	.word	0x40022800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021c00 	.word	0x40021c00
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	48a4      	ldr	r0, [pc, #656]	@ (8001224 <MX_GPIO_Init+0x8c8>)
 8000f92:	f000 fd33 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	489e      	ldr	r0, [pc, #632]	@ (8001224 <MX_GPIO_Init+0x8c8>)
 8000fac:	f000 fd26 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4896      	ldr	r0, [pc, #600]	@ (8001228 <MX_GPIO_Init+0x8cc>)
 8000fce:	f000 fd15 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	488e      	ldr	r0, [pc, #568]	@ (8001224 <MX_GPIO_Init+0x8c8>)
 8000fea:	f000 fd07 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000fee:	23c0      	movs	r3, #192	@ 0xc0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ffe:	2308      	movs	r3, #8
 8001000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001006:	4619      	mov	r1, r3
 8001008:	4888      	ldr	r0, [pc, #544]	@ (800122c <MX_GPIO_Init+0x8d0>)
 800100a:	f000 fcf7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800101e:	230a      	movs	r3, #10
 8001020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4881      	ldr	r0, [pc, #516]	@ (8001230 <MX_GPIO_Init+0x8d4>)
 800102a:	f000 fce7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800102e:	2328      	movs	r3, #40	@ 0x28
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800103e:	230c      	movs	r3, #12
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4879      	ldr	r0, [pc, #484]	@ (8001230 <MX_GPIO_Init+0x8d4>)
 800104a:	f000 fcd7 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800104e:	23c8      	movs	r3, #200	@ 0xc8
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	4873      	ldr	r0, [pc, #460]	@ (8001234 <MX_GPIO_Init+0x8d8>)
 8001066:	f000 fcc9 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800106a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	486e      	ldr	r0, [pc, #440]	@ (8001238 <MX_GPIO_Init+0x8dc>)
 8001080:	f000 fcbc 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001084:	2308      	movs	r3, #8
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001094:	230c      	movs	r3, #12
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	4863      	ldr	r0, [pc, #396]	@ (800122c <MX_GPIO_Init+0x8d0>)
 80010a0:	f000 fcac 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010a4:	2305      	movs	r3, #5
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010b4:	230a      	movs	r3, #10
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	485b      	ldr	r0, [pc, #364]	@ (800122c <MX_GPIO_Init+0x8d0>)
 80010c0:	f000 fc9c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010c4:	2332      	movs	r3, #50	@ 0x32
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d4:	230b      	movs	r3, #11
 80010d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4853      	ldr	r0, [pc, #332]	@ (800122c <MX_GPIO_Init+0x8d0>)
 80010e0:	f000 fc8c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010f4:	2309      	movs	r3, #9
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fc:	4619      	mov	r1, r3
 80010fe:	484f      	ldr	r0, [pc, #316]	@ (800123c <MX_GPIO_Init+0x8e0>)
 8001100:	f000 fc7c 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001104:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001116:	2309      	movs	r3, #9
 8001118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4847      	ldr	r0, [pc, #284]	@ (8001240 <MX_GPIO_Init+0x8e4>)
 8001122:	f000 fc6b 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001126:	2304      	movs	r3, #4
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001136:	4619      	mov	r1, r3
 8001138:	483e      	ldr	r0, [pc, #248]	@ (8001234 <MX_GPIO_Init+0x8d8>)
 800113a:	f000 fc5f 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 800113e:	2382      	movs	r3, #130	@ 0x82
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114e:	230b      	movs	r3, #11
 8001150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <MX_GPIO_Init+0x8cc>)
 800115a:	f000 fc4f 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800115e:	2301      	movs	r3, #1
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <MX_GPIO_Init+0x8cc>)
 8001172:	f000 fc43 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001176:	2350      	movs	r3, #80	@ 0x50
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001186:	230d      	movs	r3, #13
 8001188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	4825      	ldr	r0, [pc, #148]	@ (8001228 <MX_GPIO_Init+0x8cc>)
 8001192:	f000 fc33 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001196:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011a8:	2304      	movs	r3, #4
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b0:	4619      	mov	r1, r3
 80011b2:	481f      	ldr	r0, [pc, #124]	@ (8001230 <MX_GPIO_Init+0x8d4>)
 80011b4:	f000 fc22 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 80011b8:	2320      	movs	r3, #32
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011c8:	230a      	movs	r3, #10
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4815      	ldr	r0, [pc, #84]	@ (8001228 <MX_GPIO_Init+0x8cc>)
 80011d4:	f000 fc12 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80011d8:	2340      	movs	r3, #64	@ 0x40
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011e8:	2309      	movs	r3, #9
 80011ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f0:	4619      	mov	r1, r3
 80011f2:	480f      	ldr	r0, [pc, #60]	@ (8001230 <MX_GPIO_Init+0x8d4>)
 80011f4:	f000 fc02 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80011f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120a:	2305      	movs	r3, #5
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	@ (800123c <MX_GPIO_Init+0x8e0>)
 8001216:	f000 fbf1 	bl	80019fc <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3740      	adds	r7, #64	@ 0x40
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000
 8001228:	40020000 	.word	0x40020000
 800122c:	40020800 	.word	0x40020800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40021800 	.word	0x40021800
 8001238:	40021400 	.word	0x40021400
 800123c:	40020400 	.word	0x40020400
 8001240:	40020c00 	.word	0x40020c00

08001244 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1,
 800124c:	1d39      	adds	r1, r7, #4
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <__io_putchar+0x20>)
 8001256:	f001 fec9 	bl	8002fec <HAL_UART_Transmit>
	HAL_MAX_DELAY); return ch; }
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002fc 	.word	0x200002fc

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fa5f 	bl	800172e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f80a 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f7ff fb72 	bl	800095c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001278:	f000 f97e 	bl	8001578 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800127c:	f7ff f9c0 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001280:	f002 fb84 	bl	800398c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <main+0x1c>

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	@ 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f004 ffe4 	bl	8006264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <SystemClock_Config+0xd0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	4a29      	ldr	r2, [pc, #164]	@ (8001358 <SystemClock_Config+0xd0>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <SystemClock_Config+0xd0>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	4b25      	ldr	r3, [pc, #148]	@ (800135c <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a24      	ldr	r2, [pc, #144]	@ (800135c <SystemClock_Config+0xd4>)
 80012ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b22      	ldr	r3, [pc, #136]	@ (800135c <SystemClock_Config+0xd4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e4:	2310      	movs	r3, #16
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e8:	2302      	movs	r3, #2
 80012ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012f4:	23d8      	movs	r3, #216	@ 0xd8
 80012f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fda9 	bl	8001e5c <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001310:	f000 f826 	bl	8001360 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001314:	f000 fd52 	bl	8001dbc <HAL_PWREx_EnableOverDrive>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800131e:	f000 f81f 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2302      	movs	r3, #2
 8001328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800132e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001332:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2107      	movs	r1, #7
 8001340:	4618      	mov	r0, r3
 8001342:	f001 f82f 	bl	80023a4 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800134c:	f000 f808 	bl	8001360 <Error_Handler>
  }
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	@ 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a10      	ldr	r2, [pc, #64]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	210f      	movs	r1, #15
 80013a6:	f06f 0001 	mvn.w	r0, #1
 80013aa:	f000 fafe 	bl	80019aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f9d7 	bl	80017a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013fa:	f003 ff01 	bl	8005200 <xTaskGetSchedulerState>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b01      	cmp	r3, #1
 8001402:	d001      	beq.n	8001408 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001404:	f004 fae8 	bl	80059d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e00a      	b.n	8001434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141e:	f3af 8000 	nop.w
 8001422:	4601      	mov	r1, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	60ba      	str	r2, [r7, #8]
 800142a:	b2ca      	uxtb	r2, r1
 800142c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf0      	blt.n	800141e <_read+0x12>
  }

  return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e009      	b.n	800146c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	60ba      	str	r2, [r7, #8]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff feef 	bl	8001244 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbf1      	blt.n	8001458 <_write+0x12>
  }
  return len;
 8001474:	687b      	ldr	r3, [r7, #4]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_close>:

int _close(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a6:	605a      	str	r2, [r3, #4]
  return 0;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_isatty>:

int _isatty(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f004 fef2 	bl	8006300 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20050000 	.word	0x20050000
 8001548:	00000400 	.word	0x00000400
 800154c:	200002f8 	.word	0x200002f8
 8001550:	20004220 	.word	0x20004220

08001554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <MX_USART1_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001582:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART1_UART_Init+0x58>)
 80015bc:	f001 fcc8 	bl	8002f50 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f7ff fecb 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002fc 	.word	0x200002fc
 80015d4:	40011000 	.word	0x40011000

080015d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ac      	sub	sp, #176	@ 0xb0
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	2284      	movs	r2, #132	@ 0x84
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fe33 	bl	8006264 <memset>
  if(uartHandle->Instance==USART1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a32      	ldr	r2, [pc, #200]	@ (80016cc <HAL_UART_MspInit+0xf4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d15c      	bne.n	80016c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001608:	2340      	movs	r3, #64	@ 0x40
 800160a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160c:	2300      	movs	r3, #0
 800160e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4618      	mov	r0, r3
 8001616:	f001 f8ab 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001620:	f7ff fe9e 	bl	8001360 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001628:	4a29      	ldr	r2, [pc, #164]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6313      	str	r3, [r2, #48]	@ 0x30
 8001648:	4b21      	ldr	r3, [pc, #132]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <HAL_UART_MspInit+0xf8>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001684:	2307      	movs	r3, #7
 8001686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800168e:	4619      	mov	r1, r3
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <HAL_UART_MspInit+0xfc>)
 8001692:	f000 f9b3 	bl	80019fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800169a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016b0:	2307      	movs	r3, #7
 80016b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <HAL_UART_MspInit+0x100>)
 80016be:	f000 f99d 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	37b0      	adds	r7, #176	@ 0xb0
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020000 	.word	0x40020000

080016dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001714 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e0:	f7ff ff38 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800170a:	f004 fdff 	bl	800630c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170e:	f7ff fdab 	bl	8001268 <main>
  bx  lr    
 8001712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001720:	0800707c 	.word	0x0800707c
  ldr r2, =_sbss
 8001724:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001728:	20004220 	.word	0x20004220

0800172c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>

0800172e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f92e 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001738:	200f      	movs	r0, #15
 800173a:	f000 f805 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173e:	f7ff fe15 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f93b 	bl	80019e2 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f911 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000384 	.word	0x20000384

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000384 	.word	0x20000384

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <__NVIC_SetPriorityGrouping>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	05fa0000 	.word	0x05fa0000

08001878 <__NVIC_GetPriorityGrouping>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_SetPriority>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff47 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff5c 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffb0 	bl	8001950 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e175      	b.n	8001d08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8164 	bne.w	8001d02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x56>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80be 	beq.w	8001d02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a65      	ldr	r2, [pc, #404]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b63      	ldr	r3, [pc, #396]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b9e:	4a61      	ldr	r2, [pc, #388]	@ (8001d24 <HAL_GPIO_Init+0x328>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a58      	ldr	r2, [pc, #352]	@ (8001d28 <HAL_GPIO_Init+0x32c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d037      	beq.n	8001c3a <HAL_GPIO_Init+0x23e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a57      	ldr	r2, [pc, #348]	@ (8001d2c <HAL_GPIO_Init+0x330>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d031      	beq.n	8001c36 <HAL_GPIO_Init+0x23a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a56      	ldr	r2, [pc, #344]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d02b      	beq.n	8001c32 <HAL_GPIO_Init+0x236>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a55      	ldr	r2, [pc, #340]	@ (8001d34 <HAL_GPIO_Init+0x338>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d025      	beq.n	8001c2e <HAL_GPIO_Init+0x232>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a54      	ldr	r2, [pc, #336]	@ (8001d38 <HAL_GPIO_Init+0x33c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d01f      	beq.n	8001c2a <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a53      	ldr	r2, [pc, #332]	@ (8001d3c <HAL_GPIO_Init+0x340>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d019      	beq.n	8001c26 <HAL_GPIO_Init+0x22a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_GPIO_Init+0x344>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	@ (8001d44 <HAL_GPIO_Init+0x348>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00d      	beq.n	8001c1e <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_GPIO_Init+0x34c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d007      	beq.n	8001c1a <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d4c <HAL_GPIO_Init+0x350>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_GPIO_Init+0x21a>
 8001c12:	2309      	movs	r3, #9
 8001c14:	e012      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c16:	230a      	movs	r3, #10
 8001c18:	e010      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	e00e      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c1e:	2307      	movs	r3, #7
 8001c20:	e00c      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c22:	2306      	movs	r3, #6
 8001c24:	e00a      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x240>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	@ (8001d24 <HAL_GPIO_Init+0x328>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a34      	ldr	r2, [pc, #208]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b32      	ldr	r3, [pc, #200]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a29      	ldr	r2, [pc, #164]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	@ (8001d50 <HAL_GPIO_Init+0x354>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f ae86 	bls.w	8001a1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	@ 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40021400 	.word	0x40021400
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40021c00 	.word	0x40021c00
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40022400 	.word	0x40022400
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d70:	e003      	b.n	8001d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d98:	887a      	ldrh	r2, [r7, #2]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	400b      	ands	r3, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dea:	f7ff fcf1 	bl	80017d0 <HAL_GetTick>
 8001dee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df0:	e009      	b.n	8001e06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df2:	f7ff fced 	bl	80017d0 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e00:	d901      	bls.n	8001e06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e022      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e12:	d1ee      	bne.n	8001df2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e14:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e20:	f7ff fcd6 	bl	80017d0 <HAL_GetTick>
 8001e24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e26:	e009      	b.n	8001e3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e28:	f7ff fcd2 	bl	80017d0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e36:	d901      	bls.n	8001e3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e007      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e48:	d1ee      	bne.n	8001e28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e291      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e80:	4b96      	ldr	r3, [pc, #600]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d00c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8c:	4b93      	ldr	r3, [pc, #588]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d112      	bne.n	8001ebe <HAL_RCC_OscConfig+0x62>
 8001e98:	4b90      	ldr	r3, [pc, #576]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x130>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d168      	bne.n	8001f8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e26b      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x7a>
 8001ec8:	4b84      	ldr	r3, [pc, #528]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a83      	ldr	r2, [pc, #524]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e02e      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x9c>
 8001ede:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7b      	ldr	r2, [pc, #492]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0xc0>
 8001f02:	4b76      	ldr	r3, [pc, #472]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a72      	ldr	r2, [pc, #456]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xd8>
 8001f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a6e      	ldr	r2, [pc, #440]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b6c      	ldr	r3, [pc, #432]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6b      	ldr	r2, [pc, #428]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fc48 	bl	80017d0 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fc44 	bl	80017d0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e21f      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b61      	ldr	r3, [pc, #388]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xe8>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc34 	bl	80017d0 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc30 	bl	80017d0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	@ 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e20b      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b57      	ldr	r3, [pc, #348]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x110>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d069      	beq.n	800206e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9a:	4b50      	ldr	r3, [pc, #320]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x190>
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1df      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	493d      	ldr	r1, [pc, #244]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e040      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b39      	ldr	r3, [pc, #228]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a38      	ldr	r2, [pc, #224]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fbe6 	bl	80017d0 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fbe2 	bl	80017d0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e1bd      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b30      	ldr	r3, [pc, #192]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4929      	ldr	r1, [pc, #164]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a26      	ldr	r2, [pc, #152]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7ff fbc2 	bl	80017d0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7ff fbbe 	bl	80017d0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e199      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d038      	beq.n	80020ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d019      	beq.n	80020b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002082:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fb9f 	bl	80017d0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fb9b 	bl	80017d0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e176      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 80020aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x23a>
 80020b4:	e01a      	b.n	80020ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 80020b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_RCC_OscConfig+0x280>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff fb85 	bl	80017d0 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff fb81 	bl	80017d0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d903      	bls.n	80020e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e15c      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
 80020dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e0:	4b91      	ldr	r3, [pc, #580]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a4 	beq.w	8002242 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b88      	ldr	r3, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a87      	ldr	r2, [pc, #540]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
 8002112:	4b85      	ldr	r3, [pc, #532]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b82      	ldr	r3, [pc, #520]	@ (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800212e:	4b7f      	ldr	r3, [pc, #508]	@ (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	@ (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff fb49 	bl	80017d0 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff fb45 	bl	80017d0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	@ 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e120      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b75      	ldr	r3, [pc, #468]	@ (800232c <HAL_RCC_OscConfig+0x4d0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x31a>
 8002168:	4b6f      	ldr	r3, [pc, #444]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a6e      	ldr	r2, [pc, #440]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x33c>
 800217e:	4b6a      	ldr	r3, [pc, #424]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	4a69      	ldr	r2, [pc, #420]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	@ 0x70
 800218a:	4b67      	ldr	r3, [pc, #412]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a66      	ldr	r2, [pc, #408]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x35e>
 80021a0:	4b61      	ldr	r3, [pc, #388]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	4a60      	ldr	r2, [pc, #384]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
 80021ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021be:	4a5a      	ldr	r2, [pc, #360]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c6:	4b58      	ldr	r3, [pc, #352]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	4a57      	ldr	r2, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff faf9 	bl	80017d0 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff faf5 	bl	80017d0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ce      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x386>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7ff fae3 	bl	80017d0 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff fadf 	bl	80017d0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b40      	ldr	r3, [pc, #256]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b3c      	ldr	r3, [pc, #240]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a3b      	ldr	r2, [pc, #236]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80a4 	beq.w	8002394 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b36      	ldr	r3, [pc, #216]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d06b      	beq.n	8002330 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d149      	bne.n	80022f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff fab0 	bl	80017d0 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff faac 	bl	80017d0 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e087      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	3b01      	subs	r3, #1
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	4313      	orrs	r3, r2
 80022b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa80 	bl	80017d0 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fa7c 	bl	80017d0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e057      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x478>
 80022f2:	e04f      	b.n	8002394 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fa66 	bl	80017d0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff fa62 	bl	80017d0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e03d      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_RCC_OscConfig+0x4cc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x4ac>
 8002326:	e035      	b.n	8002394 <HAL_RCC_OscConfig+0x538>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002330:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x544>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d028      	beq.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d121      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d11a      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002366:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d910      	bls.n	80023ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b67      	ldr	r3, [pc, #412]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	4965      	ldr	r1, [pc, #404]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b39      	ldr	r3, [pc, #228]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4936      	ldr	r1, [pc, #216]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7ff f99a 	bl	80017d0 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f996 	bl	80017d0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d210      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 020f 	bic.w	r2, r3, #15
 80024de:	4922      	ldr	r1, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1d4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f8f6 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08007020 	.word	0x08007020
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b090      	sub	sp, #64	@ 0x40
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
 8002588:	2300      	movs	r3, #0
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80a1 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e09b      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x184>)
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025b4:	e09b      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ba:	e098      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b4f      	ldr	r3, [pc, #316]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025c6:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d028      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025e4:	2100      	movs	r1, #0
 80025e6:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e8:	fb03 f201 	mul.w	r2, r3, r1
 80025ec:	2300      	movs	r3, #0
 80025ee:	fb00 f303 	mul.w	r3, r0, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f6:	fba0 1202 	umull	r1, r2, r0, r2
 80025fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025fc:	460a      	mov	r2, r1
 80025fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002602:	4413      	add	r3, r2
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002608:	2200      	movs	r2, #0
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	61fa      	str	r2, [r7, #28]
 800260e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002616:	f7fd fe4b 	bl	80002b0 <__aeabi_uldivmod>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4613      	mov	r3, r2
 8002620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002622:	e053      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002624:	4b35      	ldr	r3, [pc, #212]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	2200      	movs	r2, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002636:	f04f 0b00 	mov.w	fp, #0
 800263a:	4652      	mov	r2, sl
 800263c:	465b      	mov	r3, fp
 800263e:	f04f 0000 	mov.w	r0, #0
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	0159      	lsls	r1, r3, #5
 8002648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264c:	0150      	lsls	r0, r2, #5
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	ebb2 080a 	subs.w	r8, r2, sl
 8002656:	eb63 090b 	sbc.w	r9, r3, fp
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002666:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800266a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800266e:	ebb2 0408 	subs.w	r4, r2, r8
 8002672:	eb63 0509 	sbc.w	r5, r3, r9
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	00eb      	lsls	r3, r5, #3
 8002680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002684:	00e2      	lsls	r2, r4, #3
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
 800268a:	eb14 030a 	adds.w	r3, r4, sl
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	eb45 030b 	adc.w	r3, r5, fp
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a2:	4629      	mov	r1, r5
 80026a4:	028b      	lsls	r3, r1, #10
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ac:	4621      	mov	r1, r4
 80026ae:	028a      	lsls	r2, r1, #10
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	2200      	movs	r2, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	60fa      	str	r2, [r7, #12]
 80026bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c0:	f7fd fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x180>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80026dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x184>)
 80026ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3740      	adds	r7, #64	@ 0x40
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	00f42400 	.word	0x00f42400
 8002704:	017d7840 	.word	0x017d7840

08002708 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000000 	.word	0x20000000

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	@ (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08007030 	.word	0x08007030

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffdc 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0b5b      	lsrs	r3, r3, #13
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	@ (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08007030 	.word	0x08007030

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002798:	4b69      	ldr	r3, [pc, #420]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a68      	ldr	r2, [pc, #416]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027a2:	6093      	str	r3, [r2, #8]
 80027a4:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ac:	4964      	ldr	r1, [pc, #400]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d8:	4959      	ldr	r1, [pc, #356]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d017      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002806:	4b4e      	ldr	r3, [pc, #312]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	494a      	ldr	r1, [pc, #296]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002826:	2301      	movs	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 808b 	beq.w	800296a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	4a39      	ldr	r2, [pc, #228]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002860:	4b37      	ldr	r3, [pc, #220]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800286c:	4b35      	ldr	r3, [pc, #212]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a34      	ldr	r2, [pc, #208]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe ffaa 	bl	80017d0 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe ffa6 	bl	80017d0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e357      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002892:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289e:	4b28      	ldr	r3, [pc, #160]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d035      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d02e      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028de:	4a18      	ldr	r2, [pc, #96]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028e4:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d114      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe ff6e 	bl	80017d0 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe ff6a 	bl	80017d0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e319      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0ee      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002926:	d111      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002936:	400b      	ands	r3, r1
 8002938:	4901      	ldr	r1, [pc, #4]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
 800293e:	e00b      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	0ffffcff 	.word	0x0ffffcff
 800294c:	4baa      	ldr	r3, [pc, #680]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4aa9      	ldr	r2, [pc, #676]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002952:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	4ba7      	ldr	r3, [pc, #668]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	49a4      	ldr	r1, [pc, #656]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002966:	4313      	orrs	r3, r2
 8002968:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002976:	4ba0      	ldr	r3, [pc, #640]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297c:	4a9e      	ldr	r2, [pc, #632]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002982:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002986:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002988:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	4999      	ldr	r1, [pc, #612]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a4:	4b94      	ldr	r3, [pc, #592]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b2:	4991      	ldr	r1, [pc, #580]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029c6:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029d4:	4988      	ldr	r1, [pc, #544]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029e8:	4b83      	ldr	r3, [pc, #524]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f6:	4980      	ldr	r1, [pc, #512]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	4977      	ldr	r1, [pc, #476]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2c:	4b72      	ldr	r3, [pc, #456]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	496f      	ldr	r1, [pc, #444]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a54:	f023 020c 	bic.w	r2, r3, #12
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5c:	4966      	ldr	r1, [pc, #408]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a70:	4b61      	ldr	r3, [pc, #388]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	495e      	ldr	r1, [pc, #376]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a92:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa0:	4955      	ldr	r1, [pc, #340]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac2:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ad6:	4b48      	ldr	r3, [pc, #288]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002adc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	4944      	ldr	r1, [pc, #272]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002af8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	493c      	ldr	r1, [pc, #240]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b28:	4933      	ldr	r1, [pc, #204]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b4a:	492b      	ldr	r1, [pc, #172]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b6c:	4922      	ldr	r1, [pc, #136]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bac:	4912      	ldr	r1, [pc, #72]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bd0:	4909      	ldr	r1, [pc, #36]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d006      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d9 	beq.w	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bec:	4b02      	ldr	r3, [pc, #8]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a01      	ldr	r2, [pc, #4]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fde7 	bl	80017d0 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c06:	f7fe fde3 	bl	80017d0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	@ 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e194      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c18:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d021      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d11d      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c38:	4b64      	ldr	r3, [pc, #400]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c46:	4b61      	ldr	r3, [pc, #388]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c4c:	0e1b      	lsrs	r3, r3, #24
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	019a      	lsls	r2, r3, #6
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	071b      	lsls	r3, r3, #28
 8002c6c:	4957      	ldr	r1, [pc, #348]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c9e:	d129      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb4:	0f1b      	lsrs	r3, r3, #28
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	019a      	lsls	r2, r3, #6
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	493d      	ldr	r1, [pc, #244]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce2:	f023 021f 	bic.w	r2, r3, #31
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	3b01      	subs	r3, #1
 8002cec:	4937      	ldr	r1, [pc, #220]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01d      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d00:	4b32      	ldr	r3, [pc, #200]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d14:	0f1b      	lsrs	r3, r3, #28
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	019a      	lsls	r2, r3, #6
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	071b      	lsls	r3, r3, #28
 8002d34:	4925      	ldr	r1, [pc, #148]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d011      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	019a      	lsls	r2, r3, #6
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	071b      	lsls	r3, r3, #28
 8002d64:	4919      	ldr	r1, [pc, #100]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d6c:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a16      	ldr	r2, [pc, #88]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d78:	f7fe fd2a 	bl	80017d0 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d80:	f7fe fd26 	bl	80017d0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0d7      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 80cd 	bne.w	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db2:	f7fe fd0d 	bl	80017d0 <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dba:	f7fe fd09 	bl	80017d0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	@ 0x64
 8002dc6:	d903      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0ba      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002dcc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ddc:	d0ed      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d12a      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e06:	4b51      	ldr	r3, [pc, #324]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e14:	4b4d      	ldr	r3, [pc, #308]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1a:	0f1b      	lsrs	r3, r3, #28
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	019a      	lsls	r2, r3, #6
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	071b      	lsls	r3, r3, #28
 8002e3a:	4944      	ldr	r1, [pc, #272]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e42:	4b42      	ldr	r3, [pc, #264]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	493d      	ldr	r1, [pc, #244]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d022      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e70:	d11d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e72:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e80:	4b32      	ldr	r3, [pc, #200]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	4929      	ldr	r1, [pc, #164]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ec8:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	019a      	lsls	r2, r3, #6
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	4917      	ldr	r1, [pc, #92]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	4911      	ldr	r1, [pc, #68]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0e      	ldr	r2, [pc, #56]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe fc5a 	bl	80017d0 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f20:	f7fe fc56 	bl	80017d0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	@ 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e007      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f3e:	d1ef      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e040      	b.n	8002fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fb30 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	@ 0x24
 8002f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fb16 	bl	80035c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8af 	bl	8003100 <UART_SetConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01b      	b.n	8002fe4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb95 	bl	800370c <UART_CheckIdleState>
 8002fe2:	4603      	mov	r3, r0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003000:	2b20      	cmp	r3, #32
 8003002:	d177      	bne.n	80030f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Transmit+0x24>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e070      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2221      	movs	r2, #33	@ 0x21
 8003020:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe fbd5 	bl	80017d0 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x68>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800305c:	e02f      	b.n	80030be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	@ 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fba6 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e03b      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	3302      	adds	r3, #2
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	e007      	b.n	80030ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1c9      	bne.n	800305e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2140      	movs	r1, #64	@ 0x40
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fb70 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e005      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4ba6      	ldr	r3, [pc, #664]	@ (80033c4 <UART_SetConfig+0x2c4>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	4313      	orrs	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a94      	ldr	r2, [pc, #592]	@ (80033c8 <UART_SetConfig+0x2c8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d120      	bne.n	80031be <UART_SetConfig+0xbe>
 800317c:	4b93      	ldr	r3, [pc, #588]	@ (80033cc <UART_SetConfig+0x2cc>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d816      	bhi.n	80031b8 <UART_SetConfig+0xb8>
 800318a:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0x90>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031a7 	.word	0x080031a7
 800319c:	080031b3 	.word	0x080031b3
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e150      	b.n	8003448 <UART_SetConfig+0x348>
 80031a6:	2302      	movs	r3, #2
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e14d      	b.n	8003448 <UART_SetConfig+0x348>
 80031ac:	2304      	movs	r3, #4
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e14a      	b.n	8003448 <UART_SetConfig+0x348>
 80031b2:	2308      	movs	r3, #8
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e147      	b.n	8003448 <UART_SetConfig+0x348>
 80031b8:	2310      	movs	r3, #16
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e144      	b.n	8003448 <UART_SetConfig+0x348>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a83      	ldr	r2, [pc, #524]	@ (80033d0 <UART_SetConfig+0x2d0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d132      	bne.n	800322e <UART_SetConfig+0x12e>
 80031c8:	4b80      	ldr	r3, [pc, #512]	@ (80033cc <UART_SetConfig+0x2cc>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b0c      	cmp	r3, #12
 80031d4:	d828      	bhi.n	8003228 <UART_SetConfig+0x128>
 80031d6:	a201      	add	r2, pc, #4	@ (adr r2, 80031dc <UART_SetConfig+0xdc>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003229 	.word	0x08003229
 80031e4:	08003229 	.word	0x08003229
 80031e8:	08003229 	.word	0x08003229
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	08003229 	.word	0x08003229
 80031f4:	08003229 	.word	0x08003229
 80031f8:	08003229 	.word	0x08003229
 80031fc:	08003217 	.word	0x08003217
 8003200:	08003229 	.word	0x08003229
 8003204:	08003229 	.word	0x08003229
 8003208:	08003229 	.word	0x08003229
 800320c:	08003223 	.word	0x08003223
 8003210:	2300      	movs	r3, #0
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e118      	b.n	8003448 <UART_SetConfig+0x348>
 8003216:	2302      	movs	r3, #2
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e115      	b.n	8003448 <UART_SetConfig+0x348>
 800321c:	2304      	movs	r3, #4
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e112      	b.n	8003448 <UART_SetConfig+0x348>
 8003222:	2308      	movs	r3, #8
 8003224:	77fb      	strb	r3, [r7, #31]
 8003226:	e10f      	b.n	8003448 <UART_SetConfig+0x348>
 8003228:	2310      	movs	r3, #16
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e10c      	b.n	8003448 <UART_SetConfig+0x348>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a68      	ldr	r2, [pc, #416]	@ (80033d4 <UART_SetConfig+0x2d4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d120      	bne.n	800327a <UART_SetConfig+0x17a>
 8003238:	4b64      	ldr	r3, [pc, #400]	@ (80033cc <UART_SetConfig+0x2cc>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003242:	2b30      	cmp	r3, #48	@ 0x30
 8003244:	d013      	beq.n	800326e <UART_SetConfig+0x16e>
 8003246:	2b30      	cmp	r3, #48	@ 0x30
 8003248:	d814      	bhi.n	8003274 <UART_SetConfig+0x174>
 800324a:	2b20      	cmp	r3, #32
 800324c:	d009      	beq.n	8003262 <UART_SetConfig+0x162>
 800324e:	2b20      	cmp	r3, #32
 8003250:	d810      	bhi.n	8003274 <UART_SetConfig+0x174>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <UART_SetConfig+0x15c>
 8003256:	2b10      	cmp	r3, #16
 8003258:	d006      	beq.n	8003268 <UART_SetConfig+0x168>
 800325a:	e00b      	b.n	8003274 <UART_SetConfig+0x174>
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e0f2      	b.n	8003448 <UART_SetConfig+0x348>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e0ef      	b.n	8003448 <UART_SetConfig+0x348>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e0ec      	b.n	8003448 <UART_SetConfig+0x348>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e0e9      	b.n	8003448 <UART_SetConfig+0x348>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e0e6      	b.n	8003448 <UART_SetConfig+0x348>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a56      	ldr	r2, [pc, #344]	@ (80033d8 <UART_SetConfig+0x2d8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <UART_SetConfig+0x1c6>
 8003284:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <UART_SetConfig+0x2cc>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800328e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003290:	d013      	beq.n	80032ba <UART_SetConfig+0x1ba>
 8003292:	2bc0      	cmp	r3, #192	@ 0xc0
 8003294:	d814      	bhi.n	80032c0 <UART_SetConfig+0x1c0>
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d009      	beq.n	80032ae <UART_SetConfig+0x1ae>
 800329a:	2b80      	cmp	r3, #128	@ 0x80
 800329c:	d810      	bhi.n	80032c0 <UART_SetConfig+0x1c0>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <UART_SetConfig+0x1a8>
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d006      	beq.n	80032b4 <UART_SetConfig+0x1b4>
 80032a6:	e00b      	b.n	80032c0 <UART_SetConfig+0x1c0>
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0cc      	b.n	8003448 <UART_SetConfig+0x348>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0c9      	b.n	8003448 <UART_SetConfig+0x348>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0c6      	b.n	8003448 <UART_SetConfig+0x348>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e0c3      	b.n	8003448 <UART_SetConfig+0x348>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e0c0      	b.n	8003448 <UART_SetConfig+0x348>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a44      	ldr	r2, [pc, #272]	@ (80033dc <UART_SetConfig+0x2dc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d125      	bne.n	800331c <UART_SetConfig+0x21c>
 80032d0:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <UART_SetConfig+0x2cc>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032de:	d017      	beq.n	8003310 <UART_SetConfig+0x210>
 80032e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e4:	d817      	bhi.n	8003316 <UART_SetConfig+0x216>
 80032e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ea:	d00b      	beq.n	8003304 <UART_SetConfig+0x204>
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f0:	d811      	bhi.n	8003316 <UART_SetConfig+0x216>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <UART_SetConfig+0x1fe>
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d006      	beq.n	800330a <UART_SetConfig+0x20a>
 80032fc:	e00b      	b.n	8003316 <UART_SetConfig+0x216>
 80032fe:	2300      	movs	r3, #0
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e0a1      	b.n	8003448 <UART_SetConfig+0x348>
 8003304:	2302      	movs	r3, #2
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e09e      	b.n	8003448 <UART_SetConfig+0x348>
 800330a:	2304      	movs	r3, #4
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e09b      	b.n	8003448 <UART_SetConfig+0x348>
 8003310:	2308      	movs	r3, #8
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e098      	b.n	8003448 <UART_SetConfig+0x348>
 8003316:	2310      	movs	r3, #16
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e095      	b.n	8003448 <UART_SetConfig+0x348>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2f      	ldr	r2, [pc, #188]	@ (80033e0 <UART_SetConfig+0x2e0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d125      	bne.n	8003372 <UART_SetConfig+0x272>
 8003326:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <UART_SetConfig+0x2cc>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003330:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003334:	d017      	beq.n	8003366 <UART_SetConfig+0x266>
 8003336:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800333a:	d817      	bhi.n	800336c <UART_SetConfig+0x26c>
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003340:	d00b      	beq.n	800335a <UART_SetConfig+0x25a>
 8003342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003346:	d811      	bhi.n	800336c <UART_SetConfig+0x26c>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <UART_SetConfig+0x254>
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003350:	d006      	beq.n	8003360 <UART_SetConfig+0x260>
 8003352:	e00b      	b.n	800336c <UART_SetConfig+0x26c>
 8003354:	2301      	movs	r3, #1
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e076      	b.n	8003448 <UART_SetConfig+0x348>
 800335a:	2302      	movs	r3, #2
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e073      	b.n	8003448 <UART_SetConfig+0x348>
 8003360:	2304      	movs	r3, #4
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e070      	b.n	8003448 <UART_SetConfig+0x348>
 8003366:	2308      	movs	r3, #8
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e06d      	b.n	8003448 <UART_SetConfig+0x348>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e06a      	b.n	8003448 <UART_SetConfig+0x348>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <UART_SetConfig+0x2e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d138      	bne.n	80033ee <UART_SetConfig+0x2ee>
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <UART_SetConfig+0x2cc>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003386:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800338a:	d017      	beq.n	80033bc <UART_SetConfig+0x2bc>
 800338c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003390:	d82a      	bhi.n	80033e8 <UART_SetConfig+0x2e8>
 8003392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003396:	d00b      	beq.n	80033b0 <UART_SetConfig+0x2b0>
 8003398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339c:	d824      	bhi.n	80033e8 <UART_SetConfig+0x2e8>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <UART_SetConfig+0x2aa>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	d006      	beq.n	80033b6 <UART_SetConfig+0x2b6>
 80033a8:	e01e      	b.n	80033e8 <UART_SetConfig+0x2e8>
 80033aa:	2300      	movs	r3, #0
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e04b      	b.n	8003448 <UART_SetConfig+0x348>
 80033b0:	2302      	movs	r3, #2
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e048      	b.n	8003448 <UART_SetConfig+0x348>
 80033b6:	2304      	movs	r3, #4
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e045      	b.n	8003448 <UART_SetConfig+0x348>
 80033bc:	2308      	movs	r3, #8
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e042      	b.n	8003448 <UART_SetConfig+0x348>
 80033c2:	bf00      	nop
 80033c4:	efff69f3 	.word	0xefff69f3
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40004800 	.word	0x40004800
 80033d8:	40004c00 	.word	0x40004c00
 80033dc:	40005000 	.word	0x40005000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	40007800 	.word	0x40007800
 80033e8:	2310      	movs	r3, #16
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e02c      	b.n	8003448 <UART_SetConfig+0x348>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a72      	ldr	r2, [pc, #456]	@ (80035bc <UART_SetConfig+0x4bc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d125      	bne.n	8003444 <UART_SetConfig+0x344>
 80033f8:	4b71      	ldr	r3, [pc, #452]	@ (80035c0 <UART_SetConfig+0x4c0>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003402:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003406:	d017      	beq.n	8003438 <UART_SetConfig+0x338>
 8003408:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800340c:	d817      	bhi.n	800343e <UART_SetConfig+0x33e>
 800340e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003412:	d00b      	beq.n	800342c <UART_SetConfig+0x32c>
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003418:	d811      	bhi.n	800343e <UART_SetConfig+0x33e>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <UART_SetConfig+0x326>
 800341e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003422:	d006      	beq.n	8003432 <UART_SetConfig+0x332>
 8003424:	e00b      	b.n	800343e <UART_SetConfig+0x33e>
 8003426:	2300      	movs	r3, #0
 8003428:	77fb      	strb	r3, [r7, #31]
 800342a:	e00d      	b.n	8003448 <UART_SetConfig+0x348>
 800342c:	2302      	movs	r3, #2
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e00a      	b.n	8003448 <UART_SetConfig+0x348>
 8003432:	2304      	movs	r3, #4
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e007      	b.n	8003448 <UART_SetConfig+0x348>
 8003438:	2308      	movs	r3, #8
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e004      	b.n	8003448 <UART_SetConfig+0x348>
 800343e:	2310      	movs	r3, #16
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e001      	b.n	8003448 <UART_SetConfig+0x348>
 8003444:	2310      	movs	r3, #16
 8003446:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003450:	d15b      	bne.n	800350a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d828      	bhi.n	80034aa <UART_SetConfig+0x3aa>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0x360>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7ff f94c 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003488:	61b8      	str	r0, [r7, #24]
        break;
 800348a:	e013      	b.n	80034b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7ff f95c 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003490:	61b8      	str	r0, [r7, #24]
        break;
 8003492:	e00f      	b.n	80034b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b4b      	ldr	r3, [pc, #300]	@ (80035c4 <UART_SetConfig+0x4c4>)
 8003496:	61bb      	str	r3, [r7, #24]
        break;
 8003498:	e00c      	b.n	80034b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7ff f86f 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800349e:	61b8      	str	r0, [r7, #24]
        break;
 80034a0:	e008      	b.n	80034b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a6:	61bb      	str	r3, [r7, #24]
        break;
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	77bb      	strb	r3, [r7, #30]
        break;
 80034b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d074      	beq.n	80035a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	005a      	lsls	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	d916      	bls.n	8003504 <UART_SetConfig+0x404>
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d212      	bcs.n	8003504 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f023 030f 	bic.w	r3, r3, #15
 80034e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	89fb      	ldrh	r3, [r7, #14]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	89fa      	ldrh	r2, [r7, #14]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	e04f      	b.n	80035a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	77bb      	strb	r3, [r7, #30]
 8003508:	e04c      	b.n	80035a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d828      	bhi.n	8003562 <UART_SetConfig+0x462>
 8003510:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <UART_SetConfig+0x418>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003545 	.word	0x08003545
 8003520:	0800354d 	.word	0x0800354d
 8003524:	08003563 	.word	0x08003563
 8003528:	08003553 	.word	0x08003553
 800352c:	08003563 	.word	0x08003563
 8003530:	08003563 	.word	0x08003563
 8003534:	08003563 	.word	0x08003563
 8003538:	0800355b 	.word	0x0800355b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7ff f8f0 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e013      	b.n	800356c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff f900 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003548:	61b8      	str	r0, [r7, #24]
        break;
 800354a:	e00f      	b.n	800356c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354c:	4b1d      	ldr	r3, [pc, #116]	@ (80035c4 <UART_SetConfig+0x4c4>)
 800354e:	61bb      	str	r3, [r7, #24]
        break;
 8003550:	e00c      	b.n	800356c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7ff f813 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8003556:	61b8      	str	r0, [r7, #24]
        break;
 8003558:	e008      	b.n	800356c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355e:	61bb      	str	r3, [r7, #24]
        break;
 8003560:	e004      	b.n	800356c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	77bb      	strb	r3, [r7, #30]
        break;
 800356a:	bf00      	nop
    }

    if (pclk != 0U)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085a      	lsrs	r2, r3, #1
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d909      	bls.n	80035a0 <UART_SetConfig+0x4a0>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003592:	d205      	bcs.n	80035a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e001      	b.n	80035a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40007c00 	.word	0x40007c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400

080035c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036c6:	d10a      	bne.n	80036de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	@ 0x30
 8003710:	af02      	add	r7, sp, #8
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800371c:	f7fe f858 	bl	80017d0 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d12e      	bne.n	800378e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f83b 	bl	80037ba <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d021      	beq.n	800378e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	60fb      	str	r3, [r7, #12]
   return(result);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	617b      	str	r3, [r7, #20]
   return(result);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e011      	b.n	80037b2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3728      	adds	r7, #40	@ 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	603b      	str	r3, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	e04f      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d2:	d04b      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d4:	f7fd fffc 	bl	80017d0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d302      	bcc.n	80037ea <UART_WaitOnFlagUntilTimeout+0x30>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e04e      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d037      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b80      	cmp	r3, #128	@ 0x80
 8003800:	d034      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d031      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d110      	bne.n	8003838 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2208      	movs	r2, #8
 800381c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f838 	bl	8003894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2208      	movs	r2, #8
 8003828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e029      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003846:	d111      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003850:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f81e 	bl	8003894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e00f      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	d0a0      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b095      	sub	sp, #84	@ 0x54
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80038bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e6      	bne.n	800389c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	2b01      	cmp	r3, #1
 8003908:	d118      	bne.n	800393c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60bb      	str	r3, [r7, #8]
   return(result);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	613b      	str	r3, [r7, #16]
   return(result);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e6      	bne.n	800390a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003950:	bf00      	nop
 8003952:	3754      	adds	r7, #84	@ 0x54
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800396a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800396e:	2b84      	cmp	r3, #132	@ 0x84
 8003970:	d005      	beq.n	800397e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	3303      	adds	r3, #3
 800397c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003990:	f000 fff0 	bl	8004974 <vTaskStartScheduler>
  
  return osOK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	bd80      	pop	{r7, pc}

0800399a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800399a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399c:	b089      	sub	sp, #36	@ 0x24
 800399e:	af04      	add	r7, sp, #16
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <osThreadCreate+0x54>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685c      	ldr	r4, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691e      	ldr	r6, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ffc8 	bl	800395c <makeFreeRtosPriority>
 80039cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039d6:	9202      	str	r2, [sp, #8]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	9100      	str	r1, [sp, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4632      	mov	r2, r6
 80039e0:	4629      	mov	r1, r5
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 fdee 	bl	80045c4 <xTaskCreateStatic>
 80039e8:	4603      	mov	r3, r0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e01c      	b.n	8003a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685c      	ldr	r4, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ffaa 	bl	800395c <makeFreeRtosPriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	4632      	mov	r2, r6
 8003a16:	4629      	mov	r1, r5
 8003a18:	4620      	mov	r0, r4
 8003a1a:	f000 fe39 	bl	8004690 <xTaskCreate>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <osDelay+0x16>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	e000      	b.n	8003a4a <osDelay+0x18>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ff5a 	bl	8004904 <vTaskDelay>
  
  return osOK;
 8003a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0208 	add.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f103 0208 	add.w	r2, r3, #8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	601a      	str	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b12:	d103      	bne.n	8003b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e00c      	b.n	8003b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e002      	b.n	8003b2a <vListInsert+0x2e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d2f6      	bcs.n	8003b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6892      	ldr	r2, [r2, #8]
 8003b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6852      	ldr	r2, [r2, #4]
 8003b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d103      	bne.n	8003ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10d      	bne.n	8003bf4 <xQueueGenericReset+0x30>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
 8003bec:	60bb      	str	r3, [r7, #8]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003bf4:	f001 fe5a 	bl	80058ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c24:	3b01      	subs	r3, #1
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	22ff      	movs	r2, #255	@ 0xff
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	22ff      	movs	r2, #255	@ 0xff
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d114      	bne.n	8003c74 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01a      	beq.n	8003c88 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3310      	adds	r3, #16
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 f90a 	bl	8004e70 <xTaskRemoveFromEventList>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d012      	beq.n	8003c88 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c62:	4b0d      	ldr	r3, [pc, #52]	@ (8003c98 <xQueueGenericReset+0xd4>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e009      	b.n	8003c88 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3310      	adds	r3, #16
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff feee 	bl	8003a5a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3324      	adds	r3, #36	@ 0x24
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fee9 	bl	8003a5a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c88:	f001 fe46 	bl	8005918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c8c:	2301      	movs	r3, #1
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <xQueueGenericCreate+0x30>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	b672      	cpsid	i
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	b662      	cpsie	i
 8003cc4:	613b      	str	r3, [r7, #16]
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e004      	b.n	8003ce2 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3348      	adds	r3, #72	@ 0x48
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fec8 	bl	8005a7c <pvPortMalloc>
 8003cec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d011      	beq.n	8003d18 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3348      	adds	r3, #72	@ 0x48
 8003cfc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d06:	79fa      	ldrb	r2, [r7, #7]
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f805 	bl	8003d22 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d18:	69bb      	ldr	r3, [r7, #24]
	}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	e002      	b.n	8003d44 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d50:	2101      	movs	r1, #1
 8003d52:	69b8      	ldr	r0, [r7, #24]
 8003d54:	f7ff ff36 	bl	8003bc4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	@ 0x38
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <xQueueGenericSend+0x38>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d80:	b672      	cpsid	i
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	b662      	cpsie	i
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x46>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueGenericSend+0x4a>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericSend+0x4c>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <xQueueGenericSend+0x6c>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	b672      	cpsid	i
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	b662      	cpsie	i
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d103      	bne.n	8003dda <xQueueGenericSend+0x7a>
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <xQueueGenericSend+0x7e>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueGenericSend+0x80>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <xQueueGenericSend+0xa0>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	b672      	cpsid	i
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	b662      	cpsie	i
 8003df8:	623b      	str	r3, [r7, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e00:	f001 f9fe 	bl	8005200 <xTaskGetSchedulerState>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <xQueueGenericSend+0xb0>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <xQueueGenericSend+0xb4>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <xQueueGenericSend+0xb6>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10d      	bne.n	8003e36 <xQueueGenericSend+0xd6>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	b672      	cpsid	i
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	b662      	cpsie	i
 8003e2e:	61fb      	str	r3, [r7, #28]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e36:	f001 fd39 	bl	80058ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <xQueueGenericSend+0xec>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d129      	bne.n	8003ea0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e52:	f000 faa7 	bl	80043a4 <prvCopyDataToQueue>
 8003e56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	3324      	adds	r3, #36	@ 0x24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f803 	bl	8004e70 <xTaskRemoveFromEventList>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e70:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <xQueueGenericSend+0x210>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	e00a      	b.n	8003e98 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e88:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <xQueueGenericSend+0x210>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e98:	f001 fd3e 	bl	8005918 <vPortExitCritical>
				return pdPASS;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e063      	b.n	8003f68 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ea6:	f001 fd37 	bl	8005918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e05c      	b.n	8003f68 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 f83f 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ec2:	f001 fd29 	bl	8005918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ec6:	f000 fdbb 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eca:	f001 fcef 	bl	80058ac <vPortEnterCritical>
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d103      	bne.n	8003ee4 <xQueueGenericSend+0x184>
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eea:	b25b      	sxtb	r3, r3
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d103      	bne.n	8003efa <xQueueGenericSend+0x19a>
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003efa:	f001 fd0d 	bl	8005918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003efe:	1d3a      	adds	r2, r7, #4
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 f82e 	bl	8004f68 <xTaskCheckForTimeOut>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d124      	bne.n	8003f5c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f14:	f000 fb3e 	bl	8004594 <prvIsQueueFull>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d018      	beq.n	8003f50 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	3310      	adds	r3, #16
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff7a 	bl	8004e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f2e:	f000 fac9 	bl	80044c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f32:	f000 fd93 	bl	8004a5c <xTaskResumeAll>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f af7c 	bne.w	8003e36 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <xQueueGenericSend+0x210>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	e772      	b.n	8003e36 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f52:	f000 fab7 	bl	80044c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f56:	f000 fd81 	bl	8004a5c <xTaskResumeAll>
 8003f5a:	e76c      	b.n	8003e36 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f5e:	f000 fab1 	bl	80044c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f62:	f000 fd7b 	bl	8004a5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3738      	adds	r7, #56	@ 0x38
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	@ 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <xQueueReceive+0x36>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	b672      	cpsid	i
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	b662      	cpsie	i
 8003fa2:	623b      	str	r3, [r7, #32]
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	e7fd      	b.n	8003fa6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <xQueueReceive+0x44>
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <xQueueReceive+0x48>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <xQueueReceive+0x4a>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <xQueueReceive+0x6a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	b672      	cpsid	i
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	b662      	cpsie	i
 8003fd6:	61fb      	str	r3, [r7, #28]
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	e7fd      	b.n	8003fda <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fde:	f001 f90f 	bl	8005200 <xTaskGetSchedulerState>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xQueueReceive+0x7a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <xQueueReceive+0x7e>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <xQueueReceive+0x80>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <xQueueReceive+0xa0>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	b672      	cpsid	i
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	b662      	cpsie	i
 800400c:	61bb      	str	r3, [r7, #24]
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004014:	f001 fc4a 	bl	80058ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01f      	beq.n	8004064 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004028:	f000 fa26 	bl	8004478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00f      	beq.n	800405c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	3310      	adds	r3, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 ff15 	bl	8004e70 <xTaskRemoveFromEventList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800404c:	4b3c      	ldr	r3, [pc, #240]	@ (8004140 <xQueueReceive+0x1cc>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800405c:	f001 fc5c 	bl	8005918 <vPortExitCritical>
				return pdPASS;
 8004060:	2301      	movs	r3, #1
 8004062:	e069      	b.n	8004138 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800406a:	f001 fc55 	bl	8005918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800406e:	2300      	movs	r3, #0
 8004070:	e062      	b.n	8004138 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004078:	f107 0310 	add.w	r3, r7, #16
 800407c:	4618      	mov	r0, r3
 800407e:	f000 ff5d 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004086:	f001 fc47 	bl	8005918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408a:	f000 fcd9 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800408e:	f001 fc0d 	bl	80058ac <vPortEnterCritical>
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d103      	bne.n	80040a8 <xQueueReceive+0x134>
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040ae:	b25b      	sxtb	r3, r3
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d103      	bne.n	80040be <xQueueReceive+0x14a>
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040be:	f001 fc2b 	bl	8005918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c2:	1d3a      	adds	r2, r7, #4
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff4c 	bl	8004f68 <xTaskCheckForTimeOut>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d123      	bne.n	800411e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040d8:	f000 fa46 	bl	8004568 <prvIsQueueEmpty>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e4:	3324      	adds	r3, #36	@ 0x24
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fe98 	bl	8004e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040f2:	f000 f9e7 	bl	80044c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040f6:	f000 fcb1 	bl	8004a5c <xTaskResumeAll>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d189      	bne.n	8004014 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8004100:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <xQueueReceive+0x1cc>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	e780      	b.n	8004014 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004114:	f000 f9d6 	bl	80044c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004118:	f000 fca0 	bl	8004a5c <xTaskResumeAll>
 800411c:	e77a      	b.n	8004014 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800411e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004120:	f000 f9d0 	bl	80044c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004124:	f000 fc9a 	bl	8004a5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412a:	f000 fa1d 	bl	8004568 <prvIsQueueEmpty>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	f43f af6f 	beq.w	8004014 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004138:	4618      	mov	r0, r3
 800413a:	3730      	adds	r7, #48	@ 0x30
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	@ 0x38
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800414e:	2300      	movs	r3, #0
 8004150:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004156:	2300      	movs	r3, #0
 8004158:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	b672      	cpsid	i
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	b662      	cpsie	i
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	b672      	cpsid	i
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	b662      	cpsie	i
 8004198:	61fb      	str	r3, [r7, #28]
}
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a0:	f001 f82e 	bl	8005200 <xTaskGetSchedulerState>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <xQueueSemaphoreTake+0x6c>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <xQueueSemaphoreTake+0x70>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <xQueueSemaphoreTake+0x72>
 80041b4:	2300      	movs	r3, #0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10d      	bne.n	80041d6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	b672      	cpsid	i
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	b662      	cpsie	i
 80041ce:	61bb      	str	r3, [r7, #24]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d6:	f001 fb69 	bl	80058ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d024      	beq.n	8004230 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d104      	bne.n	8004200 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80041f6:	f001 f9cd 	bl	8005594 <pvTaskIncrementMutexHeldCount>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00f      	beq.n	8004228 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	3310      	adds	r3, #16
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe2f 	bl	8004e70 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004218:	4b55      	ldr	r3, [pc, #340]	@ (8004370 <xQueueSemaphoreTake+0x22c>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004228:	f001 fb76 	bl	8005918 <vPortExitCritical>
				return pdPASS;
 800422c:	2301      	movs	r3, #1
 800422e:	e09a      	b.n	8004366 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d114      	bne.n	8004260 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	617b      	str	r3, [r7, #20]
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004258:	f001 fb5e 	bl	8005918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800425c:	2300      	movs	r3, #0
 800425e:	e082      	b.n	8004366 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fe66 	bl	8004f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004274:	f001 fb50 	bl	8005918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004278:	f000 fbe2 	bl	8004a40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800427c:	f001 fb16 	bl	80058ac <vPortEnterCritical>
 8004280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004286:	b25b      	sxtb	r3, r3
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d103      	bne.n	8004296 <xQueueSemaphoreTake+0x152>
 800428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800429c:	b25b      	sxtb	r3, r3
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d103      	bne.n	80042ac <xQueueSemaphoreTake+0x168>
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ac:	f001 fb34 	bl	8005918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b0:	463a      	mov	r2, r7
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fe55 	bl	8004f68 <xTaskCheckForTimeOut>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d132      	bne.n	800432a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042c6:	f000 f94f 	bl	8004568 <prvIsQueueEmpty>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d026      	beq.n	800431e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80042d8:	f001 fae8 	bl	80058ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 ffab 	bl	800523c <xTaskPriorityInherit>
 80042e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80042e8:	f001 fb16 	bl	8005918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ee:	3324      	adds	r3, #36	@ 0x24
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd93 	bl	8004e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80042fc:	f000 f8e2 	bl	80044c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004300:	f000 fbac 	bl	8004a5c <xTaskResumeAll>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f47f af65 	bne.w	80041d6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800430c:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <xQueueSemaphoreTake+0x22c>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	e75b      	b.n	80041d6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800431e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004320:	f000 f8d0 	bl	80044c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004324:	f000 fb9a 	bl	8004a5c <xTaskResumeAll>
 8004328:	e755      	b.n	80041d6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800432a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800432c:	f000 f8ca 	bl	80044c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004330:	f000 fb94 	bl	8004a5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004336:	f000 f917 	bl	8004568 <prvIsQueueEmpty>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f43f af4a 	beq.w	80041d6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8004348:	f001 fab0 	bl	80058ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800434c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800434e:	f000 f811 	bl	8004374 <prvGetDisinheritPriorityAfterTimeout>
 8004352:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f87a 	bl	8005454 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004360:	f001 fada 	bl	8005918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004366:	4618      	mov	r0, r3
 8004368:	3738      	adds	r7, #56	@ 0x38
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1c3 0307 	rsb	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e001      	b.n	8004396 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004396:	68fb      	ldr	r3, [r7, #12]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10d      	bne.n	80043de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d14d      	bne.n	8004466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 ffb4 	bl	800533c <xTaskPriorityDisinherit>
 80043d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	e043      	b.n	8004466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d119      	bne.n	8004418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6858      	ldr	r0, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	461a      	mov	r2, r3
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	f001 ffb3 	bl	800635a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	441a      	add	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	d32b      	bcc.n	8004466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e026      	b.n	8004466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68d8      	ldr	r0, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	461a      	mov	r2, r3
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	f001 ff99 	bl	800635a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	425b      	negs	r3, r3
 8004432:	441a      	add	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d207      	bcs.n	8004454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	425b      	negs	r3, r3
 800444e:	441a      	add	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d105      	bne.n	8004466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	3b01      	subs	r3, #1
 8004464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800446e:	697b      	ldr	r3, [r7, #20]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d018      	beq.n	80044bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	441a      	add	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d303      	bcc.n	80044ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68d9      	ldr	r1, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	461a      	mov	r2, r3
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	f001 ff4f 	bl	800635a <memcpy>
	}
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044cc:	f001 f9ee 	bl	80058ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d8:	e011      	b.n	80044fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3324      	adds	r3, #36	@ 0x24
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fcc2 	bl	8004e70 <xTaskRemoveFromEventList>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044f2:	f000 fda1 	bl	8005038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	dce9      	bgt.n	80044da <prvUnlockQueue+0x16>
 8004506:	e000      	b.n	800450a <prvUnlockQueue+0x46>
					break;
 8004508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	22ff      	movs	r2, #255	@ 0xff
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004512:	f001 fa01 	bl	8005918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004516:	f001 f9c9 	bl	80058ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004522:	e011      	b.n	8004548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3310      	adds	r3, #16
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fc9d 	bl	8004e70 <xTaskRemoveFromEventList>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800453c:	f000 fd7c 	bl	8005038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004540:	7bbb      	ldrb	r3, [r7, #14]
 8004542:	3b01      	subs	r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800454c:	2b00      	cmp	r3, #0
 800454e:	dce9      	bgt.n	8004524 <prvUnlockQueue+0x60>
 8004550:	e000      	b.n	8004554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	22ff      	movs	r2, #255	@ 0xff
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800455c:	f001 f9dc 	bl	8005918 <vPortExitCritical>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004570:	f001 f99c 	bl	80058ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e001      	b.n	8004586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004586:	f001 f9c7 	bl	8005918 <vPortExitCritical>

	return xReturn;
 800458a:	68fb      	ldr	r3, [r7, #12]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800459c:	f001 f986 	bl	80058ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d102      	bne.n	80045b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e001      	b.n	80045b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045b6:	f001 f9af 	bl	8005918 <vPortExitCritical>

	return xReturn;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08e      	sub	sp, #56	@ 0x38
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10d      	bne.n	80045f4 <xTaskCreateStatic+0x30>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	b672      	cpsid	i
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	b662      	cpsie	i
 80045ec:	623b      	str	r3, [r7, #32]
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <xTaskCreateStatic+0x52>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fe:	b672      	cpsid	i
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	b662      	cpsie	i
 800460e:	61fb      	str	r3, [r7, #28]
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	e7fd      	b.n	8004612 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004616:	2354      	movs	r3, #84	@ 0x54
 8004618:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b54      	cmp	r3, #84	@ 0x54
 800461e:	d00d      	beq.n	800463c <xTaskCreateStatic+0x78>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	b672      	cpsid	i
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	b662      	cpsie	i
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800463c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800463e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01e      	beq.n	8004682 <xTaskCreateStatic+0xbe>
 8004644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800465c:	2300      	movs	r3, #0
 800465e:	9303      	str	r3, [sp, #12]
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	9302      	str	r3, [sp, #8]
 8004664:	f107 0314 	add.w	r3, r7, #20
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f850 	bl	800471a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800467c:	f000 f8d8 	bl	8004830 <prvAddNewTaskToReadyList>
 8004680:	e001      	b.n	8004686 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004686:	697b      	ldr	r3, [r7, #20]
	}
 8004688:	4618      	mov	r0, r3
 800468a:	3728      	adds	r7, #40	@ 0x28
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	@ 0x30
 8004694:	af04      	add	r7, sp, #16
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 f9e9 	bl	8005a7c <pvPortMalloc>
 80046aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00e      	beq.n	80046d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b2:	2054      	movs	r0, #84	@ 0x54
 80046b4:	f001 f9e2 	bl	8005a7c <pvPortMalloc>
 80046b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80046c6:	e005      	b.n	80046d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	f001 faa5 	bl	8005c18 <vPortFree>
 80046ce:	e001      	b.n	80046d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d017      	beq.n	800470a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9303      	str	r3, [sp, #12]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f80e 	bl	800471a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046fe:	69f8      	ldr	r0, [r7, #28]
 8004700:	f000 f896 	bl	8004830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004704:	2301      	movs	r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e002      	b.n	8004710 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004710:	69bb      	ldr	r3, [r7, #24]
	}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b088      	sub	sp, #32
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004732:	440b      	add	r3, r1
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	b672      	cpsid	i
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	b662      	cpsie	i
 8004760:	617b      	str	r3, [r7, #20]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01f      	beq.n	80047ae <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	e012      	b.n	800479a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	7819      	ldrb	r1, [r3, #0]
 800477c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	3334      	adds	r3, #52	@ 0x34
 8004784:	460a      	mov	r2, r1
 8004786:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2b0f      	cmp	r3, #15
 800479e:	d9e9      	bls.n	8004774 <prvInitialiseNewTask+0x5a>
 80047a0:	e000      	b.n	80047a4 <prvInitialiseNewTask+0x8a>
			{
				break;
 80047a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ac:	e003      	b.n	80047b6 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d901      	bls.n	80047c0 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047bc:	2306      	movs	r3, #6
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ca:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ce:	2200      	movs	r2, #0
 80047d0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff f95f 	bl	8003a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	3318      	adds	r3, #24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f95a 	bl	8003a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	f1c3 0207 	rsb	r2, r3, #7
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	2200      	movs	r2, #0
 8004800:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	69b8      	ldr	r0, [r7, #24]
 8004810:	f000 ff3a 	bl	8005688 <pxPortInitialiseStack>
 8004814:	4602      	mov	r2, r0
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004826:	bf00      	nop
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004838:	f001 f838 	bl	80058ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800483c:	4b2a      	ldr	r3, [pc, #168]	@ (80048e8 <prvAddNewTaskToReadyList+0xb8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	4a29      	ldr	r2, [pc, #164]	@ (80048e8 <prvAddNewTaskToReadyList+0xb8>)
 8004844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004846:	4b29      	ldr	r3, [pc, #164]	@ (80048ec <prvAddNewTaskToReadyList+0xbc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800484e:	4a27      	ldr	r2, [pc, #156]	@ (80048ec <prvAddNewTaskToReadyList+0xbc>)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004854:	4b24      	ldr	r3, [pc, #144]	@ (80048e8 <prvAddNewTaskToReadyList+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d110      	bne.n	800487e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800485c:	f000 fc10 	bl	8005080 <prvInitialiseTaskLists>
 8004860:	e00d      	b.n	800487e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004862:	4b23      	ldr	r3, [pc, #140]	@ (80048f0 <prvAddNewTaskToReadyList+0xc0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <prvAddNewTaskToReadyList+0xbc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	429a      	cmp	r2, r3
 8004876:	d802      	bhi.n	800487e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004878:	4a1c      	ldr	r2, [pc, #112]	@ (80048ec <prvAddNewTaskToReadyList+0xbc>)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <prvAddNewTaskToReadyList+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	4a1b      	ldr	r2, [pc, #108]	@ (80048f4 <prvAddNewTaskToReadyList+0xc4>)
 8004886:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	2201      	movs	r2, #1
 800488e:	409a      	lsls	r2, r3
 8004890:	4b19      	ldr	r3, [pc, #100]	@ (80048f8 <prvAddNewTaskToReadyList+0xc8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4313      	orrs	r3, r2
 8004896:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <prvAddNewTaskToReadyList+0xc8>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <prvAddNewTaskToReadyList+0xcc>)
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7ff f8ff 	bl	8003ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048b6:	f001 f82f 	bl	8005918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <prvAddNewTaskToReadyList+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048c2:	4b0a      	ldr	r3, [pc, #40]	@ (80048ec <prvAddNewTaskToReadyList+0xbc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d207      	bcs.n	80048e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <prvAddNewTaskToReadyList+0xd0>)
 80048d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000488 	.word	0x20000488
 80048ec:	20000388 	.word	0x20000388
 80048f0:	20000494 	.word	0x20000494
 80048f4:	200004a4 	.word	0x200004a4
 80048f8:	20000490 	.word	0x20000490
 80048fc:	2000038c 	.word	0x2000038c
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01a      	beq.n	800494c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004916:	4b15      	ldr	r3, [pc, #84]	@ (800496c <vTaskDelay+0x68>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <vTaskDelay+0x36>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	b672      	cpsid	i
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	b662      	cpsie	i
 8004932:	60bb      	str	r3, [r7, #8]
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	e7fd      	b.n	8004936 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800493a:	f000 f881 	bl	8004a40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800493e:	2100      	movs	r1, #0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fe3b 	bl	80055bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004946:	f000 f889 	bl	8004a5c <xTaskResumeAll>
 800494a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <vTaskDelay+0x6c>)
 8004954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200004b0 	.word	0x200004b0
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	@ 0x28
 8004978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004982:	463a      	mov	r2, r7
 8004984:	1d39      	adds	r1, r7, #4
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fe1e 	bl	80005cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	9202      	str	r2, [sp, #8]
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	460a      	mov	r2, r1
 80049a2:	4921      	ldr	r1, [pc, #132]	@ (8004a28 <vTaskStartScheduler+0xb4>)
 80049a4:	4821      	ldr	r0, [pc, #132]	@ (8004a2c <vTaskStartScheduler+0xb8>)
 80049a6:	f7ff fe0d 	bl	80045c4 <xTaskCreateStatic>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4a20      	ldr	r2, [pc, #128]	@ (8004a30 <vTaskStartScheduler+0xbc>)
 80049ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a30 <vTaskStartScheduler+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e001      	b.n	80049c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d118      	bne.n	80049fa <vTaskStartScheduler+0x86>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	613b      	str	r3, [r7, #16]
}
 80049de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049e0:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <vTaskStartScheduler+0xc0>)
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295
 80049e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049e8:	4b13      	ldr	r3, [pc, #76]	@ (8004a38 <vTaskStartScheduler+0xc4>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049ee:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <vTaskStartScheduler+0xc8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049f4:	f000 fedc 	bl	80057b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049f8:	e011      	b.n	8004a1e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d10d      	bne.n	8004a1e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	b672      	cpsid	i
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	b662      	cpsie	i
 8004a16:	60fb      	str	r3, [r7, #12]
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	e7fd      	b.n	8004a1a <vTaskStartScheduler+0xa6>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	08007018 	.word	0x08007018
 8004a2c:	08005051 	.word	0x08005051
 8004a30:	200004ac 	.word	0x200004ac
 8004a34:	200004a8 	.word	0x200004a8
 8004a38:	20000494 	.word	0x20000494
 8004a3c:	2000048c 	.word	0x2000048c

08004a40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a44:	4b04      	ldr	r3, [pc, #16]	@ (8004a58 <vTaskSuspendAll+0x18>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a03      	ldr	r2, [pc, #12]	@ (8004a58 <vTaskSuspendAll+0x18>)
 8004a4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	200004b0 	.word	0x200004b0

08004a5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a6a:	4b43      	ldr	r3, [pc, #268]	@ (8004b78 <xTaskResumeAll+0x11c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <xTaskResumeAll+0x32>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	b672      	cpsid	i
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	b662      	cpsie	i
 8004a86:	603b      	str	r3, [r7, #0]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8e:	f000 ff0d 	bl	80058ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a92:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <xTaskResumeAll+0x11c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	4a37      	ldr	r2, [pc, #220]	@ (8004b78 <xTaskResumeAll+0x11c>)
 8004a9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9c:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <xTaskResumeAll+0x11c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d161      	bne.n	8004b68 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa4:	4b35      	ldr	r3, [pc, #212]	@ (8004b7c <xTaskResumeAll+0x120>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05d      	beq.n	8004b68 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aac:	e02e      	b.n	8004b0c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aae:	4b34      	ldr	r3, [pc, #208]	@ (8004b80 <xTaskResumeAll+0x124>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f857 	bl	8003b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff f852 	bl	8003b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b84 <xTaskResumeAll+0x128>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b84 <xTaskResumeAll+0x128>)
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4a27      	ldr	r2, [pc, #156]	@ (8004b88 <xTaskResumeAll+0x12c>)
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7fe ffde 	bl	8003ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afc:	4b23      	ldr	r3, [pc, #140]	@ (8004b8c <xTaskResumeAll+0x130>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d302      	bcc.n	8004b0c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004b06:	4b22      	ldr	r3, [pc, #136]	@ (8004b90 <xTaskResumeAll+0x134>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <xTaskResumeAll+0x124>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1cc      	bne.n	8004aae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b1a:	f000 fb51 	bl	80051c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b94 <xTaskResumeAll+0x138>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d010      	beq.n	8004b4c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b2a:	f000 f85f 	bl	8004bec <xTaskIncrementTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004b34:	4b16      	ldr	r3, [pc, #88]	@ (8004b90 <xTaskResumeAll+0x134>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f1      	bne.n	8004b2a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <xTaskResumeAll+0x138>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b4c:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <xTaskResumeAll+0x134>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b58:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <xTaskResumeAll+0x13c>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b68:	f000 fed6 	bl	8005918 <vPortExitCritical>

	return xAlreadyYielded;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200004b0 	.word	0x200004b0
 8004b7c:	20000488 	.word	0x20000488
 8004b80:	20000448 	.word	0x20000448
 8004b84:	20000490 	.word	0x20000490
 8004b88:	2000038c 	.word	0x2000038c
 8004b8c:	20000388 	.word	0x20000388
 8004b90:	2000049c 	.word	0x2000049c
 8004b94:	20000498 	.word	0x20000498
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <pcTaskGetName+0x14>
 8004baa:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <pcTaskGetName+0x4c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	e000      	b.n	8004bb2 <pcTaskGetName+0x16>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10d      	bne.n	8004bd6 <pcTaskGetName+0x3a>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbe:	b672      	cpsid	i
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	b662      	cpsie	i
 8004bce:	60bb      	str	r3, [r7, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <pcTaskGetName+0x36>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3334      	adds	r3, #52	@ 0x34
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000388 	.word	0x20000388

08004bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf6:	4b50      	ldr	r3, [pc, #320]	@ (8004d38 <xTaskIncrementTick+0x14c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 808b 	bne.w	8004d16 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c00:	4b4e      	ldr	r3, [pc, #312]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c08:	4a4c      	ldr	r2, [pc, #304]	@ (8004d3c <xTaskIncrementTick+0x150>)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d123      	bne.n	8004c5c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c14:	4b4a      	ldr	r3, [pc, #296]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <xTaskIncrementTick+0x4e>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	b672      	cpsid	i
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	b662      	cpsie	i
 8004c32:	603b      	str	r3, [r7, #0]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xTaskIncrementTick+0x4a>
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	4b40      	ldr	r3, [pc, #256]	@ (8004d44 <xTaskIncrementTick+0x158>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3e      	ldr	r2, [pc, #248]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4a3e      	ldr	r2, [pc, #248]	@ (8004d44 <xTaskIncrementTick+0x158>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d48 <xTaskIncrementTick+0x15c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	4a3c      	ldr	r2, [pc, #240]	@ (8004d48 <xTaskIncrementTick+0x15c>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	f000 fab2 	bl	80051c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <xTaskIncrementTick+0x160>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d348      	bcc.n	8004cf8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c66:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <xTaskIncrementTick+0x160>)
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	601a      	str	r2, [r3, #0]
					break;
 8004c78:	e03e      	b.n	8004cf8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7a:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <xTaskIncrementTick+0x154>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d203      	bcs.n	8004c9a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c92:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <xTaskIncrementTick+0x160>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c98:	e02e      	b.n	8004cf8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe ff65 	bl	8003b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe ff5c 	bl	8003b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <xTaskIncrementTick+0x164>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	4a22      	ldr	r2, [pc, #136]	@ (8004d50 <xTaskIncrementTick+0x164>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <xTaskIncrementTick+0x168>)
 8004cd6:	441a      	add	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7fe fee8 	bl	8003ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <xTaskIncrementTick+0x16c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3b9      	bcc.n	8004c66 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf6:	e7b6      	b.n	8004c66 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf8:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <xTaskIncrementTick+0x16c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4915      	ldr	r1, [pc, #84]	@ (8004d54 <xTaskIncrementTick+0x168>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d907      	bls.n	8004d20 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e004      	b.n	8004d20 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d16:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <xTaskIncrementTick+0x170>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d5c <xTaskIncrementTick+0x170>)
 8004d1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d20:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <xTaskIncrementTick+0x174>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200004b0 	.word	0x200004b0
 8004d3c:	2000048c 	.word	0x2000048c
 8004d40:	20000440 	.word	0x20000440
 8004d44:	20000444 	.word	0x20000444
 8004d48:	200004a0 	.word	0x200004a0
 8004d4c:	200004a8 	.word	0x200004a8
 8004d50:	20000490 	.word	0x20000490
 8004d54:	2000038c 	.word	0x2000038c
 8004d58:	20000388 	.word	0x20000388
 8004d5c:	20000498 	.word	0x20000498
 8004d60:	2000049c 	.word	0x2000049c

08004d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d6a:	4b28      	ldr	r3, [pc, #160]	@ (8004e0c <vTaskSwitchContext+0xa8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d72:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <vTaskSwitchContext+0xac>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d78:	e042      	b.n	8004e00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004d7a:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <vTaskSwitchContext+0xac>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <vTaskSwitchContext+0xb0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	f1c3 031f 	rsb	r3, r3, #31
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	4920      	ldr	r1, [pc, #128]	@ (8004e18 <vTaskSwitchContext+0xb4>)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <vTaskSwitchContext+0x62>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	b672      	cpsid	i
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	b662      	cpsie	i
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <vTaskSwitchContext+0x5e>
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a11      	ldr	r2, [pc, #68]	@ (8004e18 <vTaskSwitchContext+0xb4>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	3308      	adds	r3, #8
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d104      	bne.n	8004df6 <vTaskSwitchContext+0x92>
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a07      	ldr	r2, [pc, #28]	@ (8004e1c <vTaskSwitchContext+0xb8>)
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	200004b0 	.word	0x200004b0
 8004e10:	2000049c 	.word	0x2000049c
 8004e14:	20000490 	.word	0x20000490
 8004e18:	2000038c 	.word	0x2000038c
 8004e1c:	20000388 	.word	0x20000388

08004e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10d      	bne.n	8004e4c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e34:	b672      	cpsid	i
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	b662      	cpsie	i
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4c:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <vTaskPlaceOnEventList+0x4c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3318      	adds	r3, #24
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fe fe51 	bl	8003afc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6838      	ldr	r0, [r7, #0]
 8004e5e:	f000 fbad 	bl	80055bc <prvAddCurrentTaskToDelayedList>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000388 	.word	0x20000388

08004e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	b672      	cpsid	i
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	b662      	cpsie	i
 8004e9a:	60fb      	str	r3, [r7, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	e7fd      	b.n	8004e9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fe fe61 	bl	8003b6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <xTaskRemoveFromEventList+0xb4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d11c      	bne.n	8004eee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fe58 	bl	8003b6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	4b18      	ldr	r3, [pc, #96]	@ (8004f28 <xTaskRemoveFromEventList+0xb8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <xTaskRemoveFromEventList+0xb8>)
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <xTaskRemoveFromEventList+0xbc>)
 8004ede:	441a      	add	r2, r3
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fe fde4 	bl	8003ab4 <vListInsertEnd>
 8004eec:	e005      	b.n	8004efa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	480e      	ldr	r0, [pc, #56]	@ (8004f30 <xTaskRemoveFromEventList+0xc0>)
 8004ef6:	f7fe fddd 	bl	8003ab4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <xTaskRemoveFromEventList+0xc4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d905      	bls.n	8004f14 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <xTaskRemoveFromEventList+0xc8>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e001      	b.n	8004f18 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f18:	697b      	ldr	r3, [r7, #20]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200004b0 	.word	0x200004b0
 8004f28:	20000490 	.word	0x20000490
 8004f2c:	2000038c 	.word	0x2000038c
 8004f30:	20000448 	.word	0x20000448
 8004f34:	20000388 	.word	0x20000388
 8004f38:	2000049c 	.word	0x2000049c

08004f3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f44:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <vTaskInternalSetTimeOutState+0x24>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <vTaskInternalSetTimeOutState+0x28>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	200004a0 	.word	0x200004a0
 8004f64:	2000048c 	.word	0x2000048c

08004f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	b672      	cpsid	i
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	b662      	cpsie	i
 8004f8c:	613b      	str	r3, [r7, #16]
}
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10d      	bne.n	8004fb6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	b672      	cpsid	i
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	b662      	cpsie	i
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004fb6:	f000 fc79 	bl	80058ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <xTaskCheckForTimeOut+0xc8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d102      	bne.n	8004fda <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	e023      	b.n	8005022 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <xTaskCheckForTimeOut+0xcc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d007      	beq.n	8004ff6 <xTaskCheckForTimeOut+0x8e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d302      	bcc.n	8004ff6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e015      	b.n	8005022 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d20b      	bcs.n	8005018 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff95 	bl	8004f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e004      	b.n	8005022 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005022:	f000 fc79 	bl	8005918 <vPortExitCritical>

	return xReturn;
 8005026:	69fb      	ldr	r3, [r7, #28]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000048c 	.word	0x2000048c
 8005034:	200004a0 	.word	0x200004a0

08005038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <vTaskMissedYield+0x14>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	2000049c 	.word	0x2000049c

08005050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005058:	f000 f852 	bl	8005100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800505c:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <prvIdleTask+0x28>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d9f9      	bls.n	8005058 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <prvIdleTask+0x2c>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005074:	e7f0      	b.n	8005058 <prvIdleTask+0x8>
 8005076:	bf00      	nop
 8005078:	2000038c 	.word	0x2000038c
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	e00c      	b.n	80050a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <prvInitialiseTaskLists+0x60>)
 8005098:	4413      	add	r3, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fcdd 	bl	8003a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3301      	adds	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b06      	cmp	r3, #6
 80050aa:	d9ef      	bls.n	800508c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050ac:	480d      	ldr	r0, [pc, #52]	@ (80050e4 <prvInitialiseTaskLists+0x64>)
 80050ae:	f7fe fcd4 	bl	8003a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050b2:	480d      	ldr	r0, [pc, #52]	@ (80050e8 <prvInitialiseTaskLists+0x68>)
 80050b4:	f7fe fcd1 	bl	8003a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050b8:	480c      	ldr	r0, [pc, #48]	@ (80050ec <prvInitialiseTaskLists+0x6c>)
 80050ba:	f7fe fcce 	bl	8003a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050be:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <prvInitialiseTaskLists+0x70>)
 80050c0:	f7fe fccb 	bl	8003a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050c4:	480b      	ldr	r0, [pc, #44]	@ (80050f4 <prvInitialiseTaskLists+0x74>)
 80050c6:	f7fe fcc8 	bl	8003a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <prvInitialiseTaskLists+0x78>)
 80050cc:	4a05      	ldr	r2, [pc, #20]	@ (80050e4 <prvInitialiseTaskLists+0x64>)
 80050ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d0:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <prvInitialiseTaskLists+0x7c>)
 80050d2:	4a05      	ldr	r2, [pc, #20]	@ (80050e8 <prvInitialiseTaskLists+0x68>)
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	2000038c 	.word	0x2000038c
 80050e4:	20000418 	.word	0x20000418
 80050e8:	2000042c 	.word	0x2000042c
 80050ec:	20000448 	.word	0x20000448
 80050f0:	2000045c 	.word	0x2000045c
 80050f4:	20000474 	.word	0x20000474
 80050f8:	20000440 	.word	0x20000440
 80050fc:	20000444 	.word	0x20000444

08005100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005106:	e019      	b.n	800513c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005108:	f000 fbd0 	bl	80058ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510c:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <prvCheckTasksWaitingTermination+0x50>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fd28 	bl	8003b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <prvCheckTasksWaitingTermination+0x54>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	4a0b      	ldr	r2, [pc, #44]	@ (8005154 <prvCheckTasksWaitingTermination+0x54>)
 8005126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 8005130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005132:	f000 fbf1 	bl	8005918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f810 	bl	800515c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e1      	bne.n	8005108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	2000045c 	.word	0x2000045c
 8005154:	20000488 	.word	0x20000488
 8005158:	20000470 	.word	0x20000470

0800515c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd50 	bl	8005c18 <vPortFree>
				vPortFree( pxTCB );
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fd4d 	bl	8005c18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800517e:	e01b      	b.n	80051b8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005186:	2b01      	cmp	r3, #1
 8005188:	d103      	bne.n	8005192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fd44 	bl	8005c18 <vPortFree>
	}
 8005190:	e012      	b.n	80051b8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005198:	2b02      	cmp	r3, #2
 800519a:	d00d      	beq.n	80051b8 <prvDeleteTCB+0x5c>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	b672      	cpsid	i
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	b662      	cpsie	i
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <prvDeleteTCB+0x58>
	}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051c6:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <prvResetNextTaskUnblockTime+0x38>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d0:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <prvResetNextTaskUnblockTime+0x3c>)
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295
 80051d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051d8:	e008      	b.n	80051ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <prvResetNextTaskUnblockTime+0x38>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <prvResetNextTaskUnblockTime+0x3c>)
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000440 	.word	0x20000440
 80051fc:	200004a8 	.word	0x200004a8

08005200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <xTaskGetSchedulerState+0x34>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800520e:	2301      	movs	r3, #1
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e008      	b.n	8005226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005214:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <xTaskGetSchedulerState+0x38>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800521c:	2302      	movs	r3, #2
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e001      	b.n	8005226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005226:	687b      	ldr	r3, [r7, #4]
	}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000494 	.word	0x20000494
 8005238:	200004b0 	.word	0x200004b0

0800523c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d069      	beq.n	8005326 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005256:	4b36      	ldr	r3, [pc, #216]	@ (8005330 <xTaskPriorityInherit+0xf4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	429a      	cmp	r2, r3
 800525e:	d259      	bcs.n	8005314 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	db06      	blt.n	8005276 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005268:	4b31      	ldr	r3, [pc, #196]	@ (8005330 <xTaskPriorityInherit+0xf4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f1c3 0207 	rsb	r2, r3, #7
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6959      	ldr	r1, [r3, #20]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4a2b      	ldr	r2, [pc, #172]	@ (8005334 <xTaskPriorityInherit+0xf8>)
 8005288:	4413      	add	r3, r2
 800528a:	4299      	cmp	r1, r3
 800528c:	d13a      	bne.n	8005304 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	3304      	adds	r3, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe fc6b 	bl	8003b6e <uxListRemove>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d115      	bne.n	80052ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a2:	4924      	ldr	r1, [pc, #144]	@ (8005334 <xTaskPriorityInherit+0xf8>)
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xTaskPriorityInherit+0x8e>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	2201      	movs	r2, #1
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43da      	mvns	r2, r3
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <xTaskPriorityInherit+0xfc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4013      	ands	r3, r2
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <xTaskPriorityInherit+0xfc>)
 80052c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052ca:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <xTaskPriorityInherit+0xf4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <xTaskPriorityInherit+0xfc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	4a15      	ldr	r2, [pc, #84]	@ (8005338 <xTaskPriorityInherit+0xfc>)
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4a10      	ldr	r2, [pc, #64]	@ (8005334 <xTaskPriorityInherit+0xf8>)
 80052f4:	441a      	add	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f7fe fbd9 	bl	8003ab4 <vListInsertEnd>
 8005302:	e004      	b.n	800530e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005304:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <xTaskPriorityInherit+0xf4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e008      	b.n	8005326 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <xTaskPriorityInherit+0xf4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d201      	bcs.n	8005326 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005322:	2301      	movs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005326:	68fb      	ldr	r3, [r7, #12]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000388 	.word	0x20000388
 8005334:	2000038c 	.word	0x2000038c
 8005338:	20000490 	.word	0x20000490

0800533c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d074      	beq.n	800543c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005352:	4b3d      	ldr	r3, [pc, #244]	@ (8005448 <xTaskPriorityDisinherit+0x10c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	429a      	cmp	r2, r3
 800535a:	d00d      	beq.n	8005378 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	b672      	cpsid	i
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	b662      	cpsie	i
 8005370:	60fb      	str	r3, [r7, #12]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	b672      	cpsid	i
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	b662      	cpsie	i
 8005394:	60bb      	str	r3, [r7, #8]
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	e7fd      	b.n	8005398 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d044      	beq.n	800543c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d140      	bne.n	800543c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fbd5 	bl	8003b6e <uxListRemove>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	491f      	ldr	r1, [pc, #124]	@ (800544c <xTaskPriorityDisinherit+0x110>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xTaskPriorityDisinherit+0xba>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	4b18      	ldr	r3, [pc, #96]	@ (8005450 <xTaskPriorityDisinherit+0x114>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4013      	ands	r3, r2
 80053f2:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <xTaskPriorityDisinherit+0x114>)
 80053f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f1c3 0207 	rsb	r2, r3, #7
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <xTaskPriorityDisinherit+0x114>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	4a0d      	ldr	r2, [pc, #52]	@ (8005450 <xTaskPriorityDisinherit+0x114>)
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <xTaskPriorityDisinherit+0x110>)
 800542a:	441a      	add	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7fe fb3e 	bl	8003ab4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
	}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000388 	.word	0x20000388
 800544c:	2000038c 	.word	0x2000038c
 8005450:	20000490 	.word	0x20000490

08005454 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005462:	2301      	movs	r3, #1
 8005464:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8089 	beq.w	8005580 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d902      	bls.n	80054a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e002      	b.n	80054a8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d066      	beq.n	8005580 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d161      	bne.n	8005580 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80054bc:	4b32      	ldr	r3, [pc, #200]	@ (8005588 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d10d      	bne.n	80054e2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	b672      	cpsid	i
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	b662      	cpsie	i
 80054da:	60bb      	str	r3, [r7, #8]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	db04      	blt.n	8005500 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f1c3 0207 	rsb	r2, r3, #7
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	6959      	ldr	r1, [r3, #20]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005510:	4413      	add	r3, r2
 8005512:	4299      	cmp	r1, r3
 8005514:	d134      	bne.n	8005580 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3304      	adds	r3, #4
 800551a:	4618      	mov	r0, r3
 800551c:	f7fe fb27 	bl	8003b6e <uxListRemove>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d115      	bne.n	8005552 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	4918      	ldr	r1, [pc, #96]	@ (800558c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	2201      	movs	r2, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43da      	mvns	r2, r3
 8005548:	4b11      	ldr	r3, [pc, #68]	@ (8005590 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4013      	ands	r3, r2
 800554e:	4a10      	ldr	r2, [pc, #64]	@ (8005590 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005550:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	2201      	movs	r2, #1
 8005558:	409a      	lsls	r2, r3
 800555a:	4b0d      	ldr	r3, [pc, #52]	@ (8005590 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4313      	orrs	r3, r2
 8005560:	4a0b      	ldr	r2, [pc, #44]	@ (8005590 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a06      	ldr	r2, [pc, #24]	@ (800558c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005572:	441a      	add	r2, r3
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7fe fa9a 	bl	8003ab4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005580:	bf00      	nop
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000388 	.word	0x20000388
 800558c:	2000038c 	.word	0x2000038c
 8005590:	20000490 	.word	0x20000490

08005594 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055a6:	3201      	adds	r2, #1
 80055a8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80055aa:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80055ac:	681b      	ldr	r3, [r3, #0]
	}
 80055ae:	4618      	mov	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20000388 	.word	0x20000388

080055bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055c6:	4b29      	ldr	r3, [pc, #164]	@ (800566c <prvAddCurrentTaskToDelayedList+0xb0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055cc:	4b28      	ldr	r3, [pc, #160]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe facb 	bl	8003b6e <uxListRemove>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055de:	4b24      	ldr	r3, [pc, #144]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	2201      	movs	r2, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43da      	mvns	r2, r3
 80055ec:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4013      	ands	r3, r2
 80055f2:	4a20      	ldr	r2, [pc, #128]	@ (8005674 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d10a      	bne.n	8005614 <prvAddCurrentTaskToDelayedList+0x58>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005604:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	481a      	ldr	r0, [pc, #104]	@ (8005678 <prvAddCurrentTaskToDelayedList+0xbc>)
 800560e:	f7fe fa51 	bl	8003ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005612:	e026      	b.n	8005662 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800561c:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	429a      	cmp	r2, r3
 800562a:	d209      	bcs.n	8005640 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800562c:	4b13      	ldr	r3, [pc, #76]	@ (800567c <prvAddCurrentTaskToDelayedList+0xc0>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe fa5f 	bl	8003afc <vListInsert>
}
 800563e:	e010      	b.n	8005662 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005640:	4b0f      	ldr	r3, [pc, #60]	@ (8005680 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3304      	adds	r3, #4
 800564a:	4619      	mov	r1, r3
 800564c:	4610      	mov	r0, r2
 800564e:	f7fe fa55 	bl	8003afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005652:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d202      	bcs.n	8005662 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800565c:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <prvAddCurrentTaskToDelayedList+0xc8>)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6013      	str	r3, [r2, #0]
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	2000048c 	.word	0x2000048c
 8005670:	20000388 	.word	0x20000388
 8005674:	20000490 	.word	0x20000490
 8005678:	20000474 	.word	0x20000474
 800567c:	20000444 	.word	0x20000444
 8005680:	20000440 	.word	0x20000440
 8005684:	200004a8 	.word	0x200004a8

08005688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3b04      	subs	r3, #4
 8005698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3b04      	subs	r3, #4
 80056a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f023 0201 	bic.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056b8:	4a0c      	ldr	r2, [pc, #48]	@ (80056ec <pxPortInitialiseStack+0x64>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b14      	subs	r3, #20
 80056c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f06f 0202 	mvn.w	r2, #2
 80056d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3b20      	subs	r3, #32
 80056dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	080056f1 	.word	0x080056f1

080056f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056fa:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <prvTaskExitError+0x60>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d00d      	beq.n	8005720 <prvTaskExitError+0x30>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	b672      	cpsid	i
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	b662      	cpsie	i
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <prvTaskExitError+0x2c>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	b672      	cpsid	i
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	b662      	cpsie	i
 8005734:	60bb      	str	r3, [r7, #8]
}
 8005736:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005738:	bf00      	nop
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0fc      	beq.n	800573a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	2000000c 	.word	0x2000000c
	...

08005760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005760:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <pxCurrentTCBConst2>)
 8005762:	6819      	ldr	r1, [r3, #0]
 8005764:	6808      	ldr	r0, [r1, #0]
 8005766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576a:	f380 8809 	msr	PSP, r0
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	4770      	bx	lr
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst2>:
 8005780:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005788:	4808      	ldr	r0, [pc, #32]	@ (80057ac <prvPortStartFirstTask+0x24>)
 800578a:	6800      	ldr	r0, [r0, #0]
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f380 8808 	msr	MSP, r0
 8005792:	f04f 0000 	mov.w	r0, #0
 8005796:	f380 8814 	msr	CONTROL, r0
 800579a:	b662      	cpsie	i
 800579c:	b661      	cpsie	f
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	df00      	svc	0
 80057a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057aa:	bf00      	nop
 80057ac:	e000ed08 	.word	0xe000ed08

080057b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057b6:	4b37      	ldr	r3, [pc, #220]	@ (8005894 <xPortStartScheduler+0xe4>)
 80057b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22ff      	movs	r2, #255	@ 0xff
 80057c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4b2f      	ldr	r3, [pc, #188]	@ (8005898 <xPortStartScheduler+0xe8>)
 80057dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057de:	4b2f      	ldr	r3, [pc, #188]	@ (800589c <xPortStartScheduler+0xec>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057e4:	e009      	b.n	80057fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80057e6:	4b2d      	ldr	r3, [pc, #180]	@ (800589c <xPortStartScheduler+0xec>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <xPortStartScheduler+0xec>)
 80057ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005802:	2b80      	cmp	r3, #128	@ 0x80
 8005804:	d0ef      	beq.n	80057e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005806:	4b25      	ldr	r3, [pc, #148]	@ (800589c <xPortStartScheduler+0xec>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1c3 0307 	rsb	r3, r3, #7
 800580e:	2b04      	cmp	r3, #4
 8005810:	d00d      	beq.n	800582e <xPortStartScheduler+0x7e>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	b672      	cpsid	i
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	b662      	cpsie	i
 8005826:	60bb      	str	r3, [r7, #8]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800582e:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <xPortStartScheduler+0xec>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4a19      	ldr	r2, [pc, #100]	@ (800589c <xPortStartScheduler+0xec>)
 8005836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005838:	4b18      	ldr	r3, [pc, #96]	@ (800589c <xPortStartScheduler+0xec>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <xPortStartScheduler+0xec>)
 8005842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800584c:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <xPortStartScheduler+0xf0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <xPortStartScheduler+0xf0>)
 8005852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005858:	4b11      	ldr	r3, [pc, #68]	@ (80058a0 <xPortStartScheduler+0xf0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <xPortStartScheduler+0xf0>)
 800585e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005864:	f000 f8dc 	bl	8005a20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <xPortStartScheduler+0xf4>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800586e:	f000 f8fb 	bl	8005a68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <xPortStartScheduler+0xf8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0c      	ldr	r2, [pc, #48]	@ (80058a8 <xPortStartScheduler+0xf8>)
 8005878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800587c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800587e:	f7ff ff83 	bl	8005788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005882:	f7ff fa6f 	bl	8004d64 <vTaskSwitchContext>
	prvTaskExitError();
 8005886:	f7ff ff33 	bl	80056f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000e400 	.word	0xe000e400
 8005898:	200004b4 	.word	0x200004b4
 800589c:	200004b8 	.word	0x200004b8
 80058a0:	e000ed20 	.word	0xe000ed20
 80058a4:	2000000c 	.word	0x2000000c
 80058a8:	e000ef34 	.word	0xe000ef34

080058ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	b672      	cpsid	i
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	b662      	cpsie	i
 80058c6:	607b      	str	r3, [r7, #4]
}
 80058c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058ca:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <vPortEnterCritical+0x64>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005910 <vPortEnterCritical+0x64>)
 80058d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <vPortEnterCritical+0x64>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d112      	bne.n	8005902 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <vPortEnterCritical+0x68>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <vPortEnterCritical+0x56>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	b672      	cpsid	i
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	b662      	cpsie	i
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <vPortEnterCritical+0x52>
	}
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <vPortExitCritical+0x54>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <vPortExitCritical+0x2a>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	b672      	cpsid	i
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	b662      	cpsie	i
 800593a:	607b      	str	r3, [r7, #4]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <vPortExitCritical+0x54>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a08      	ldr	r2, [pc, #32]	@ (800596c <vPortExitCritical+0x54>)
 800594a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800594c:	4b07      	ldr	r3, [pc, #28]	@ (800596c <vPortExitCritical+0x54>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d105      	bne.n	8005960 <vPortExitCritical+0x48>
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800595e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	2000000c 	.word	0x2000000c

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b15      	ldr	r3, [pc, #84]	@ (80059d0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f01e 0f10 	tst.w	lr, #16
 8005980:	bf08      	it	eq
 8005982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598a:	6010      	str	r0, [r2, #0]
 800598c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005994:	b672      	cpsid	i
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	b662      	cpsie	i
 80059a4:	f7ff f9de 	bl	8004d64 <vTaskSwitchContext>
 80059a8:	f04f 0000 	mov.w	r0, #0
 80059ac:	f380 8811 	msr	BASEPRI, r0
 80059b0:	bc09      	pop	{r0, r3}
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	6808      	ldr	r0, [r1, #0]
 80059b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	f01e 0f10 	tst.w	lr, #16
 80059be:	bf08      	it	eq
 80059c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059c4:	f380 8809 	msr	PSP, r0
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop

080059d0 <pxCurrentTCBConst>:
 80059d0:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop

080059d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	b672      	cpsid	i
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	b662      	cpsie	i
 80059f2:	607b      	str	r3, [r7, #4]
}
 80059f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059f6:	f7ff f8f9 	bl	8004bec <xTaskIncrementTick>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <xPortSysTickHandler+0x44>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	f383 8811 	msr	BASEPRI, r3
}
 8005a12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <vPortSetupTimerInterrupt+0x34>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <vPortSetupTimerInterrupt+0x38>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <vPortSetupTimerInterrupt+0x3c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a0a      	ldr	r2, [pc, #40]	@ (8005a60 <vPortSetupTimerInterrupt+0x40>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	4a09      	ldr	r2, [pc, #36]	@ (8005a64 <vPortSetupTimerInterrupt+0x44>)
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a42:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <vPortSetupTimerInterrupt+0x34>)
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	e000e010 	.word	0xe000e010
 8005a58:	e000e018 	.word	0xe000e018
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	10624dd3 	.word	0x10624dd3
 8005a64:	e000e014 	.word	0xe000e014

08005a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a78 <vPortEnableVFP+0x10>
 8005a6c:	6801      	ldr	r1, [r0, #0]
 8005a6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a72:	6001      	str	r1, [r0, #0]
 8005a74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a76:	bf00      	nop
 8005a78:	e000ed88 	.word	0xe000ed88

08005a7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a88:	f7fe ffda 	bl	8004a40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005c04 <pvPortMalloc+0x188>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a94:	f000 f920 	bl	8005cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a98:	4b5b      	ldr	r3, [pc, #364]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 8094 	bne.w	8005bce <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8005aac:	2208      	movs	r2, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d017      	beq.n	8005aee <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f023 0307 	bic.w	r3, r3, #7
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00d      	beq.n	8005aee <pvPortMalloc+0x72>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	617b      	str	r3, [r7, #20]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d06c      	beq.n	8005bce <pvPortMalloc+0x152>
 8005af4:	4b45      	ldr	r3, [pc, #276]	@ (8005c0c <pvPortMalloc+0x190>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d867      	bhi.n	8005bce <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005afe:	4b44      	ldr	r3, [pc, #272]	@ (8005c10 <pvPortMalloc+0x194>)
 8005b00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b02:	4b43      	ldr	r3, [pc, #268]	@ (8005c10 <pvPortMalloc+0x194>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b08:	e004      	b.n	8005b14 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d903      	bls.n	8005b26 <pvPortMalloc+0xaa>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f1      	bne.n	8005b0a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b26:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <pvPortMalloc+0x188>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d04e      	beq.n	8005bce <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2208      	movs	r2, #8
 8005b36:	4413      	add	r3, r2
 8005b38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d922      	bls.n	8005b98 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <pvPortMalloc+0x104>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	b672      	cpsid	i
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	b662      	cpsie	i
 8005b78:	613b      	str	r3, [r7, #16]
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b92:	69b8      	ldr	r0, [r7, #24]
 8005b94:	f000 f902 	bl	8005d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b98:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <pvPortMalloc+0x190>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c0c <pvPortMalloc+0x190>)
 8005ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ba6:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <pvPortMalloc+0x190>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <pvPortMalloc+0x198>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d203      	bcs.n	8005bba <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bb2:	4b16      	ldr	r3, [pc, #88]	@ (8005c0c <pvPortMalloc+0x190>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a17      	ldr	r2, [pc, #92]	@ (8005c14 <pvPortMalloc+0x198>)
 8005bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4b12      	ldr	r3, [pc, #72]	@ (8005c08 <pvPortMalloc+0x18c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bce:	f7fe ff45 	bl	8004a5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <pvPortMalloc+0x17c>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <pvPortMalloc+0x178>
	return pvReturn;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	@ 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	200040c4 	.word	0x200040c4
 8005c08:	200040d0 	.word	0x200040d0
 8005c0c:	200040c8 	.word	0x200040c8
 8005c10:	200040bc 	.word	0x200040bc
 8005c14:	200040cc 	.word	0x200040cc

08005c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04e      	beq.n	8005cc8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	425b      	negs	r3, r3
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b24      	ldr	r3, [pc, #144]	@ (8005cd0 <vPortFree+0xb8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <vPortFree+0x4a>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	b672      	cpsid	i
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	b662      	cpsie	i
 8005c5a:	60fb      	str	r3, [r7, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <vPortFree+0x6e>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6e:	b672      	cpsid	i
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	b662      	cpsie	i
 8005c7e:	60bb      	str	r3, [r7, #8]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <vPortFree+0xb8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d019      	beq.n	8005cc8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d115      	bne.n	8005cc8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd0 <vPortFree+0xb8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cac:	f7fe fec8 	bl	8004a40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <vPortFree+0xbc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	4a06      	ldr	r2, [pc, #24]	@ (8005cd4 <vPortFree+0xbc>)
 8005cbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cbe:	6938      	ldr	r0, [r7, #16]
 8005cc0:	f000 f86c 	bl	8005d9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005cc4:	f7fe feca 	bl	8004a5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	200040d0 	.word	0x200040d0
 8005cd4:	200040c8 	.word	0x200040c8

08005cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cde:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ce4:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <prvHeapInit+0xac>)
 8005ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00c      	beq.n	8005d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4a1f      	ldr	r2, [pc, #124]	@ (8005d84 <prvHeapInit+0xac>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d10:	4a1d      	ldr	r2, [pc, #116]	@ (8005d88 <prvHeapInit+0xb0>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d16:	4b1c      	ldr	r3, [pc, #112]	@ (8005d88 <prvHeapInit+0xb0>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d24:	2208      	movs	r2, #8
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a15      	ldr	r2, [pc, #84]	@ (8005d8c <prvHeapInit+0xb4>)
 8005d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <prvHeapInit+0xb4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d42:	4b12      	ldr	r3, [pc, #72]	@ (8005d8c <prvHeapInit+0xb4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d58:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <prvHeapInit+0xb4>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <prvHeapInit+0xb8>)
 8005d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <prvHeapInit+0xbc>)
 8005d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d70:	4b09      	ldr	r3, [pc, #36]	@ (8005d98 <prvHeapInit+0xc0>)
 8005d72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d76:	601a      	str	r2, [r3, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	200004bc 	.word	0x200004bc
 8005d88:	200040bc 	.word	0x200040bc
 8005d8c:	200040c4 	.word	0x200040c4
 8005d90:	200040cc 	.word	0x200040cc
 8005d94:	200040c8 	.word	0x200040c8
 8005d98:	200040d0 	.word	0x200040d0

08005d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005da4:	4b28      	ldr	r3, [pc, #160]	@ (8005e48 <prvInsertBlockIntoFreeList+0xac>)
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e002      	b.n	8005db0 <prvInsertBlockIntoFreeList+0x14>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d8f7      	bhi.n	8005daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d108      	bne.n	8005dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d118      	bne.n	8005e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <prvInsertBlockIntoFreeList+0xb0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d00d      	beq.n	8005e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e008      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e4c <prvInsertBlockIntoFreeList+0xb0>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e003      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d002      	beq.n	8005e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	200040bc 	.word	0x200040bc
 8005e4c:	200040c4 	.word	0x200040c4

08005e50 <std>:
 8005e50:	2300      	movs	r3, #0
 8005e52:	b510      	push	{r4, lr}
 8005e54:	4604      	mov	r4, r0
 8005e56:	e9c0 3300 	strd	r3, r3, [r0]
 8005e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e5e:	6083      	str	r3, [r0, #8]
 8005e60:	8181      	strh	r1, [r0, #12]
 8005e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e64:	81c2      	strh	r2, [r0, #14]
 8005e66:	6183      	str	r3, [r0, #24]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	305c      	adds	r0, #92	@ 0x5c
 8005e6e:	f000 f9f9 	bl	8006264 <memset>
 8005e72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea8 <std+0x58>)
 8005e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e76:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <std+0x5c>)
 8005e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb0 <std+0x60>)
 8005e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <std+0x64>)
 8005e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e82:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb8 <std+0x68>)
 8005e84:	6224      	str	r4, [r4, #32]
 8005e86:	429c      	cmp	r4, r3
 8005e88:	d006      	beq.n	8005e98 <std+0x48>
 8005e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e8e:	4294      	cmp	r4, r2
 8005e90:	d002      	beq.n	8005e98 <std+0x48>
 8005e92:	33d0      	adds	r3, #208	@ 0xd0
 8005e94:	429c      	cmp	r4, r3
 8005e96:	d105      	bne.n	8005ea4 <std+0x54>
 8005e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea0:	f000 ba58 	b.w	8006354 <__retarget_lock_init_recursive>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	bf00      	nop
 8005ea8:	080060b5 	.word	0x080060b5
 8005eac:	080060d7 	.word	0x080060d7
 8005eb0:	0800610f 	.word	0x0800610f
 8005eb4:	08006133 	.word	0x08006133
 8005eb8:	200040d4 	.word	0x200040d4

08005ebc <stdio_exit_handler>:
 8005ebc:	4a02      	ldr	r2, [pc, #8]	@ (8005ec8 <stdio_exit_handler+0xc>)
 8005ebe:	4903      	ldr	r1, [pc, #12]	@ (8005ecc <stdio_exit_handler+0x10>)
 8005ec0:	4803      	ldr	r0, [pc, #12]	@ (8005ed0 <stdio_exit_handler+0x14>)
 8005ec2:	f000 b869 	b.w	8005f98 <_fwalk_sglue>
 8005ec6:	bf00      	nop
 8005ec8:	20000010 	.word	0x20000010
 8005ecc:	08006c11 	.word	0x08006c11
 8005ed0:	20000020 	.word	0x20000020

08005ed4 <cleanup_stdio>:
 8005ed4:	6841      	ldr	r1, [r0, #4]
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <cleanup_stdio+0x34>)
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	b510      	push	{r4, lr}
 8005edc:	4604      	mov	r4, r0
 8005ede:	d001      	beq.n	8005ee4 <cleanup_stdio+0x10>
 8005ee0:	f000 fe96 	bl	8006c10 <_fflush_r>
 8005ee4:	68a1      	ldr	r1, [r4, #8]
 8005ee6:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <cleanup_stdio+0x38>)
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	d002      	beq.n	8005ef2 <cleanup_stdio+0x1e>
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fe8f 	bl	8006c10 <_fflush_r>
 8005ef2:	68e1      	ldr	r1, [r4, #12]
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <cleanup_stdio+0x3c>)
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	d004      	beq.n	8005f04 <cleanup_stdio+0x30>
 8005efa:	4620      	mov	r0, r4
 8005efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f00:	f000 be86 	b.w	8006c10 <_fflush_r>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	200040d4 	.word	0x200040d4
 8005f0c:	2000413c 	.word	0x2000413c
 8005f10:	200041a4 	.word	0x200041a4

08005f14 <global_stdio_init.part.0>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <global_stdio_init.part.0+0x30>)
 8005f18:	4c0b      	ldr	r4, [pc, #44]	@ (8005f48 <global_stdio_init.part.0+0x34>)
 8005f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f4c <global_stdio_init.part.0+0x38>)
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	2200      	movs	r2, #0
 8005f22:	2104      	movs	r1, #4
 8005f24:	f7ff ff94 	bl	8005e50 <std>
 8005f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	2109      	movs	r1, #9
 8005f30:	f7ff ff8e 	bl	8005e50 <std>
 8005f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f38:	2202      	movs	r2, #2
 8005f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3e:	2112      	movs	r1, #18
 8005f40:	f7ff bf86 	b.w	8005e50 <std>
 8005f44:	2000420c 	.word	0x2000420c
 8005f48:	200040d4 	.word	0x200040d4
 8005f4c:	08005ebd 	.word	0x08005ebd

08005f50 <__sfp_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	@ (8005f58 <__sfp_lock_acquire+0x8>)
 8005f52:	f000 ba00 	b.w	8006356 <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	20004215 	.word	0x20004215

08005f5c <__sfp_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	@ (8005f64 <__sfp_lock_release+0x8>)
 8005f5e:	f000 b9fb 	b.w	8006358 <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	20004215 	.word	0x20004215

08005f68 <__sinit>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	f7ff fff0 	bl	8005f50 <__sfp_lock_acquire>
 8005f70:	6a23      	ldr	r3, [r4, #32]
 8005f72:	b11b      	cbz	r3, 8005f7c <__sinit+0x14>
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f7ff bff0 	b.w	8005f5c <__sfp_lock_release>
 8005f7c:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <__sinit+0x28>)
 8005f7e:	6223      	str	r3, [r4, #32]
 8005f80:	4b04      	ldr	r3, [pc, #16]	@ (8005f94 <__sinit+0x2c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f5      	bne.n	8005f74 <__sinit+0xc>
 8005f88:	f7ff ffc4 	bl	8005f14 <global_stdio_init.part.0>
 8005f8c:	e7f2      	b.n	8005f74 <__sinit+0xc>
 8005f8e:	bf00      	nop
 8005f90:	08005ed5 	.word	0x08005ed5
 8005f94:	2000420c 	.word	0x2000420c

08005f98 <_fwalk_sglue>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	4607      	mov	r7, r0
 8005f9e:	4688      	mov	r8, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8005fac:	d505      	bpl.n	8005fba <_fwalk_sglue+0x22>
 8005fae:	6824      	ldr	r4, [r4, #0]
 8005fb0:	2c00      	cmp	r4, #0
 8005fb2:	d1f7      	bne.n	8005fa4 <_fwalk_sglue+0xc>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d907      	bls.n	8005fd0 <_fwalk_sglue+0x38>
 8005fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	d003      	beq.n	8005fd0 <_fwalk_sglue+0x38>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	47c0      	blx	r8
 8005fce:	4306      	orrs	r6, r0
 8005fd0:	3568      	adds	r5, #104	@ 0x68
 8005fd2:	e7e9      	b.n	8005fa8 <_fwalk_sglue+0x10>

08005fd4 <iprintf>:
 8005fd4:	b40f      	push	{r0, r1, r2, r3}
 8005fd6:	b507      	push	{r0, r1, r2, lr}
 8005fd8:	4906      	ldr	r1, [pc, #24]	@ (8005ff4 <iprintf+0x20>)
 8005fda:	ab04      	add	r3, sp, #16
 8005fdc:	6808      	ldr	r0, [r1, #0]
 8005fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe2:	6881      	ldr	r1, [r0, #8]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	f000 fae9 	bl	80065bc <_vfiprintf_r>
 8005fea:	b003      	add	sp, #12
 8005fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff0:	b004      	add	sp, #16
 8005ff2:	4770      	bx	lr
 8005ff4:	2000001c 	.word	0x2000001c

08005ff8 <_puts_r>:
 8005ff8:	6a03      	ldr	r3, [r0, #32]
 8005ffa:	b570      	push	{r4, r5, r6, lr}
 8005ffc:	6884      	ldr	r4, [r0, #8]
 8005ffe:	4605      	mov	r5, r0
 8006000:	460e      	mov	r6, r1
 8006002:	b90b      	cbnz	r3, 8006008 <_puts_r+0x10>
 8006004:	f7ff ffb0 	bl	8005f68 <__sinit>
 8006008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800600a:	07db      	lsls	r3, r3, #31
 800600c:	d405      	bmi.n	800601a <_puts_r+0x22>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	0598      	lsls	r0, r3, #22
 8006012:	d402      	bmi.n	800601a <_puts_r+0x22>
 8006014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006016:	f000 f99e 	bl	8006356 <__retarget_lock_acquire_recursive>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	0719      	lsls	r1, r3, #28
 800601e:	d502      	bpl.n	8006026 <_puts_r+0x2e>
 8006020:	6923      	ldr	r3, [r4, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d135      	bne.n	8006092 <_puts_r+0x9a>
 8006026:	4621      	mov	r1, r4
 8006028:	4628      	mov	r0, r5
 800602a:	f000 f8c5 	bl	80061b8 <__swsetup_r>
 800602e:	b380      	cbz	r0, 8006092 <_puts_r+0x9a>
 8006030:	f04f 35ff 	mov.w	r5, #4294967295
 8006034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006036:	07da      	lsls	r2, r3, #31
 8006038:	d405      	bmi.n	8006046 <_puts_r+0x4e>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	059b      	lsls	r3, r3, #22
 800603e:	d402      	bmi.n	8006046 <_puts_r+0x4e>
 8006040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006042:	f000 f989 	bl	8006358 <__retarget_lock_release_recursive>
 8006046:	4628      	mov	r0, r5
 8006048:	bd70      	pop	{r4, r5, r6, pc}
 800604a:	2b00      	cmp	r3, #0
 800604c:	da04      	bge.n	8006058 <_puts_r+0x60>
 800604e:	69a2      	ldr	r2, [r4, #24]
 8006050:	429a      	cmp	r2, r3
 8006052:	dc17      	bgt.n	8006084 <_puts_r+0x8c>
 8006054:	290a      	cmp	r1, #10
 8006056:	d015      	beq.n	8006084 <_puts_r+0x8c>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	6022      	str	r2, [r4, #0]
 800605e:	7019      	strb	r1, [r3, #0]
 8006060:	68a3      	ldr	r3, [r4, #8]
 8006062:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006066:	3b01      	subs	r3, #1
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	2900      	cmp	r1, #0
 800606c:	d1ed      	bne.n	800604a <_puts_r+0x52>
 800606e:	2b00      	cmp	r3, #0
 8006070:	da11      	bge.n	8006096 <_puts_r+0x9e>
 8006072:	4622      	mov	r2, r4
 8006074:	210a      	movs	r1, #10
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f85f 	bl	800613a <__swbuf_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d0d7      	beq.n	8006030 <_puts_r+0x38>
 8006080:	250a      	movs	r5, #10
 8006082:	e7d7      	b.n	8006034 <_puts_r+0x3c>
 8006084:	4622      	mov	r2, r4
 8006086:	4628      	mov	r0, r5
 8006088:	f000 f857 	bl	800613a <__swbuf_r>
 800608c:	3001      	adds	r0, #1
 800608e:	d1e7      	bne.n	8006060 <_puts_r+0x68>
 8006090:	e7ce      	b.n	8006030 <_puts_r+0x38>
 8006092:	3e01      	subs	r6, #1
 8006094:	e7e4      	b.n	8006060 <_puts_r+0x68>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	220a      	movs	r2, #10
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e7ee      	b.n	8006080 <_puts_r+0x88>
	...

080060a4 <puts>:
 80060a4:	4b02      	ldr	r3, [pc, #8]	@ (80060b0 <puts+0xc>)
 80060a6:	4601      	mov	r1, r0
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	f7ff bfa5 	b.w	8005ff8 <_puts_r>
 80060ae:	bf00      	nop
 80060b0:	2000001c 	.word	0x2000001c

080060b4 <__sread>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	f000 f8fc 	bl	80062b8 <_read_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	bfab      	itete	ge
 80060c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060c6:	89a3      	ldrhlt	r3, [r4, #12]
 80060c8:	181b      	addge	r3, r3, r0
 80060ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060ce:	bfac      	ite	ge
 80060d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060d2:	81a3      	strhlt	r3, [r4, #12]
 80060d4:	bd10      	pop	{r4, pc}

080060d6 <__swrite>:
 80060d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	461f      	mov	r7, r3
 80060dc:	898b      	ldrh	r3, [r1, #12]
 80060de:	05db      	lsls	r3, r3, #23
 80060e0:	4605      	mov	r5, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4616      	mov	r6, r2
 80060e6:	d505      	bpl.n	80060f4 <__swrite+0x1e>
 80060e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ec:	2302      	movs	r3, #2
 80060ee:	2200      	movs	r2, #0
 80060f0:	f000 f8d0 	bl	8006294 <_lseek_r>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	4632      	mov	r2, r6
 8006102:	463b      	mov	r3, r7
 8006104:	4628      	mov	r0, r5
 8006106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	f000 b8e7 	b.w	80062dc <_write_r>

0800610e <__sseek>:
 800610e:	b510      	push	{r4, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006116:	f000 f8bd 	bl	8006294 <_lseek_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	bf15      	itete	ne
 8006120:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800612a:	81a3      	strheq	r3, [r4, #12]
 800612c:	bf18      	it	ne
 800612e:	81a3      	strhne	r3, [r4, #12]
 8006130:	bd10      	pop	{r4, pc}

08006132 <__sclose>:
 8006132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006136:	f000 b89d 	b.w	8006274 <_close_r>

0800613a <__swbuf_r>:
 800613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613c:	460e      	mov	r6, r1
 800613e:	4614      	mov	r4, r2
 8006140:	4605      	mov	r5, r0
 8006142:	b118      	cbz	r0, 800614c <__swbuf_r+0x12>
 8006144:	6a03      	ldr	r3, [r0, #32]
 8006146:	b90b      	cbnz	r3, 800614c <__swbuf_r+0x12>
 8006148:	f7ff ff0e 	bl	8005f68 <__sinit>
 800614c:	69a3      	ldr	r3, [r4, #24]
 800614e:	60a3      	str	r3, [r4, #8]
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	071a      	lsls	r2, r3, #28
 8006154:	d501      	bpl.n	800615a <__swbuf_r+0x20>
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	b943      	cbnz	r3, 800616c <__swbuf_r+0x32>
 800615a:	4621      	mov	r1, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 f82b 	bl	80061b8 <__swsetup_r>
 8006162:	b118      	cbz	r0, 800616c <__swbuf_r+0x32>
 8006164:	f04f 37ff 	mov.w	r7, #4294967295
 8006168:	4638      	mov	r0, r7
 800616a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	6922      	ldr	r2, [r4, #16]
 8006170:	1a98      	subs	r0, r3, r2
 8006172:	6963      	ldr	r3, [r4, #20]
 8006174:	b2f6      	uxtb	r6, r6
 8006176:	4283      	cmp	r3, r0
 8006178:	4637      	mov	r7, r6
 800617a:	dc05      	bgt.n	8006188 <__swbuf_r+0x4e>
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f000 fd46 	bl	8006c10 <_fflush_r>
 8006184:	2800      	cmp	r0, #0
 8006186:	d1ed      	bne.n	8006164 <__swbuf_r+0x2a>
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	3b01      	subs	r3, #1
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	701e      	strb	r6, [r3, #0]
 8006196:	6962      	ldr	r2, [r4, #20]
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	429a      	cmp	r2, r3
 800619c:	d004      	beq.n	80061a8 <__swbuf_r+0x6e>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d5e1      	bpl.n	8006168 <__swbuf_r+0x2e>
 80061a4:	2e0a      	cmp	r6, #10
 80061a6:	d1df      	bne.n	8006168 <__swbuf_r+0x2e>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f000 fd30 	bl	8006c10 <_fflush_r>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d0d9      	beq.n	8006168 <__swbuf_r+0x2e>
 80061b4:	e7d6      	b.n	8006164 <__swbuf_r+0x2a>
	...

080061b8 <__swsetup_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4b29      	ldr	r3, [pc, #164]	@ (8006260 <__swsetup_r+0xa8>)
 80061bc:	4605      	mov	r5, r0
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	460c      	mov	r4, r1
 80061c2:	b118      	cbz	r0, 80061cc <__swsetup_r+0x14>
 80061c4:	6a03      	ldr	r3, [r0, #32]
 80061c6:	b90b      	cbnz	r3, 80061cc <__swsetup_r+0x14>
 80061c8:	f7ff fece 	bl	8005f68 <__sinit>
 80061cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d0:	0719      	lsls	r1, r3, #28
 80061d2:	d422      	bmi.n	800621a <__swsetup_r+0x62>
 80061d4:	06da      	lsls	r2, r3, #27
 80061d6:	d407      	bmi.n	80061e8 <__swsetup_r+0x30>
 80061d8:	2209      	movs	r2, #9
 80061da:	602a      	str	r2, [r5, #0]
 80061dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	e033      	b.n	8006250 <__swsetup_r+0x98>
 80061e8:	0758      	lsls	r0, r3, #29
 80061ea:	d512      	bpl.n	8006212 <__swsetup_r+0x5a>
 80061ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ee:	b141      	cbz	r1, 8006202 <__swsetup_r+0x4a>
 80061f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061f4:	4299      	cmp	r1, r3
 80061f6:	d002      	beq.n	80061fe <__swsetup_r+0x46>
 80061f8:	4628      	mov	r0, r5
 80061fa:	f000 f8bd 	bl	8006378 <_free_r>
 80061fe:	2300      	movs	r3, #0
 8006200:	6363      	str	r3, [r4, #52]	@ 0x34
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	2300      	movs	r3, #0
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	f043 0308 	orr.w	r3, r3, #8
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	b94b      	cbnz	r3, 8006232 <__swsetup_r+0x7a>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006228:	d003      	beq.n	8006232 <__swsetup_r+0x7a>
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fd3d 	bl	8006cac <__smakebuf_r>
 8006232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006236:	f013 0201 	ands.w	r2, r3, #1
 800623a:	d00a      	beq.n	8006252 <__swsetup_r+0x9a>
 800623c:	2200      	movs	r2, #0
 800623e:	60a2      	str	r2, [r4, #8]
 8006240:	6962      	ldr	r2, [r4, #20]
 8006242:	4252      	negs	r2, r2
 8006244:	61a2      	str	r2, [r4, #24]
 8006246:	6922      	ldr	r2, [r4, #16]
 8006248:	b942      	cbnz	r2, 800625c <__swsetup_r+0xa4>
 800624a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800624e:	d1c5      	bne.n	80061dc <__swsetup_r+0x24>
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	0799      	lsls	r1, r3, #30
 8006254:	bf58      	it	pl
 8006256:	6962      	ldrpl	r2, [r4, #20]
 8006258:	60a2      	str	r2, [r4, #8]
 800625a:	e7f4      	b.n	8006246 <__swsetup_r+0x8e>
 800625c:	2000      	movs	r0, #0
 800625e:	e7f7      	b.n	8006250 <__swsetup_r+0x98>
 8006260:	2000001c 	.word	0x2000001c

08006264 <memset>:
 8006264:	4402      	add	r2, r0
 8006266:	4603      	mov	r3, r0
 8006268:	4293      	cmp	r3, r2
 800626a:	d100      	bne.n	800626e <memset+0xa>
 800626c:	4770      	bx	lr
 800626e:	f803 1b01 	strb.w	r1, [r3], #1
 8006272:	e7f9      	b.n	8006268 <memset+0x4>

08006274 <_close_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	@ (8006290 <_close_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fb f8fd 	bl	800147e <_close>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_close_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_close_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20004210 	.word	0x20004210

08006294 <_lseek_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d07      	ldr	r5, [pc, #28]	@ (80062b4 <_lseek_r+0x20>)
 8006298:	4604      	mov	r4, r0
 800629a:	4608      	mov	r0, r1
 800629c:	4611      	mov	r1, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f7fb f912 	bl	80014cc <_lseek>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_lseek_r+0x1e>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_lseek_r+0x1e>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20004210 	.word	0x20004210

080062b8 <_read_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	@ (80062d8 <_read_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fb f8a0 	bl	800140c <_read>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_read_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_read_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20004210 	.word	0x20004210

080062dc <_write_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d07      	ldr	r5, [pc, #28]	@ (80062fc <_write_r+0x20>)
 80062e0:	4604      	mov	r4, r0
 80062e2:	4608      	mov	r0, r1
 80062e4:	4611      	mov	r1, r2
 80062e6:	2200      	movs	r2, #0
 80062e8:	602a      	str	r2, [r5, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f7fb f8ab 	bl	8001446 <_write>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_write_r+0x1e>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_write_r+0x1e>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	20004210 	.word	0x20004210

08006300 <__errno>:
 8006300:	4b01      	ldr	r3, [pc, #4]	@ (8006308 <__errno+0x8>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	2000001c 	.word	0x2000001c

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4d0d      	ldr	r5, [pc, #52]	@ (8006344 <__libc_init_array+0x38>)
 8006310:	4c0d      	ldr	r4, [pc, #52]	@ (8006348 <__libc_init_array+0x3c>)
 8006312:	1b64      	subs	r4, r4, r5
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	2600      	movs	r6, #0
 8006318:	42a6      	cmp	r6, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4d0b      	ldr	r5, [pc, #44]	@ (800634c <__libc_init_array+0x40>)
 800631e:	4c0c      	ldr	r4, [pc, #48]	@ (8006350 <__libc_init_array+0x44>)
 8006320:	f000 fd32 	bl	8006d88 <_init>
 8006324:	1b64      	subs	r4, r4, r5
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	2600      	movs	r6, #0
 800632a:	42a6      	cmp	r6, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f855 3b04 	ldr.w	r3, [r5], #4
 8006334:	4798      	blx	r3
 8006336:	3601      	adds	r6, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f855 3b04 	ldr.w	r3, [r5], #4
 800633e:	4798      	blx	r3
 8006340:	3601      	adds	r6, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	08007074 	.word	0x08007074
 8006348:	08007074 	.word	0x08007074
 800634c:	08007074 	.word	0x08007074
 8006350:	08007078 	.word	0x08007078

08006354 <__retarget_lock_init_recursive>:
 8006354:	4770      	bx	lr

08006356 <__retarget_lock_acquire_recursive>:
 8006356:	4770      	bx	lr

08006358 <__retarget_lock_release_recursive>:
 8006358:	4770      	bx	lr

0800635a <memcpy>:
 800635a:	440a      	add	r2, r1
 800635c:	4291      	cmp	r1, r2
 800635e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006362:	d100      	bne.n	8006366 <memcpy+0xc>
 8006364:	4770      	bx	lr
 8006366:	b510      	push	{r4, lr}
 8006368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006370:	4291      	cmp	r1, r2
 8006372:	d1f9      	bne.n	8006368 <memcpy+0xe>
 8006374:	bd10      	pop	{r4, pc}
	...

08006378 <_free_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	2900      	cmp	r1, #0
 800637e:	d041      	beq.n	8006404 <_free_r+0x8c>
 8006380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006384:	1f0c      	subs	r4, r1, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	18e4      	addlt	r4, r4, r3
 800638c:	f000 f8e0 	bl	8006550 <__malloc_lock>
 8006390:	4a1d      	ldr	r2, [pc, #116]	@ (8006408 <_free_r+0x90>)
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	b933      	cbnz	r3, 80063a4 <_free_r+0x2c>
 8006396:	6063      	str	r3, [r4, #4]
 8006398:	6014      	str	r4, [r2, #0]
 800639a:	4628      	mov	r0, r5
 800639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a0:	f000 b8dc 	b.w	800655c <__malloc_unlock>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d908      	bls.n	80063ba <_free_r+0x42>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf01      	itttt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	1809      	addeq	r1, r1, r0
 80063b6:	6021      	streq	r1, [r4, #0]
 80063b8:	e7ed      	b.n	8006396 <_free_r+0x1e>
 80063ba:	461a      	mov	r2, r3
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b10b      	cbz	r3, 80063c4 <_free_r+0x4c>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d9fa      	bls.n	80063ba <_free_r+0x42>
 80063c4:	6811      	ldr	r1, [r2, #0]
 80063c6:	1850      	adds	r0, r2, r1
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d10b      	bne.n	80063e4 <_free_r+0x6c>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	4401      	add	r1, r0
 80063d0:	1850      	adds	r0, r2, r1
 80063d2:	4283      	cmp	r3, r0
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	d1e0      	bne.n	800639a <_free_r+0x22>
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	6053      	str	r3, [r2, #4]
 80063de:	4408      	add	r0, r1
 80063e0:	6010      	str	r0, [r2, #0]
 80063e2:	e7da      	b.n	800639a <_free_r+0x22>
 80063e4:	d902      	bls.n	80063ec <_free_r+0x74>
 80063e6:	230c      	movs	r3, #12
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	e7d6      	b.n	800639a <_free_r+0x22>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf04      	itt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	bf04      	itt	eq
 80063fc:	1809      	addeq	r1, r1, r0
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	6054      	str	r4, [r2, #4]
 8006402:	e7ca      	b.n	800639a <_free_r+0x22>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	2000421c 	.word	0x2000421c

0800640c <sbrk_aligned>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4e0f      	ldr	r6, [pc, #60]	@ (800644c <sbrk_aligned+0x40>)
 8006410:	460c      	mov	r4, r1
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	4605      	mov	r5, r0
 8006416:	b911      	cbnz	r1, 800641e <sbrk_aligned+0x12>
 8006418:	f000 fca6 	bl	8006d68 <_sbrk_r>
 800641c:	6030      	str	r0, [r6, #0]
 800641e:	4621      	mov	r1, r4
 8006420:	4628      	mov	r0, r5
 8006422:	f000 fca1 	bl	8006d68 <_sbrk_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d103      	bne.n	8006432 <sbrk_aligned+0x26>
 800642a:	f04f 34ff 	mov.w	r4, #4294967295
 800642e:	4620      	mov	r0, r4
 8006430:	bd70      	pop	{r4, r5, r6, pc}
 8006432:	1cc4      	adds	r4, r0, #3
 8006434:	f024 0403 	bic.w	r4, r4, #3
 8006438:	42a0      	cmp	r0, r4
 800643a:	d0f8      	beq.n	800642e <sbrk_aligned+0x22>
 800643c:	1a21      	subs	r1, r4, r0
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fc92 	bl	8006d68 <_sbrk_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d1f2      	bne.n	800642e <sbrk_aligned+0x22>
 8006448:	e7ef      	b.n	800642a <sbrk_aligned+0x1e>
 800644a:	bf00      	nop
 800644c:	20004218 	.word	0x20004218

08006450 <_malloc_r>:
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	1ccd      	adds	r5, r1, #3
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	2d00      	cmp	r5, #0
 8006464:	4606      	mov	r6, r0
 8006466:	db01      	blt.n	800646c <_malloc_r+0x1c>
 8006468:	42a9      	cmp	r1, r5
 800646a:	d904      	bls.n	8006476 <_malloc_r+0x26>
 800646c:	230c      	movs	r3, #12
 800646e:	6033      	str	r3, [r6, #0]
 8006470:	2000      	movs	r0, #0
 8006472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800654c <_malloc_r+0xfc>
 800647a:	f000 f869 	bl	8006550 <__malloc_lock>
 800647e:	f8d8 3000 	ldr.w	r3, [r8]
 8006482:	461c      	mov	r4, r3
 8006484:	bb44      	cbnz	r4, 80064d8 <_malloc_r+0x88>
 8006486:	4629      	mov	r1, r5
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff ffbf 	bl	800640c <sbrk_aligned>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	4604      	mov	r4, r0
 8006492:	d158      	bne.n	8006546 <_malloc_r+0xf6>
 8006494:	f8d8 4000 	ldr.w	r4, [r8]
 8006498:	4627      	mov	r7, r4
 800649a:	2f00      	cmp	r7, #0
 800649c:	d143      	bne.n	8006526 <_malloc_r+0xd6>
 800649e:	2c00      	cmp	r4, #0
 80064a0:	d04b      	beq.n	800653a <_malloc_r+0xea>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	4639      	mov	r1, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	eb04 0903 	add.w	r9, r4, r3
 80064ac:	f000 fc5c 	bl	8006d68 <_sbrk_r>
 80064b0:	4581      	cmp	r9, r0
 80064b2:	d142      	bne.n	800653a <_malloc_r+0xea>
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	1a6d      	subs	r5, r5, r1
 80064b8:	4629      	mov	r1, r5
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ffa6 	bl	800640c <sbrk_aligned>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d03a      	beq.n	800653a <_malloc_r+0xea>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	442b      	add	r3, r5
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	f8d8 3000 	ldr.w	r3, [r8]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	bb62      	cbnz	r2, 800652c <_malloc_r+0xdc>
 80064d2:	f8c8 7000 	str.w	r7, [r8]
 80064d6:	e00f      	b.n	80064f8 <_malloc_r+0xa8>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	1b52      	subs	r2, r2, r5
 80064dc:	d420      	bmi.n	8006520 <_malloc_r+0xd0>
 80064de:	2a0b      	cmp	r2, #11
 80064e0:	d917      	bls.n	8006512 <_malloc_r+0xc2>
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	6025      	str	r5, [r4, #0]
 80064e8:	bf18      	it	ne
 80064ea:	6059      	strne	r1, [r3, #4]
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	bf08      	it	eq
 80064f0:	f8c8 1000 	streq.w	r1, [r8]
 80064f4:	5162      	str	r2, [r4, r5]
 80064f6:	604b      	str	r3, [r1, #4]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f82f 	bl	800655c <__malloc_unlock>
 80064fe:	f104 000b 	add.w	r0, r4, #11
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	f020 0007 	bic.w	r0, r0, #7
 8006508:	1ac2      	subs	r2, r0, r3
 800650a:	bf1c      	itt	ne
 800650c:	1a1b      	subne	r3, r3, r0
 800650e:	50a3      	strne	r3, [r4, r2]
 8006510:	e7af      	b.n	8006472 <_malloc_r+0x22>
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	42a3      	cmp	r3, r4
 8006516:	bf0c      	ite	eq
 8006518:	f8c8 2000 	streq.w	r2, [r8]
 800651c:	605a      	strne	r2, [r3, #4]
 800651e:	e7eb      	b.n	80064f8 <_malloc_r+0xa8>
 8006520:	4623      	mov	r3, r4
 8006522:	6864      	ldr	r4, [r4, #4]
 8006524:	e7ae      	b.n	8006484 <_malloc_r+0x34>
 8006526:	463c      	mov	r4, r7
 8006528:	687f      	ldr	r7, [r7, #4]
 800652a:	e7b6      	b.n	800649a <_malloc_r+0x4a>
 800652c:	461a      	mov	r2, r3
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	d1fb      	bne.n	800652c <_malloc_r+0xdc>
 8006534:	2300      	movs	r3, #0
 8006536:	6053      	str	r3, [r2, #4]
 8006538:	e7de      	b.n	80064f8 <_malloc_r+0xa8>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	4630      	mov	r0, r6
 8006540:	f000 f80c 	bl	800655c <__malloc_unlock>
 8006544:	e794      	b.n	8006470 <_malloc_r+0x20>
 8006546:	6005      	str	r5, [r0, #0]
 8006548:	e7d6      	b.n	80064f8 <_malloc_r+0xa8>
 800654a:	bf00      	nop
 800654c:	2000421c 	.word	0x2000421c

08006550 <__malloc_lock>:
 8006550:	4801      	ldr	r0, [pc, #4]	@ (8006558 <__malloc_lock+0x8>)
 8006552:	f7ff bf00 	b.w	8006356 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	20004214 	.word	0x20004214

0800655c <__malloc_unlock>:
 800655c:	4801      	ldr	r0, [pc, #4]	@ (8006564 <__malloc_unlock+0x8>)
 800655e:	f7ff befb 	b.w	8006358 <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	20004214 	.word	0x20004214

08006568 <__sfputc_r>:
 8006568:	6893      	ldr	r3, [r2, #8]
 800656a:	3b01      	subs	r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	b410      	push	{r4}
 8006570:	6093      	str	r3, [r2, #8]
 8006572:	da08      	bge.n	8006586 <__sfputc_r+0x1e>
 8006574:	6994      	ldr	r4, [r2, #24]
 8006576:	42a3      	cmp	r3, r4
 8006578:	db01      	blt.n	800657e <__sfputc_r+0x16>
 800657a:	290a      	cmp	r1, #10
 800657c:	d103      	bne.n	8006586 <__sfputc_r+0x1e>
 800657e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006582:	f7ff bdda 	b.w	800613a <__swbuf_r>
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	1c58      	adds	r0, r3, #1
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	7019      	strb	r1, [r3, #0]
 800658e:	4608      	mov	r0, r1
 8006590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006594:	4770      	bx	lr

08006596 <__sfputs_r>:
 8006596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006598:	4606      	mov	r6, r0
 800659a:	460f      	mov	r7, r1
 800659c:	4614      	mov	r4, r2
 800659e:	18d5      	adds	r5, r2, r3
 80065a0:	42ac      	cmp	r4, r5
 80065a2:	d101      	bne.n	80065a8 <__sfputs_r+0x12>
 80065a4:	2000      	movs	r0, #0
 80065a6:	e007      	b.n	80065b8 <__sfputs_r+0x22>
 80065a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ac:	463a      	mov	r2, r7
 80065ae:	4630      	mov	r0, r6
 80065b0:	f7ff ffda 	bl	8006568 <__sfputc_r>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d1f3      	bne.n	80065a0 <__sfputs_r+0xa>
 80065b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065bc <_vfiprintf_r>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	460d      	mov	r5, r1
 80065c2:	b09d      	sub	sp, #116	@ 0x74
 80065c4:	4614      	mov	r4, r2
 80065c6:	4698      	mov	r8, r3
 80065c8:	4606      	mov	r6, r0
 80065ca:	b118      	cbz	r0, 80065d4 <_vfiprintf_r+0x18>
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b90b      	cbnz	r3, 80065d4 <_vfiprintf_r+0x18>
 80065d0:	f7ff fcca 	bl	8005f68 <__sinit>
 80065d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065d6:	07d9      	lsls	r1, r3, #31
 80065d8:	d405      	bmi.n	80065e6 <_vfiprintf_r+0x2a>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	059a      	lsls	r2, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_vfiprintf_r+0x2a>
 80065e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065e2:	f7ff feb8 	bl	8006356 <__retarget_lock_acquire_recursive>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	071b      	lsls	r3, r3, #28
 80065ea:	d501      	bpl.n	80065f0 <_vfiprintf_r+0x34>
 80065ec:	692b      	ldr	r3, [r5, #16]
 80065ee:	b99b      	cbnz	r3, 8006618 <_vfiprintf_r+0x5c>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7ff fde0 	bl	80061b8 <__swsetup_r>
 80065f8:	b170      	cbz	r0, 8006618 <_vfiprintf_r+0x5c>
 80065fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065fc:	07dc      	lsls	r4, r3, #31
 80065fe:	d504      	bpl.n	800660a <_vfiprintf_r+0x4e>
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	b01d      	add	sp, #116	@ 0x74
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	0598      	lsls	r0, r3, #22
 800660e:	d4f7      	bmi.n	8006600 <_vfiprintf_r+0x44>
 8006610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006612:	f7ff fea1 	bl	8006358 <__retarget_lock_release_recursive>
 8006616:	e7f3      	b.n	8006600 <_vfiprintf_r+0x44>
 8006618:	2300      	movs	r3, #0
 800661a:	9309      	str	r3, [sp, #36]	@ 0x24
 800661c:	2320      	movs	r3, #32
 800661e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006622:	f8cd 800c 	str.w	r8, [sp, #12]
 8006626:	2330      	movs	r3, #48	@ 0x30
 8006628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067d8 <_vfiprintf_r+0x21c>
 800662c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006630:	f04f 0901 	mov.w	r9, #1
 8006634:	4623      	mov	r3, r4
 8006636:	469a      	mov	sl, r3
 8006638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663c:	b10a      	cbz	r2, 8006642 <_vfiprintf_r+0x86>
 800663e:	2a25      	cmp	r2, #37	@ 0x25
 8006640:	d1f9      	bne.n	8006636 <_vfiprintf_r+0x7a>
 8006642:	ebba 0b04 	subs.w	fp, sl, r4
 8006646:	d00b      	beq.n	8006660 <_vfiprintf_r+0xa4>
 8006648:	465b      	mov	r3, fp
 800664a:	4622      	mov	r2, r4
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ffa1 	bl	8006596 <__sfputs_r>
 8006654:	3001      	adds	r0, #1
 8006656:	f000 80a7 	beq.w	80067a8 <_vfiprintf_r+0x1ec>
 800665a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800665c:	445a      	add	r2, fp
 800665e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 809f 	beq.w	80067a8 <_vfiprintf_r+0x1ec>
 800666a:	2300      	movs	r3, #0
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006674:	f10a 0a01 	add.w	sl, sl, #1
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006680:	931a      	str	r3, [sp, #104]	@ 0x68
 8006682:	4654      	mov	r4, sl
 8006684:	2205      	movs	r2, #5
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	4853      	ldr	r0, [pc, #332]	@ (80067d8 <_vfiprintf_r+0x21c>)
 800668c:	f7f9 fdc0 	bl	8000210 <memchr>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	b9d8      	cbnz	r0, 80066cc <_vfiprintf_r+0x110>
 8006694:	06d1      	lsls	r1, r2, #27
 8006696:	bf44      	itt	mi
 8006698:	2320      	movmi	r3, #32
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800669e:	0713      	lsls	r3, r2, #28
 80066a0:	bf44      	itt	mi
 80066a2:	232b      	movmi	r3, #43	@ 0x2b
 80066a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ae:	d015      	beq.n	80066dc <_vfiprintf_r+0x120>
 80066b0:	9a07      	ldr	r2, [sp, #28]
 80066b2:	4654      	mov	r4, sl
 80066b4:	2000      	movs	r0, #0
 80066b6:	f04f 0c0a 	mov.w	ip, #10
 80066ba:	4621      	mov	r1, r4
 80066bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c0:	3b30      	subs	r3, #48	@ 0x30
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d94b      	bls.n	800675e <_vfiprintf_r+0x1a2>
 80066c6:	b1b0      	cbz	r0, 80066f6 <_vfiprintf_r+0x13a>
 80066c8:	9207      	str	r2, [sp, #28]
 80066ca:	e014      	b.n	80066f6 <_vfiprintf_r+0x13a>
 80066cc:	eba0 0308 	sub.w	r3, r0, r8
 80066d0:	fa09 f303 	lsl.w	r3, r9, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	46a2      	mov	sl, r4
 80066da:	e7d2      	b.n	8006682 <_vfiprintf_r+0xc6>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d19      	adds	r1, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9103      	str	r1, [sp, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbb      	ittet	lt
 80066e8:	425b      	neglt	r3, r3
 80066ea:	f042 0202 	orrlt.w	r2, r2, #2
 80066ee:	9307      	strge	r3, [sp, #28]
 80066f0:	9307      	strlt	r3, [sp, #28]
 80066f2:	bfb8      	it	lt
 80066f4:	9204      	strlt	r2, [sp, #16]
 80066f6:	7823      	ldrb	r3, [r4, #0]
 80066f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80066fa:	d10a      	bne.n	8006712 <_vfiprintf_r+0x156>
 80066fc:	7863      	ldrb	r3, [r4, #1]
 80066fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006700:	d132      	bne.n	8006768 <_vfiprintf_r+0x1ac>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9203      	str	r2, [sp, #12]
 800670a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800670e:	3402      	adds	r4, #2
 8006710:	9305      	str	r3, [sp, #20]
 8006712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067e8 <_vfiprintf_r+0x22c>
 8006716:	7821      	ldrb	r1, [r4, #0]
 8006718:	2203      	movs	r2, #3
 800671a:	4650      	mov	r0, sl
 800671c:	f7f9 fd78 	bl	8000210 <memchr>
 8006720:	b138      	cbz	r0, 8006732 <_vfiprintf_r+0x176>
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	eba0 000a 	sub.w	r0, r0, sl
 8006728:	2240      	movs	r2, #64	@ 0x40
 800672a:	4082      	lsls	r2, r0
 800672c:	4313      	orrs	r3, r2
 800672e:	3401      	adds	r4, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006736:	4829      	ldr	r0, [pc, #164]	@ (80067dc <_vfiprintf_r+0x220>)
 8006738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800673c:	2206      	movs	r2, #6
 800673e:	f7f9 fd67 	bl	8000210 <memchr>
 8006742:	2800      	cmp	r0, #0
 8006744:	d03f      	beq.n	80067c6 <_vfiprintf_r+0x20a>
 8006746:	4b26      	ldr	r3, [pc, #152]	@ (80067e0 <_vfiprintf_r+0x224>)
 8006748:	bb1b      	cbnz	r3, 8006792 <_vfiprintf_r+0x1d6>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	3307      	adds	r3, #7
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	3308      	adds	r3, #8
 8006754:	9303      	str	r3, [sp, #12]
 8006756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006758:	443b      	add	r3, r7
 800675a:	9309      	str	r3, [sp, #36]	@ 0x24
 800675c:	e76a      	b.n	8006634 <_vfiprintf_r+0x78>
 800675e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006762:	460c      	mov	r4, r1
 8006764:	2001      	movs	r0, #1
 8006766:	e7a8      	b.n	80066ba <_vfiprintf_r+0xfe>
 8006768:	2300      	movs	r3, #0
 800676a:	3401      	adds	r4, #1
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4620      	mov	r0, r4
 8006776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677a:	3a30      	subs	r2, #48	@ 0x30
 800677c:	2a09      	cmp	r2, #9
 800677e:	d903      	bls.n	8006788 <_vfiprintf_r+0x1cc>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0c6      	beq.n	8006712 <_vfiprintf_r+0x156>
 8006784:	9105      	str	r1, [sp, #20]
 8006786:	e7c4      	b.n	8006712 <_vfiprintf_r+0x156>
 8006788:	fb0c 2101 	mla	r1, ip, r1, r2
 800678c:	4604      	mov	r4, r0
 800678e:	2301      	movs	r3, #1
 8006790:	e7f0      	b.n	8006774 <_vfiprintf_r+0x1b8>
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <_vfiprintf_r+0x228>)
 800679a:	a904      	add	r1, sp, #16
 800679c:	4630      	mov	r0, r6
 800679e:	f3af 8000 	nop.w
 80067a2:	4607      	mov	r7, r0
 80067a4:	1c78      	adds	r0, r7, #1
 80067a6:	d1d6      	bne.n	8006756 <_vfiprintf_r+0x19a>
 80067a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067aa:	07d9      	lsls	r1, r3, #31
 80067ac:	d405      	bmi.n	80067ba <_vfiprintf_r+0x1fe>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	059a      	lsls	r2, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_vfiprintf_r+0x1fe>
 80067b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067b6:	f7ff fdcf 	bl	8006358 <__retarget_lock_release_recursive>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	065b      	lsls	r3, r3, #25
 80067be:	f53f af1f 	bmi.w	8006600 <_vfiprintf_r+0x44>
 80067c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c4:	e71e      	b.n	8006604 <_vfiprintf_r+0x48>
 80067c6:	ab03      	add	r3, sp, #12
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	462a      	mov	r2, r5
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <_vfiprintf_r+0x228>)
 80067ce:	a904      	add	r1, sp, #16
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 f879 	bl	80068c8 <_printf_i>
 80067d6:	e7e4      	b.n	80067a2 <_vfiprintf_r+0x1e6>
 80067d8:	08007038 	.word	0x08007038
 80067dc:	08007042 	.word	0x08007042
 80067e0:	00000000 	.word	0x00000000
 80067e4:	08006597 	.word	0x08006597
 80067e8:	0800703e 	.word	0x0800703e

080067ec <_printf_common>:
 80067ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	4616      	mov	r6, r2
 80067f2:	4698      	mov	r8, r3
 80067f4:	688a      	ldr	r2, [r1, #8]
 80067f6:	690b      	ldr	r3, [r1, #16]
 80067f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bfb8      	it	lt
 8006800:	4613      	movlt	r3, r2
 8006802:	6033      	str	r3, [r6, #0]
 8006804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006808:	4607      	mov	r7, r0
 800680a:	460c      	mov	r4, r1
 800680c:	b10a      	cbz	r2, 8006812 <_printf_common+0x26>
 800680e:	3301      	adds	r3, #1
 8006810:	6033      	str	r3, [r6, #0]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	0699      	lsls	r1, r3, #26
 8006816:	bf42      	ittt	mi
 8006818:	6833      	ldrmi	r3, [r6, #0]
 800681a:	3302      	addmi	r3, #2
 800681c:	6033      	strmi	r3, [r6, #0]
 800681e:	6825      	ldr	r5, [r4, #0]
 8006820:	f015 0506 	ands.w	r5, r5, #6
 8006824:	d106      	bne.n	8006834 <_printf_common+0x48>
 8006826:	f104 0a19 	add.w	sl, r4, #25
 800682a:	68e3      	ldr	r3, [r4, #12]
 800682c:	6832      	ldr	r2, [r6, #0]
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	42ab      	cmp	r3, r5
 8006832:	dc26      	bgt.n	8006882 <_printf_common+0x96>
 8006834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	3b00      	subs	r3, #0
 800683c:	bf18      	it	ne
 800683e:	2301      	movne	r3, #1
 8006840:	0692      	lsls	r2, r2, #26
 8006842:	d42b      	bmi.n	800689c <_printf_common+0xb0>
 8006844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006848:	4641      	mov	r1, r8
 800684a:	4638      	mov	r0, r7
 800684c:	47c8      	blx	r9
 800684e:	3001      	adds	r0, #1
 8006850:	d01e      	beq.n	8006890 <_printf_common+0xa4>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	f003 0306 	and.w	r3, r3, #6
 800685a:	2b04      	cmp	r3, #4
 800685c:	bf02      	ittt	eq
 800685e:	68e5      	ldreq	r5, [r4, #12]
 8006860:	6833      	ldreq	r3, [r6, #0]
 8006862:	1aed      	subeq	r5, r5, r3
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	bf0c      	ite	eq
 8006868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800686c:	2500      	movne	r5, #0
 800686e:	4293      	cmp	r3, r2
 8006870:	bfc4      	itt	gt
 8006872:	1a9b      	subgt	r3, r3, r2
 8006874:	18ed      	addgt	r5, r5, r3
 8006876:	2600      	movs	r6, #0
 8006878:	341a      	adds	r4, #26
 800687a:	42b5      	cmp	r5, r6
 800687c:	d11a      	bne.n	80068b4 <_printf_common+0xc8>
 800687e:	2000      	movs	r0, #0
 8006880:	e008      	b.n	8006894 <_printf_common+0xa8>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4641      	mov	r1, r8
 8006888:	4638      	mov	r0, r7
 800688a:	47c8      	blx	r9
 800688c:	3001      	adds	r0, #1
 800688e:	d103      	bne.n	8006898 <_printf_common+0xac>
 8006890:	f04f 30ff 	mov.w	r0, #4294967295
 8006894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006898:	3501      	adds	r5, #1
 800689a:	e7c6      	b.n	800682a <_printf_common+0x3e>
 800689c:	18e1      	adds	r1, r4, r3
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	2030      	movs	r0, #48	@ 0x30
 80068a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068a6:	4422      	add	r2, r4
 80068a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068b0:	3302      	adds	r3, #2
 80068b2:	e7c7      	b.n	8006844 <_printf_common+0x58>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4622      	mov	r2, r4
 80068b8:	4641      	mov	r1, r8
 80068ba:	4638      	mov	r0, r7
 80068bc:	47c8      	blx	r9
 80068be:	3001      	adds	r0, #1
 80068c0:	d0e6      	beq.n	8006890 <_printf_common+0xa4>
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7d9      	b.n	800687a <_printf_common+0x8e>
	...

080068c8 <_printf_i>:
 80068c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	7e0f      	ldrb	r7, [r1, #24]
 80068ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068d0:	2f78      	cmp	r7, #120	@ 0x78
 80068d2:	4691      	mov	r9, r2
 80068d4:	4680      	mov	r8, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	469a      	mov	sl, r3
 80068da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068de:	d807      	bhi.n	80068f0 <_printf_i+0x28>
 80068e0:	2f62      	cmp	r7, #98	@ 0x62
 80068e2:	d80a      	bhi.n	80068fa <_printf_i+0x32>
 80068e4:	2f00      	cmp	r7, #0
 80068e6:	f000 80d2 	beq.w	8006a8e <_printf_i+0x1c6>
 80068ea:	2f58      	cmp	r7, #88	@ 0x58
 80068ec:	f000 80b9 	beq.w	8006a62 <_printf_i+0x19a>
 80068f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068f8:	e03a      	b.n	8006970 <_printf_i+0xa8>
 80068fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068fe:	2b15      	cmp	r3, #21
 8006900:	d8f6      	bhi.n	80068f0 <_printf_i+0x28>
 8006902:	a101      	add	r1, pc, #4	@ (adr r1, 8006908 <_printf_i+0x40>)
 8006904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006908:	08006961 	.word	0x08006961
 800690c:	08006975 	.word	0x08006975
 8006910:	080068f1 	.word	0x080068f1
 8006914:	080068f1 	.word	0x080068f1
 8006918:	080068f1 	.word	0x080068f1
 800691c:	080068f1 	.word	0x080068f1
 8006920:	08006975 	.word	0x08006975
 8006924:	080068f1 	.word	0x080068f1
 8006928:	080068f1 	.word	0x080068f1
 800692c:	080068f1 	.word	0x080068f1
 8006930:	080068f1 	.word	0x080068f1
 8006934:	08006a75 	.word	0x08006a75
 8006938:	0800699f 	.word	0x0800699f
 800693c:	08006a2f 	.word	0x08006a2f
 8006940:	080068f1 	.word	0x080068f1
 8006944:	080068f1 	.word	0x080068f1
 8006948:	08006a97 	.word	0x08006a97
 800694c:	080068f1 	.word	0x080068f1
 8006950:	0800699f 	.word	0x0800699f
 8006954:	080068f1 	.word	0x080068f1
 8006958:	080068f1 	.word	0x080068f1
 800695c:	08006a37 	.word	0x08006a37
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6032      	str	r2, [r6, #0]
 8006968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800696c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006970:	2301      	movs	r3, #1
 8006972:	e09d      	b.n	8006ab0 <_printf_i+0x1e8>
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1d19      	adds	r1, r3, #4
 800697a:	6031      	str	r1, [r6, #0]
 800697c:	0606      	lsls	r6, r0, #24
 800697e:	d501      	bpl.n	8006984 <_printf_i+0xbc>
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	e003      	b.n	800698c <_printf_i+0xc4>
 8006984:	0645      	lsls	r5, r0, #25
 8006986:	d5fb      	bpl.n	8006980 <_printf_i+0xb8>
 8006988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800698c:	2d00      	cmp	r5, #0
 800698e:	da03      	bge.n	8006998 <_printf_i+0xd0>
 8006990:	232d      	movs	r3, #45	@ 0x2d
 8006992:	426d      	negs	r5, r5
 8006994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006998:	4859      	ldr	r0, [pc, #356]	@ (8006b00 <_printf_i+0x238>)
 800699a:	230a      	movs	r3, #10
 800699c:	e011      	b.n	80069c2 <_printf_i+0xfa>
 800699e:	6821      	ldr	r1, [r4, #0]
 80069a0:	6833      	ldr	r3, [r6, #0]
 80069a2:	0608      	lsls	r0, r1, #24
 80069a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069a8:	d402      	bmi.n	80069b0 <_printf_i+0xe8>
 80069aa:	0649      	lsls	r1, r1, #25
 80069ac:	bf48      	it	mi
 80069ae:	b2ad      	uxthmi	r5, r5
 80069b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069b2:	4853      	ldr	r0, [pc, #332]	@ (8006b00 <_printf_i+0x238>)
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	bf14      	ite	ne
 80069b8:	230a      	movne	r3, #10
 80069ba:	2308      	moveq	r3, #8
 80069bc:	2100      	movs	r1, #0
 80069be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069c2:	6866      	ldr	r6, [r4, #4]
 80069c4:	60a6      	str	r6, [r4, #8]
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	bfa2      	ittt	ge
 80069ca:	6821      	ldrge	r1, [r4, #0]
 80069cc:	f021 0104 	bicge.w	r1, r1, #4
 80069d0:	6021      	strge	r1, [r4, #0]
 80069d2:	b90d      	cbnz	r5, 80069d8 <_printf_i+0x110>
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	d04b      	beq.n	8006a70 <_printf_i+0x1a8>
 80069d8:	4616      	mov	r6, r2
 80069da:	fbb5 f1f3 	udiv	r1, r5, r3
 80069de:	fb03 5711 	mls	r7, r3, r1, r5
 80069e2:	5dc7      	ldrb	r7, [r0, r7]
 80069e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e8:	462f      	mov	r7, r5
 80069ea:	42bb      	cmp	r3, r7
 80069ec:	460d      	mov	r5, r1
 80069ee:	d9f4      	bls.n	80069da <_printf_i+0x112>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d10b      	bne.n	8006a0c <_printf_i+0x144>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	07df      	lsls	r7, r3, #31
 80069f8:	d508      	bpl.n	8006a0c <_printf_i+0x144>
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	6861      	ldr	r1, [r4, #4]
 80069fe:	4299      	cmp	r1, r3
 8006a00:	bfde      	ittt	le
 8006a02:	2330      	movle	r3, #48	@ 0x30
 8006a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a0c:	1b92      	subs	r2, r2, r6
 8006a0e:	6122      	str	r2, [r4, #16]
 8006a10:	f8cd a000 	str.w	sl, [sp]
 8006a14:	464b      	mov	r3, r9
 8006a16:	aa03      	add	r2, sp, #12
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7ff fee6 	bl	80067ec <_printf_common>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d14a      	bne.n	8006aba <_printf_i+0x1f2>
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	b004      	add	sp, #16
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f043 0320 	orr.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	4833      	ldr	r0, [pc, #204]	@ (8006b04 <_printf_i+0x23c>)
 8006a38:	2778      	movs	r7, #120	@ 0x78
 8006a3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6831      	ldr	r1, [r6, #0]
 8006a42:	061f      	lsls	r7, r3, #24
 8006a44:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a48:	d402      	bmi.n	8006a50 <_printf_i+0x188>
 8006a4a:	065f      	lsls	r7, r3, #25
 8006a4c:	bf48      	it	mi
 8006a4e:	b2ad      	uxthmi	r5, r5
 8006a50:	6031      	str	r1, [r6, #0]
 8006a52:	07d9      	lsls	r1, r3, #31
 8006a54:	bf44      	itt	mi
 8006a56:	f043 0320 	orrmi.w	r3, r3, #32
 8006a5a:	6023      	strmi	r3, [r4, #0]
 8006a5c:	b11d      	cbz	r5, 8006a66 <_printf_i+0x19e>
 8006a5e:	2310      	movs	r3, #16
 8006a60:	e7ac      	b.n	80069bc <_printf_i+0xf4>
 8006a62:	4827      	ldr	r0, [pc, #156]	@ (8006b00 <_printf_i+0x238>)
 8006a64:	e7e9      	b.n	8006a3a <_printf_i+0x172>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f023 0320 	bic.w	r3, r3, #32
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	e7f6      	b.n	8006a5e <_printf_i+0x196>
 8006a70:	4616      	mov	r6, r2
 8006a72:	e7bd      	b.n	80069f0 <_printf_i+0x128>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	6961      	ldr	r1, [r4, #20]
 8006a7a:	1d18      	adds	r0, r3, #4
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	062e      	lsls	r6, r5, #24
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	d501      	bpl.n	8006a88 <_printf_i+0x1c0>
 8006a84:	6019      	str	r1, [r3, #0]
 8006a86:	e002      	b.n	8006a8e <_printf_i+0x1c6>
 8006a88:	0668      	lsls	r0, r5, #25
 8006a8a:	d5fb      	bpl.n	8006a84 <_printf_i+0x1bc>
 8006a8c:	8019      	strh	r1, [r3, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	6123      	str	r3, [r4, #16]
 8006a92:	4616      	mov	r6, r2
 8006a94:	e7bc      	b.n	8006a10 <_printf_i+0x148>
 8006a96:	6833      	ldr	r3, [r6, #0]
 8006a98:	1d1a      	adds	r2, r3, #4
 8006a9a:	6032      	str	r2, [r6, #0]
 8006a9c:	681e      	ldr	r6, [r3, #0]
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7f9 fbb4 	bl	8000210 <memchr>
 8006aa8:	b108      	cbz	r0, 8006aae <_printf_i+0x1e6>
 8006aaa:	1b80      	subs	r0, r0, r6
 8006aac:	6060      	str	r0, [r4, #4]
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab8:	e7aa      	b.n	8006a10 <_printf_i+0x148>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	4632      	mov	r2, r6
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	47d0      	blx	sl
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d0ad      	beq.n	8006a24 <_printf_i+0x15c>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	079b      	lsls	r3, r3, #30
 8006acc:	d413      	bmi.n	8006af6 <_printf_i+0x22e>
 8006ace:	68e0      	ldr	r0, [r4, #12]
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	4298      	cmp	r0, r3
 8006ad4:	bfb8      	it	lt
 8006ad6:	4618      	movlt	r0, r3
 8006ad8:	e7a6      	b.n	8006a28 <_printf_i+0x160>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4632      	mov	r2, r6
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	47d0      	blx	sl
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d09d      	beq.n	8006a24 <_printf_i+0x15c>
 8006ae8:	3501      	adds	r5, #1
 8006aea:	68e3      	ldr	r3, [r4, #12]
 8006aec:	9903      	ldr	r1, [sp, #12]
 8006aee:	1a5b      	subs	r3, r3, r1
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dcf2      	bgt.n	8006ada <_printf_i+0x212>
 8006af4:	e7eb      	b.n	8006ace <_printf_i+0x206>
 8006af6:	2500      	movs	r5, #0
 8006af8:	f104 0619 	add.w	r6, r4, #25
 8006afc:	e7f5      	b.n	8006aea <_printf_i+0x222>
 8006afe:	bf00      	nop
 8006b00:	08007049 	.word	0x08007049
 8006b04:	0800705a 	.word	0x0800705a

08006b08 <__sflush_r>:
 8006b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	0716      	lsls	r6, r2, #28
 8006b12:	4605      	mov	r5, r0
 8006b14:	460c      	mov	r4, r1
 8006b16:	d454      	bmi.n	8006bc2 <__sflush_r+0xba>
 8006b18:	684b      	ldr	r3, [r1, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc02      	bgt.n	8006b24 <__sflush_r+0x1c>
 8006b1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	dd48      	ble.n	8006bb6 <__sflush_r+0xae>
 8006b24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d045      	beq.n	8006bb6 <__sflush_r+0xae>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b30:	682f      	ldr	r7, [r5, #0]
 8006b32:	6a21      	ldr	r1, [r4, #32]
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	d030      	beq.n	8006b9a <__sflush_r+0x92>
 8006b38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	0759      	lsls	r1, r3, #29
 8006b3e:	d505      	bpl.n	8006b4c <__sflush_r+0x44>
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b46:	b10b      	cbz	r3, 8006b4c <__sflush_r+0x44>
 8006b48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b50:	6a21      	ldr	r1, [r4, #32]
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b0      	blx	r6
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	d106      	bne.n	8006b6a <__sflush_r+0x62>
 8006b5c:	6829      	ldr	r1, [r5, #0]
 8006b5e:	291d      	cmp	r1, #29
 8006b60:	d82b      	bhi.n	8006bba <__sflush_r+0xb2>
 8006b62:	4a2a      	ldr	r2, [pc, #168]	@ (8006c0c <__sflush_r+0x104>)
 8006b64:	410a      	asrs	r2, r1
 8006b66:	07d6      	lsls	r6, r2, #31
 8006b68:	d427      	bmi.n	8006bba <__sflush_r+0xb2>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6062      	str	r2, [r4, #4]
 8006b6e:	04d9      	lsls	r1, r3, #19
 8006b70:	6922      	ldr	r2, [r4, #16]
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	d504      	bpl.n	8006b80 <__sflush_r+0x78>
 8006b76:	1c42      	adds	r2, r0, #1
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0x76>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	b903      	cbnz	r3, 8006b80 <__sflush_r+0x78>
 8006b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b82:	602f      	str	r7, [r5, #0]
 8006b84:	b1b9      	cbz	r1, 8006bb6 <__sflush_r+0xae>
 8006b86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b8a:	4299      	cmp	r1, r3
 8006b8c:	d002      	beq.n	8006b94 <__sflush_r+0x8c>
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7ff fbf2 	bl	8006378 <_free_r>
 8006b94:	2300      	movs	r3, #0
 8006b96:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b98:	e00d      	b.n	8006bb6 <__sflush_r+0xae>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b0      	blx	r6
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	1c50      	adds	r0, r2, #1
 8006ba4:	d1c9      	bne.n	8006b3a <__sflush_r+0x32>
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0c6      	beq.n	8006b3a <__sflush_r+0x32>
 8006bac:	2b1d      	cmp	r3, #29
 8006bae:	d001      	beq.n	8006bb4 <__sflush_r+0xac>
 8006bb0:	2b16      	cmp	r3, #22
 8006bb2:	d11e      	bne.n	8006bf2 <__sflush_r+0xea>
 8006bb4:	602f      	str	r7, [r5, #0]
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e022      	b.n	8006c00 <__sflush_r+0xf8>
 8006bba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bbe:	b21b      	sxth	r3, r3
 8006bc0:	e01b      	b.n	8006bfa <__sflush_r+0xf2>
 8006bc2:	690f      	ldr	r7, [r1, #16]
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	d0f6      	beq.n	8006bb6 <__sflush_r+0xae>
 8006bc8:	0793      	lsls	r3, r2, #30
 8006bca:	680e      	ldr	r6, [r1, #0]
 8006bcc:	bf08      	it	eq
 8006bce:	694b      	ldreq	r3, [r1, #20]
 8006bd0:	600f      	str	r7, [r1, #0]
 8006bd2:	bf18      	it	ne
 8006bd4:	2300      	movne	r3, #0
 8006bd6:	eba6 0807 	sub.w	r8, r6, r7
 8006bda:	608b      	str	r3, [r1, #8]
 8006bdc:	f1b8 0f00 	cmp.w	r8, #0
 8006be0:	dde9      	ble.n	8006bb6 <__sflush_r+0xae>
 8006be2:	6a21      	ldr	r1, [r4, #32]
 8006be4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006be6:	4643      	mov	r3, r8
 8006be8:	463a      	mov	r2, r7
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b0      	blx	r6
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	dc08      	bgt.n	8006c04 <__sflush_r+0xfc>
 8006bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c04:	4407      	add	r7, r0
 8006c06:	eba8 0800 	sub.w	r8, r8, r0
 8006c0a:	e7e7      	b.n	8006bdc <__sflush_r+0xd4>
 8006c0c:	dfbffffe 	.word	0xdfbffffe

08006c10 <_fflush_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	b913      	cbnz	r3, 8006c20 <_fflush_r+0x10>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	b118      	cbz	r0, 8006c2a <_fflush_r+0x1a>
 8006c22:	6a03      	ldr	r3, [r0, #32]
 8006c24:	b90b      	cbnz	r3, 8006c2a <_fflush_r+0x1a>
 8006c26:	f7ff f99f 	bl	8005f68 <__sinit>
 8006c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f3      	beq.n	8006c1a <_fflush_r+0xa>
 8006c32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c34:	07d0      	lsls	r0, r2, #31
 8006c36:	d404      	bmi.n	8006c42 <_fflush_r+0x32>
 8006c38:	0599      	lsls	r1, r3, #22
 8006c3a:	d402      	bmi.n	8006c42 <_fflush_r+0x32>
 8006c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c3e:	f7ff fb8a 	bl	8006356 <__retarget_lock_acquire_recursive>
 8006c42:	4628      	mov	r0, r5
 8006c44:	4621      	mov	r1, r4
 8006c46:	f7ff ff5f 	bl	8006b08 <__sflush_r>
 8006c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c4c:	07da      	lsls	r2, r3, #31
 8006c4e:	4605      	mov	r5, r0
 8006c50:	d4e4      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	059b      	lsls	r3, r3, #22
 8006c56:	d4e1      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c5a:	f7ff fb7d 	bl	8006358 <__retarget_lock_release_recursive>
 8006c5e:	e7dd      	b.n	8006c1c <_fflush_r+0xc>

08006c60 <__swhatbuf_r>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	b096      	sub	sp, #88	@ 0x58
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	461e      	mov	r6, r3
 8006c70:	da0d      	bge.n	8006c8e <__swhatbuf_r+0x2e>
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	bf14      	ite	ne
 8006c7e:	2340      	movne	r3, #64	@ 0x40
 8006c80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c84:	2000      	movs	r0, #0
 8006c86:	6031      	str	r1, [r6, #0]
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	b016      	add	sp, #88	@ 0x58
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
 8006c8e:	466a      	mov	r2, sp
 8006c90:	f000 f848 	bl	8006d24 <_fstat_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	dbec      	blt.n	8006c72 <__swhatbuf_r+0x12>
 8006c98:	9901      	ldr	r1, [sp, #4]
 8006c9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ca2:	4259      	negs	r1, r3
 8006ca4:	4159      	adcs	r1, r3
 8006ca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006caa:	e7eb      	b.n	8006c84 <__swhatbuf_r+0x24>

08006cac <__smakebuf_r>:
 8006cac:	898b      	ldrh	r3, [r1, #12]
 8006cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb0:	079d      	lsls	r5, r3, #30
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	d507      	bpl.n	8006cc8 <__smakebuf_r+0x1c>
 8006cb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	6163      	str	r3, [r4, #20]
 8006cc4:	b003      	add	sp, #12
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc8:	ab01      	add	r3, sp, #4
 8006cca:	466a      	mov	r2, sp
 8006ccc:	f7ff ffc8 	bl	8006c60 <__swhatbuf_r>
 8006cd0:	9f00      	ldr	r7, [sp, #0]
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	4639      	mov	r1, r7
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f7ff fbba 	bl	8006450 <_malloc_r>
 8006cdc:	b948      	cbnz	r0, 8006cf2 <__smakebuf_r+0x46>
 8006cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce2:	059a      	lsls	r2, r3, #22
 8006ce4:	d4ee      	bmi.n	8006cc4 <__smakebuf_r+0x18>
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	f043 0302 	orr.w	r3, r3, #2
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	e7e2      	b.n	8006cb8 <__smakebuf_r+0xc>
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	6020      	str	r0, [r4, #0]
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d02:	b15b      	cbz	r3, 8006d1c <__smakebuf_r+0x70>
 8006d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 f81d 	bl	8006d48 <_isatty_r>
 8006d0e:	b128      	cbz	r0, 8006d1c <__smakebuf_r+0x70>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	431d      	orrs	r5, r3
 8006d20:	81a5      	strh	r5, [r4, #12]
 8006d22:	e7cf      	b.n	8006cc4 <__smakebuf_r+0x18>

08006d24 <_fstat_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d07      	ldr	r5, [pc, #28]	@ (8006d44 <_fstat_r+0x20>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	f7fa fbb0 	bl	8001496 <_fstat>
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	d102      	bne.n	8006d40 <_fstat_r+0x1c>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	b103      	cbz	r3, 8006d40 <_fstat_r+0x1c>
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	bd38      	pop	{r3, r4, r5, pc}
 8006d42:	bf00      	nop
 8006d44:	20004210 	.word	0x20004210

08006d48 <_isatty_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4d06      	ldr	r5, [pc, #24]	@ (8006d64 <_isatty_r+0x1c>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	f7fa fbaf 	bl	80014b6 <_isatty>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d102      	bne.n	8006d62 <_isatty_r+0x1a>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	b103      	cbz	r3, 8006d62 <_isatty_r+0x1a>
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	bd38      	pop	{r3, r4, r5, pc}
 8006d64:	20004210 	.word	0x20004210

08006d68 <_sbrk_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d06      	ldr	r5, [pc, #24]	@ (8006d84 <_sbrk_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7fa fbb8 	bl	80014e8 <_sbrk>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_sbrk_r+0x1a>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_sbrk_r+0x1a>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20004210 	.word	0x20004210

08006d88 <_init>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr

08006d94 <_fini>:
 8006d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d96:	bf00      	nop
 8006d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9a:	bc08      	pop	{r3}
 8006d9c:	469e      	mov	lr, r3
 8006d9e:	4770      	bx	lr
